/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ListPictureForItem200Response } from '../model';
// @ts-ignore
import type { PatchPictureForItemRequest } from '../model';
// @ts-ignore
import type { Picture } from '../model';
/**
 * PictureApi - axios parameter creator
 * @export
 */
export const PictureApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type picture in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} pictureId (v1.0) id for picture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePicture: async (companyId: string, pictureId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deletePicture', 'companyId', companyId)
            // verify required parameter 'pictureId' is not null or undefined
            assertParamExists('deletePicture', 'pictureId', pictureId)
            const localVarPath = `/companies({company_id})/picture({picture_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"picture_id"}}`, encodeURIComponent(String(pictureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an object of type picture in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerId (v1.0) id for customer
         * @param {string} pictureId (v1.0) id for picture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePictureForCustomer: async (companyId: string, customerId: string, pictureId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deletePictureForCustomer', 'companyId', companyId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('deletePictureForCustomer', 'customerId', customerId)
            // verify required parameter 'pictureId' is not null or undefined
            assertParamExists('deletePictureForCustomer', 'pictureId', pictureId)
            const localVarPath = `/companies({company_id})/customers({customer_id})/picture({picture_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"picture_id"}}`, encodeURIComponent(String(pictureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an object of type picture in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {string} pictureId (v1.0) id for picture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePictureForEmployee: async (companyId: string, employeeId: string, pictureId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deletePictureForEmployee', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('deletePictureForEmployee', 'employeeId', employeeId)
            // verify required parameter 'pictureId' is not null or undefined
            assertParamExists('deletePictureForEmployee', 'pictureId', pictureId)
            const localVarPath = `/companies({company_id})/employees({employee_id})/picture({picture_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)))
                .replace(`{${"picture_id"}}`, encodeURIComponent(String(pictureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an object of type picture in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} itemId (v1.0) id for item
         * @param {string} pictureId (v1.0) id for picture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePictureForItem: async (companyId: string, itemId: string, pictureId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deletePictureForItem', 'companyId', companyId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('deletePictureForItem', 'itemId', itemId)
            // verify required parameter 'pictureId' is not null or undefined
            assertParamExists('deletePictureForItem', 'pictureId', pictureId)
            const localVarPath = `/companies({company_id})/items({item_id})/picture({picture_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"item_id"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"picture_id"}}`, encodeURIComponent(String(pictureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an object of type picture in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} vendorId (v1.0) id for vendor
         * @param {string} pictureId (v1.0) id for picture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePictureForVendor: async (companyId: string, vendorId: string, pictureId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deletePictureForVendor', 'companyId', companyId)
            // verify required parameter 'vendorId' is not null or undefined
            assertParamExists('deletePictureForVendor', 'vendorId', vendorId)
            // verify required parameter 'pictureId' is not null or undefined
            assertParamExists('deletePictureForVendor', 'pictureId', pictureId)
            const localVarPath = `/companies({company_id})/vendors({vendor_id})/picture({picture_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"vendor_id"}}`, encodeURIComponent(String(vendorId)))
                .replace(`{${"picture_id"}}`, encodeURIComponent(String(pictureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type picture for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} pictureId (v1.0) id for picture
         * @param {Array<GetPictureSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPicture: async (companyId: string, pictureId: string, $select?: Array<GetPictureSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPicture', 'companyId', companyId)
            // verify required parameter 'pictureId' is not null or undefined
            assertParamExists('getPicture', 'pictureId', pictureId)
            const localVarPath = `/companies({company_id})/picture({picture_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"picture_id"}}`, encodeURIComponent(String(pictureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type picture for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerId (v1.0) id for customer
         * @param {string} pictureId (v1.0) id for picture
         * @param {Array<GetPictureForCustomerSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPictureForCustomer: async (companyId: string, customerId: string, pictureId: string, $select?: Array<GetPictureForCustomerSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPictureForCustomer', 'companyId', companyId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getPictureForCustomer', 'customerId', customerId)
            // verify required parameter 'pictureId' is not null or undefined
            assertParamExists('getPictureForCustomer', 'pictureId', pictureId)
            const localVarPath = `/companies({company_id})/customers({customer_id})/picture({picture_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"picture_id"}}`, encodeURIComponent(String(pictureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type picture for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {string} pictureId (v1.0) id for picture
         * @param {Array<GetPictureForEmployeeSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPictureForEmployee: async (companyId: string, employeeId: string, pictureId: string, $select?: Array<GetPictureForEmployeeSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPictureForEmployee', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getPictureForEmployee', 'employeeId', employeeId)
            // verify required parameter 'pictureId' is not null or undefined
            assertParamExists('getPictureForEmployee', 'pictureId', pictureId)
            const localVarPath = `/companies({company_id})/employees({employee_id})/picture({picture_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)))
                .replace(`{${"picture_id"}}`, encodeURIComponent(String(pictureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type picture for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} itemId (v1.0) id for item
         * @param {string} pictureId (v1.0) id for picture
         * @param {Array<GetPictureForItemSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPictureForItem: async (companyId: string, itemId: string, pictureId: string, $select?: Array<GetPictureForItemSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPictureForItem', 'companyId', companyId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getPictureForItem', 'itemId', itemId)
            // verify required parameter 'pictureId' is not null or undefined
            assertParamExists('getPictureForItem', 'pictureId', pictureId)
            const localVarPath = `/companies({company_id})/items({item_id})/picture({picture_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"item_id"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"picture_id"}}`, encodeURIComponent(String(pictureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type picture for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} vendorId (v1.0) id for vendor
         * @param {string} pictureId (v1.0) id for picture
         * @param {Array<GetPictureForVendorSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPictureForVendor: async (companyId: string, vendorId: string, pictureId: string, $select?: Array<GetPictureForVendorSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPictureForVendor', 'companyId', companyId)
            // verify required parameter 'vendorId' is not null or undefined
            assertParamExists('getPictureForVendor', 'vendorId', vendorId)
            // verify required parameter 'pictureId' is not null or undefined
            assertParamExists('getPictureForVendor', 'pictureId', pictureId)
            const localVarPath = `/companies({company_id})/vendors({vendor_id})/picture({picture_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"vendor_id"}}`, encodeURIComponent(String(vendorId)))
                .replace(`{${"picture_id"}}`, encodeURIComponent(String(pictureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of picture
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPictureSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPicture: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPictureSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listPicture', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/picture`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of picture
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerId (v1.0) id for customer
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPictureForCustomerSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPictureForCustomer: async (companyId: string, customerId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPictureForCustomerSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listPictureForCustomer', 'companyId', companyId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('listPictureForCustomer', 'customerId', customerId)
            const localVarPath = `/companies({company_id})/customers({customer_id})/picture`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of picture
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPictureForEmployeeSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPictureForEmployee: async (companyId: string, employeeId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPictureForEmployeeSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listPictureForEmployee', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('listPictureForEmployee', 'employeeId', employeeId)
            const localVarPath = `/companies({company_id})/employees({employee_id})/picture`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of picture
         * @param {string} companyId (v1.0) id for company
         * @param {string} itemId (v1.0) id for item
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPictureForItemSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPictureForItem: async (companyId: string, itemId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPictureForItemSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listPictureForItem', 'companyId', companyId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('listPictureForItem', 'itemId', itemId)
            const localVarPath = `/companies({company_id})/items({item_id})/picture`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"item_id"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of picture
         * @param {string} companyId (v1.0) id for company
         * @param {string} vendorId (v1.0) id for vendor
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPictureForVendorSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPictureForVendor: async (companyId: string, vendorId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPictureForVendorSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listPictureForVendor', 'companyId', companyId)
            // verify required parameter 'vendorId' is not null or undefined
            assertParamExists('listPictureForVendor', 'vendorId', vendorId)
            const localVarPath = `/companies({company_id})/vendors({vendor_id})/picture`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"vendor_id"}}`, encodeURIComponent(String(vendorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type picture in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} pictureId (v1.0) id for picture
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PatchPictureForItemRequest} patchPictureForItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPicture: async (companyId: string, pictureId: string, contentType: string, ifMatch: string, patchPictureForItemRequest: PatchPictureForItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchPicture', 'companyId', companyId)
            // verify required parameter 'pictureId' is not null or undefined
            assertParamExists('patchPicture', 'pictureId', pictureId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchPicture', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchPicture', 'ifMatch', ifMatch)
            // verify required parameter 'patchPictureForItemRequest' is not null or undefined
            assertParamExists('patchPicture', 'patchPictureForItemRequest', patchPictureForItemRequest)
            const localVarPath = `/companies({company_id})/picture({picture_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"picture_id"}}`, encodeURIComponent(String(pictureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchPictureForItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type picture in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerId (v1.0) id for customer
         * @param {string} pictureId (v1.0) id for picture
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PatchPictureForItemRequest} patchPictureForItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPictureForCustomer: async (companyId: string, customerId: string, pictureId: string, contentType: string, ifMatch: string, patchPictureForItemRequest: PatchPictureForItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchPictureForCustomer', 'companyId', companyId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('patchPictureForCustomer', 'customerId', customerId)
            // verify required parameter 'pictureId' is not null or undefined
            assertParamExists('patchPictureForCustomer', 'pictureId', pictureId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchPictureForCustomer', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchPictureForCustomer', 'ifMatch', ifMatch)
            // verify required parameter 'patchPictureForItemRequest' is not null or undefined
            assertParamExists('patchPictureForCustomer', 'patchPictureForItemRequest', patchPictureForItemRequest)
            const localVarPath = `/companies({company_id})/customers({customer_id})/picture({picture_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"picture_id"}}`, encodeURIComponent(String(pictureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchPictureForItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type picture in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {string} pictureId (v1.0) id for picture
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PatchPictureForItemRequest} patchPictureForItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPictureForEmployee: async (companyId: string, employeeId: string, pictureId: string, contentType: string, ifMatch: string, patchPictureForItemRequest: PatchPictureForItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchPictureForEmployee', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('patchPictureForEmployee', 'employeeId', employeeId)
            // verify required parameter 'pictureId' is not null or undefined
            assertParamExists('patchPictureForEmployee', 'pictureId', pictureId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchPictureForEmployee', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchPictureForEmployee', 'ifMatch', ifMatch)
            // verify required parameter 'patchPictureForItemRequest' is not null or undefined
            assertParamExists('patchPictureForEmployee', 'patchPictureForItemRequest', patchPictureForItemRequest)
            const localVarPath = `/companies({company_id})/employees({employee_id})/picture({picture_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)))
                .replace(`{${"picture_id"}}`, encodeURIComponent(String(pictureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchPictureForItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type picture in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} itemId (v1.0) id for item
         * @param {string} pictureId (v1.0) id for picture
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PatchPictureForItemRequest} patchPictureForItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPictureForItem: async (companyId: string, itemId: string, pictureId: string, contentType: string, ifMatch: string, patchPictureForItemRequest: PatchPictureForItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchPictureForItem', 'companyId', companyId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('patchPictureForItem', 'itemId', itemId)
            // verify required parameter 'pictureId' is not null or undefined
            assertParamExists('patchPictureForItem', 'pictureId', pictureId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchPictureForItem', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchPictureForItem', 'ifMatch', ifMatch)
            // verify required parameter 'patchPictureForItemRequest' is not null or undefined
            assertParamExists('patchPictureForItem', 'patchPictureForItemRequest', patchPictureForItemRequest)
            const localVarPath = `/companies({company_id})/items({item_id})/picture({picture_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"item_id"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"picture_id"}}`, encodeURIComponent(String(pictureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchPictureForItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type picture in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} vendorId (v1.0) id for vendor
         * @param {string} pictureId (v1.0) id for picture
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PatchPictureForItemRequest} patchPictureForItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPictureForVendor: async (companyId: string, vendorId: string, pictureId: string, contentType: string, ifMatch: string, patchPictureForItemRequest: PatchPictureForItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchPictureForVendor', 'companyId', companyId)
            // verify required parameter 'vendorId' is not null or undefined
            assertParamExists('patchPictureForVendor', 'vendorId', vendorId)
            // verify required parameter 'pictureId' is not null or undefined
            assertParamExists('patchPictureForVendor', 'pictureId', pictureId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchPictureForVendor', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchPictureForVendor', 'ifMatch', ifMatch)
            // verify required parameter 'patchPictureForItemRequest' is not null or undefined
            assertParamExists('patchPictureForVendor', 'patchPictureForItemRequest', patchPictureForItemRequest)
            const localVarPath = `/companies({company_id})/vendors({vendor_id})/picture({picture_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"vendor_id"}}`, encodeURIComponent(String(vendorId)))
                .replace(`{${"picture_id"}}`, encodeURIComponent(String(pictureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchPictureForItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PictureApi - functional programming interface
 * @export
 */
export const PictureApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PictureApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type picture in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} pictureId (v1.0) id for picture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePicture(companyId: string, pictureId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePicture(companyId, pictureId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureApi.deletePicture']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes an object of type picture in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerId (v1.0) id for customer
         * @param {string} pictureId (v1.0) id for picture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePictureForCustomer(companyId: string, customerId: string, pictureId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePictureForCustomer(companyId, customerId, pictureId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureApi.deletePictureForCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes an object of type picture in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {string} pictureId (v1.0) id for picture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePictureForEmployee(companyId: string, employeeId: string, pictureId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePictureForEmployee(companyId, employeeId, pictureId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureApi.deletePictureForEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes an object of type picture in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} itemId (v1.0) id for item
         * @param {string} pictureId (v1.0) id for picture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePictureForItem(companyId: string, itemId: string, pictureId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePictureForItem(companyId, itemId, pictureId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureApi.deletePictureForItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes an object of type picture in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} vendorId (v1.0) id for vendor
         * @param {string} pictureId (v1.0) id for picture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePictureForVendor(companyId: string, vendorId: string, pictureId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePictureForVendor(companyId, vendorId, pictureId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureApi.deletePictureForVendor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type picture for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} pictureId (v1.0) id for picture
         * @param {Array<GetPictureSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPicture(companyId: string, pictureId: string, $select?: Array<GetPictureSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPicture(companyId, pictureId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureApi.getPicture']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type picture for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerId (v1.0) id for customer
         * @param {string} pictureId (v1.0) id for picture
         * @param {Array<GetPictureForCustomerSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPictureForCustomer(companyId: string, customerId: string, pictureId: string, $select?: Array<GetPictureForCustomerSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPictureForCustomer(companyId, customerId, pictureId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureApi.getPictureForCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type picture for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {string} pictureId (v1.0) id for picture
         * @param {Array<GetPictureForEmployeeSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPictureForEmployee(companyId: string, employeeId: string, pictureId: string, $select?: Array<GetPictureForEmployeeSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPictureForEmployee(companyId, employeeId, pictureId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureApi.getPictureForEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type picture for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} itemId (v1.0) id for item
         * @param {string} pictureId (v1.0) id for picture
         * @param {Array<GetPictureForItemSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPictureForItem(companyId: string, itemId: string, pictureId: string, $select?: Array<GetPictureForItemSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPictureForItem(companyId, itemId, pictureId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureApi.getPictureForItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type picture for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} vendorId (v1.0) id for vendor
         * @param {string} pictureId (v1.0) id for picture
         * @param {Array<GetPictureForVendorSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPictureForVendor(companyId: string, vendorId: string, pictureId: string, $select?: Array<GetPictureForVendorSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPictureForVendor(companyId, vendorId, pictureId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureApi.getPictureForVendor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of picture
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPictureSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPicture(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPictureSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPictureForItem200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPicture(companyId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureApi.listPicture']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of picture
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerId (v1.0) id for customer
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPictureForCustomerSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPictureForCustomer(companyId: string, customerId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPictureForCustomerSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPictureForItem200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPictureForCustomer(companyId, customerId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureApi.listPictureForCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of picture
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPictureForEmployeeSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPictureForEmployee(companyId: string, employeeId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPictureForEmployeeSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPictureForItem200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPictureForEmployee(companyId, employeeId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureApi.listPictureForEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of picture
         * @param {string} companyId (v1.0) id for company
         * @param {string} itemId (v1.0) id for item
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPictureForItemSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPictureForItem(companyId: string, itemId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPictureForItemSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPictureForItem200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPictureForItem(companyId, itemId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureApi.listPictureForItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of picture
         * @param {string} companyId (v1.0) id for company
         * @param {string} vendorId (v1.0) id for vendor
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPictureForVendorSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPictureForVendor(companyId: string, vendorId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPictureForVendorSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPictureForItem200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPictureForVendor(companyId, vendorId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureApi.listPictureForVendor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type picture in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} pictureId (v1.0) id for picture
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PatchPictureForItemRequest} patchPictureForItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPicture(companyId: string, pictureId: string, contentType: string, ifMatch: string, patchPictureForItemRequest: PatchPictureForItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPicture(companyId, pictureId, contentType, ifMatch, patchPictureForItemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureApi.patchPicture']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type picture in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerId (v1.0) id for customer
         * @param {string} pictureId (v1.0) id for picture
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PatchPictureForItemRequest} patchPictureForItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPictureForCustomer(companyId: string, customerId: string, pictureId: string, contentType: string, ifMatch: string, patchPictureForItemRequest: PatchPictureForItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPictureForCustomer(companyId, customerId, pictureId, contentType, ifMatch, patchPictureForItemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureApi.patchPictureForCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type picture in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {string} pictureId (v1.0) id for picture
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PatchPictureForItemRequest} patchPictureForItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPictureForEmployee(companyId: string, employeeId: string, pictureId: string, contentType: string, ifMatch: string, patchPictureForItemRequest: PatchPictureForItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPictureForEmployee(companyId, employeeId, pictureId, contentType, ifMatch, patchPictureForItemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureApi.patchPictureForEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type picture in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} itemId (v1.0) id for item
         * @param {string} pictureId (v1.0) id for picture
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PatchPictureForItemRequest} patchPictureForItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPictureForItem(companyId: string, itemId: string, pictureId: string, contentType: string, ifMatch: string, patchPictureForItemRequest: PatchPictureForItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPictureForItem(companyId, itemId, pictureId, contentType, ifMatch, patchPictureForItemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureApi.patchPictureForItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type picture in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} vendorId (v1.0) id for vendor
         * @param {string} pictureId (v1.0) id for picture
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PatchPictureForItemRequest} patchPictureForItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPictureForVendor(companyId: string, vendorId: string, pictureId: string, contentType: string, ifMatch: string, patchPictureForItemRequest: PatchPictureForItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Picture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPictureForVendor(companyId, vendorId, pictureId, contentType, ifMatch, patchPictureForItemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureApi.patchPictureForVendor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PictureApi - factory interface
 * @export
 */
export const PictureApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PictureApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type picture in Dynamics 365 Business Central
         * @param {PictureApiDeletePictureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePicture(requestParameters: PictureApiDeletePictureRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePicture(requestParameters.companyId, requestParameters.pictureId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an object of type picture in Dynamics 365 Business Central
         * @param {PictureApiDeletePictureForCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePictureForCustomer(requestParameters: PictureApiDeletePictureForCustomerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePictureForCustomer(requestParameters.companyId, requestParameters.customerId, requestParameters.pictureId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an object of type picture in Dynamics 365 Business Central
         * @param {PictureApiDeletePictureForEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePictureForEmployee(requestParameters: PictureApiDeletePictureForEmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePictureForEmployee(requestParameters.companyId, requestParameters.employeeId, requestParameters.pictureId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an object of type picture in Dynamics 365 Business Central
         * @param {PictureApiDeletePictureForItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePictureForItem(requestParameters: PictureApiDeletePictureForItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePictureForItem(requestParameters.companyId, requestParameters.itemId, requestParameters.pictureId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an object of type picture in Dynamics 365 Business Central
         * @param {PictureApiDeletePictureForVendorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePictureForVendor(requestParameters: PictureApiDeletePictureForVendorRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePictureForVendor(requestParameters.companyId, requestParameters.vendorId, requestParameters.pictureId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type picture for Dynamics 365 Business Central.
         * @param {PictureApiGetPictureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPicture(requestParameters: PictureApiGetPictureRequest, options?: RawAxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.getPicture(requestParameters.companyId, requestParameters.pictureId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type picture for Dynamics 365 Business Central.
         * @param {PictureApiGetPictureForCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPictureForCustomer(requestParameters: PictureApiGetPictureForCustomerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.getPictureForCustomer(requestParameters.companyId, requestParameters.customerId, requestParameters.pictureId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type picture for Dynamics 365 Business Central.
         * @param {PictureApiGetPictureForEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPictureForEmployee(requestParameters: PictureApiGetPictureForEmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.getPictureForEmployee(requestParameters.companyId, requestParameters.employeeId, requestParameters.pictureId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type picture for Dynamics 365 Business Central.
         * @param {PictureApiGetPictureForItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPictureForItem(requestParameters: PictureApiGetPictureForItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.getPictureForItem(requestParameters.companyId, requestParameters.itemId, requestParameters.pictureId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type picture for Dynamics 365 Business Central.
         * @param {PictureApiGetPictureForVendorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPictureForVendor(requestParameters: PictureApiGetPictureForVendorRequest, options?: RawAxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.getPictureForVendor(requestParameters.companyId, requestParameters.vendorId, requestParameters.pictureId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of picture
         * @param {PictureApiListPictureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPicture(requestParameters: PictureApiListPictureRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPictureForItem200Response> {
            return localVarFp.listPicture(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of picture
         * @param {PictureApiListPictureForCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPictureForCustomer(requestParameters: PictureApiListPictureForCustomerRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPictureForItem200Response> {
            return localVarFp.listPictureForCustomer(requestParameters.companyId, requestParameters.customerId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of picture
         * @param {PictureApiListPictureForEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPictureForEmployee(requestParameters: PictureApiListPictureForEmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPictureForItem200Response> {
            return localVarFp.listPictureForEmployee(requestParameters.companyId, requestParameters.employeeId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of picture
         * @param {PictureApiListPictureForItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPictureForItem(requestParameters: PictureApiListPictureForItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPictureForItem200Response> {
            return localVarFp.listPictureForItem(requestParameters.companyId, requestParameters.itemId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of picture
         * @param {PictureApiListPictureForVendorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPictureForVendor(requestParameters: PictureApiListPictureForVendorRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPictureForItem200Response> {
            return localVarFp.listPictureForVendor(requestParameters.companyId, requestParameters.vendorId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type picture in Dynamics 365 Business Central
         * @param {PictureApiPatchPictureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPicture(requestParameters: PictureApiPatchPictureRequest, options?: RawAxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.patchPicture(requestParameters.companyId, requestParameters.pictureId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.patchPictureForItemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type picture in Dynamics 365 Business Central
         * @param {PictureApiPatchPictureForCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPictureForCustomer(requestParameters: PictureApiPatchPictureForCustomerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.patchPictureForCustomer(requestParameters.companyId, requestParameters.customerId, requestParameters.pictureId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.patchPictureForItemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type picture in Dynamics 365 Business Central
         * @param {PictureApiPatchPictureForEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPictureForEmployee(requestParameters: PictureApiPatchPictureForEmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.patchPictureForEmployee(requestParameters.companyId, requestParameters.employeeId, requestParameters.pictureId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.patchPictureForItemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type picture in Dynamics 365 Business Central
         * @param {PictureApiPatchPictureForItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPictureForItem(requestParameters: PictureApiPatchPictureForItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.patchPictureForItem(requestParameters.companyId, requestParameters.itemId, requestParameters.pictureId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.patchPictureForItemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type picture in Dynamics 365 Business Central
         * @param {PictureApiPatchPictureForVendorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPictureForVendor(requestParameters: PictureApiPatchPictureForVendorRequest, options?: RawAxiosRequestConfig): AxiosPromise<Picture> {
            return localVarFp.patchPictureForVendor(requestParameters.companyId, requestParameters.vendorId, requestParameters.pictureId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.patchPictureForItemRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deletePicture operation in PictureApi.
 * @export
 * @interface PictureApiDeletePictureRequest
 */
export interface PictureApiDeletePictureRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PictureApiDeletePicture
     */
    readonly companyId: string

    /**
     * (v1.0) id for picture
     * @type {string}
     * @memberof PictureApiDeletePicture
     */
    readonly pictureId: string
}

/**
 * Request parameters for deletePictureForCustomer operation in PictureApi.
 * @export
 * @interface PictureApiDeletePictureForCustomerRequest
 */
export interface PictureApiDeletePictureForCustomerRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PictureApiDeletePictureForCustomer
     */
    readonly companyId: string

    /**
     * (v1.0) id for customer
     * @type {string}
     * @memberof PictureApiDeletePictureForCustomer
     */
    readonly customerId: string

    /**
     * (v1.0) id for picture
     * @type {string}
     * @memberof PictureApiDeletePictureForCustomer
     */
    readonly pictureId: string
}

/**
 * Request parameters for deletePictureForEmployee operation in PictureApi.
 * @export
 * @interface PictureApiDeletePictureForEmployeeRequest
 */
export interface PictureApiDeletePictureForEmployeeRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PictureApiDeletePictureForEmployee
     */
    readonly companyId: string

    /**
     * (v1.0) id for employee
     * @type {string}
     * @memberof PictureApiDeletePictureForEmployee
     */
    readonly employeeId: string

    /**
     * (v1.0) id for picture
     * @type {string}
     * @memberof PictureApiDeletePictureForEmployee
     */
    readonly pictureId: string
}

/**
 * Request parameters for deletePictureForItem operation in PictureApi.
 * @export
 * @interface PictureApiDeletePictureForItemRequest
 */
export interface PictureApiDeletePictureForItemRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PictureApiDeletePictureForItem
     */
    readonly companyId: string

    /**
     * (v1.0) id for item
     * @type {string}
     * @memberof PictureApiDeletePictureForItem
     */
    readonly itemId: string

    /**
     * (v1.0) id for picture
     * @type {string}
     * @memberof PictureApiDeletePictureForItem
     */
    readonly pictureId: string
}

/**
 * Request parameters for deletePictureForVendor operation in PictureApi.
 * @export
 * @interface PictureApiDeletePictureForVendorRequest
 */
export interface PictureApiDeletePictureForVendorRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PictureApiDeletePictureForVendor
     */
    readonly companyId: string

    /**
     * (v1.0) id for vendor
     * @type {string}
     * @memberof PictureApiDeletePictureForVendor
     */
    readonly vendorId: string

    /**
     * (v1.0) id for picture
     * @type {string}
     * @memberof PictureApiDeletePictureForVendor
     */
    readonly pictureId: string
}

/**
 * Request parameters for getPicture operation in PictureApi.
 * @export
 * @interface PictureApiGetPictureRequest
 */
export interface PictureApiGetPictureRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PictureApiGetPicture
     */
    readonly companyId: string

    /**
     * (v1.0) id for picture
     * @type {string}
     * @memberof PictureApiGetPicture
     */
    readonly pictureId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'width' | 'height' | 'contentType' | 'content'>}
     * @memberof PictureApiGetPicture
     */
    readonly $select?: Array<GetPictureSelectEnum>
}

/**
 * Request parameters for getPictureForCustomer operation in PictureApi.
 * @export
 * @interface PictureApiGetPictureForCustomerRequest
 */
export interface PictureApiGetPictureForCustomerRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PictureApiGetPictureForCustomer
     */
    readonly companyId: string

    /**
     * (v1.0) id for customer
     * @type {string}
     * @memberof PictureApiGetPictureForCustomer
     */
    readonly customerId: string

    /**
     * (v1.0) id for picture
     * @type {string}
     * @memberof PictureApiGetPictureForCustomer
     */
    readonly pictureId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'width' | 'height' | 'contentType' | 'content'>}
     * @memberof PictureApiGetPictureForCustomer
     */
    readonly $select?: Array<GetPictureForCustomerSelectEnum>
}

/**
 * Request parameters for getPictureForEmployee operation in PictureApi.
 * @export
 * @interface PictureApiGetPictureForEmployeeRequest
 */
export interface PictureApiGetPictureForEmployeeRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PictureApiGetPictureForEmployee
     */
    readonly companyId: string

    /**
     * (v1.0) id for employee
     * @type {string}
     * @memberof PictureApiGetPictureForEmployee
     */
    readonly employeeId: string

    /**
     * (v1.0) id for picture
     * @type {string}
     * @memberof PictureApiGetPictureForEmployee
     */
    readonly pictureId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'width' | 'height' | 'contentType' | 'content'>}
     * @memberof PictureApiGetPictureForEmployee
     */
    readonly $select?: Array<GetPictureForEmployeeSelectEnum>
}

/**
 * Request parameters for getPictureForItem operation in PictureApi.
 * @export
 * @interface PictureApiGetPictureForItemRequest
 */
export interface PictureApiGetPictureForItemRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PictureApiGetPictureForItem
     */
    readonly companyId: string

    /**
     * (v1.0) id for item
     * @type {string}
     * @memberof PictureApiGetPictureForItem
     */
    readonly itemId: string

    /**
     * (v1.0) id for picture
     * @type {string}
     * @memberof PictureApiGetPictureForItem
     */
    readonly pictureId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'width' | 'height' | 'contentType' | 'content'>}
     * @memberof PictureApiGetPictureForItem
     */
    readonly $select?: Array<GetPictureForItemSelectEnum>
}

/**
 * Request parameters for getPictureForVendor operation in PictureApi.
 * @export
 * @interface PictureApiGetPictureForVendorRequest
 */
export interface PictureApiGetPictureForVendorRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PictureApiGetPictureForVendor
     */
    readonly companyId: string

    /**
     * (v1.0) id for vendor
     * @type {string}
     * @memberof PictureApiGetPictureForVendor
     */
    readonly vendorId: string

    /**
     * (v1.0) id for picture
     * @type {string}
     * @memberof PictureApiGetPictureForVendor
     */
    readonly pictureId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'width' | 'height' | 'contentType' | 'content'>}
     * @memberof PictureApiGetPictureForVendor
     */
    readonly $select?: Array<GetPictureForVendorSelectEnum>
}

/**
 * Request parameters for listPicture operation in PictureApi.
 * @export
 * @interface PictureApiListPictureRequest
 */
export interface PictureApiListPictureRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PictureApiListPicture
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof PictureApiListPicture
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof PictureApiListPicture
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof PictureApiListPicture
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof PictureApiListPicture
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'width' | 'height' | 'contentType' | 'content'>}
     * @memberof PictureApiListPicture
     */
    readonly $select?: Array<ListPictureSelectEnum>
}

/**
 * Request parameters for listPictureForCustomer operation in PictureApi.
 * @export
 * @interface PictureApiListPictureForCustomerRequest
 */
export interface PictureApiListPictureForCustomerRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PictureApiListPictureForCustomer
     */
    readonly companyId: string

    /**
     * (v1.0) id for customer
     * @type {string}
     * @memberof PictureApiListPictureForCustomer
     */
    readonly customerId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof PictureApiListPictureForCustomer
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof PictureApiListPictureForCustomer
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof PictureApiListPictureForCustomer
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof PictureApiListPictureForCustomer
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'width' | 'height' | 'contentType' | 'content'>}
     * @memberof PictureApiListPictureForCustomer
     */
    readonly $select?: Array<ListPictureForCustomerSelectEnum>
}

/**
 * Request parameters for listPictureForEmployee operation in PictureApi.
 * @export
 * @interface PictureApiListPictureForEmployeeRequest
 */
export interface PictureApiListPictureForEmployeeRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PictureApiListPictureForEmployee
     */
    readonly companyId: string

    /**
     * (v1.0) id for employee
     * @type {string}
     * @memberof PictureApiListPictureForEmployee
     */
    readonly employeeId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof PictureApiListPictureForEmployee
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof PictureApiListPictureForEmployee
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof PictureApiListPictureForEmployee
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof PictureApiListPictureForEmployee
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'width' | 'height' | 'contentType' | 'content'>}
     * @memberof PictureApiListPictureForEmployee
     */
    readonly $select?: Array<ListPictureForEmployeeSelectEnum>
}

/**
 * Request parameters for listPictureForItem operation in PictureApi.
 * @export
 * @interface PictureApiListPictureForItemRequest
 */
export interface PictureApiListPictureForItemRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PictureApiListPictureForItem
     */
    readonly companyId: string

    /**
     * (v1.0) id for item
     * @type {string}
     * @memberof PictureApiListPictureForItem
     */
    readonly itemId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof PictureApiListPictureForItem
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof PictureApiListPictureForItem
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof PictureApiListPictureForItem
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof PictureApiListPictureForItem
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'width' | 'height' | 'contentType' | 'content'>}
     * @memberof PictureApiListPictureForItem
     */
    readonly $select?: Array<ListPictureForItemSelectEnum>
}

/**
 * Request parameters for listPictureForVendor operation in PictureApi.
 * @export
 * @interface PictureApiListPictureForVendorRequest
 */
export interface PictureApiListPictureForVendorRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PictureApiListPictureForVendor
     */
    readonly companyId: string

    /**
     * (v1.0) id for vendor
     * @type {string}
     * @memberof PictureApiListPictureForVendor
     */
    readonly vendorId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof PictureApiListPictureForVendor
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof PictureApiListPictureForVendor
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof PictureApiListPictureForVendor
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof PictureApiListPictureForVendor
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'width' | 'height' | 'contentType' | 'content'>}
     * @memberof PictureApiListPictureForVendor
     */
    readonly $select?: Array<ListPictureForVendorSelectEnum>
}

/**
 * Request parameters for patchPicture operation in PictureApi.
 * @export
 * @interface PictureApiPatchPictureRequest
 */
export interface PictureApiPatchPictureRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PictureApiPatchPicture
     */
    readonly companyId: string

    /**
     * (v1.0) id for picture
     * @type {string}
     * @memberof PictureApiPatchPicture
     */
    readonly pictureId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof PictureApiPatchPicture
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof PictureApiPatchPicture
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PatchPictureForItemRequest}
     * @memberof PictureApiPatchPicture
     */
    readonly patchPictureForItemRequest: PatchPictureForItemRequest
}

/**
 * Request parameters for patchPictureForCustomer operation in PictureApi.
 * @export
 * @interface PictureApiPatchPictureForCustomerRequest
 */
export interface PictureApiPatchPictureForCustomerRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PictureApiPatchPictureForCustomer
     */
    readonly companyId: string

    /**
     * (v1.0) id for customer
     * @type {string}
     * @memberof PictureApiPatchPictureForCustomer
     */
    readonly customerId: string

    /**
     * (v1.0) id for picture
     * @type {string}
     * @memberof PictureApiPatchPictureForCustomer
     */
    readonly pictureId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof PictureApiPatchPictureForCustomer
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof PictureApiPatchPictureForCustomer
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PatchPictureForItemRequest}
     * @memberof PictureApiPatchPictureForCustomer
     */
    readonly patchPictureForItemRequest: PatchPictureForItemRequest
}

/**
 * Request parameters for patchPictureForEmployee operation in PictureApi.
 * @export
 * @interface PictureApiPatchPictureForEmployeeRequest
 */
export interface PictureApiPatchPictureForEmployeeRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PictureApiPatchPictureForEmployee
     */
    readonly companyId: string

    /**
     * (v1.0) id for employee
     * @type {string}
     * @memberof PictureApiPatchPictureForEmployee
     */
    readonly employeeId: string

    /**
     * (v1.0) id for picture
     * @type {string}
     * @memberof PictureApiPatchPictureForEmployee
     */
    readonly pictureId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof PictureApiPatchPictureForEmployee
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof PictureApiPatchPictureForEmployee
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PatchPictureForItemRequest}
     * @memberof PictureApiPatchPictureForEmployee
     */
    readonly patchPictureForItemRequest: PatchPictureForItemRequest
}

/**
 * Request parameters for patchPictureForItem operation in PictureApi.
 * @export
 * @interface PictureApiPatchPictureForItemRequest
 */
export interface PictureApiPatchPictureForItemRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PictureApiPatchPictureForItem
     */
    readonly companyId: string

    /**
     * (v1.0) id for item
     * @type {string}
     * @memberof PictureApiPatchPictureForItem
     */
    readonly itemId: string

    /**
     * (v1.0) id for picture
     * @type {string}
     * @memberof PictureApiPatchPictureForItem
     */
    readonly pictureId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof PictureApiPatchPictureForItem
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof PictureApiPatchPictureForItem
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PatchPictureForItemRequest}
     * @memberof PictureApiPatchPictureForItem
     */
    readonly patchPictureForItemRequest: PatchPictureForItemRequest
}

/**
 * Request parameters for patchPictureForVendor operation in PictureApi.
 * @export
 * @interface PictureApiPatchPictureForVendorRequest
 */
export interface PictureApiPatchPictureForVendorRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PictureApiPatchPictureForVendor
     */
    readonly companyId: string

    /**
     * (v1.0) id for vendor
     * @type {string}
     * @memberof PictureApiPatchPictureForVendor
     */
    readonly vendorId: string

    /**
     * (v1.0) id for picture
     * @type {string}
     * @memberof PictureApiPatchPictureForVendor
     */
    readonly pictureId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof PictureApiPatchPictureForVendor
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof PictureApiPatchPictureForVendor
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PatchPictureForItemRequest}
     * @memberof PictureApiPatchPictureForVendor
     */
    readonly patchPictureForItemRequest: PatchPictureForItemRequest
}

/**
 * PictureApi - object-oriented interface
 * @export
 * @class PictureApi
 * @extends {BaseAPI}
 */
export class PictureApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type picture in Dynamics 365 Business Central
     * @param {PictureApiDeletePictureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureApi
     */
    public deletePicture(requestParameters: PictureApiDeletePictureRequest, options?: RawAxiosRequestConfig) {
        return PictureApiFp(this.configuration).deletePicture(requestParameters.companyId, requestParameters.pictureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an object of type picture in Dynamics 365 Business Central
     * @param {PictureApiDeletePictureForCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureApi
     */
    public deletePictureForCustomer(requestParameters: PictureApiDeletePictureForCustomerRequest, options?: RawAxiosRequestConfig) {
        return PictureApiFp(this.configuration).deletePictureForCustomer(requestParameters.companyId, requestParameters.customerId, requestParameters.pictureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an object of type picture in Dynamics 365 Business Central
     * @param {PictureApiDeletePictureForEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureApi
     */
    public deletePictureForEmployee(requestParameters: PictureApiDeletePictureForEmployeeRequest, options?: RawAxiosRequestConfig) {
        return PictureApiFp(this.configuration).deletePictureForEmployee(requestParameters.companyId, requestParameters.employeeId, requestParameters.pictureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an object of type picture in Dynamics 365 Business Central
     * @param {PictureApiDeletePictureForItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureApi
     */
    public deletePictureForItem(requestParameters: PictureApiDeletePictureForItemRequest, options?: RawAxiosRequestConfig) {
        return PictureApiFp(this.configuration).deletePictureForItem(requestParameters.companyId, requestParameters.itemId, requestParameters.pictureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an object of type picture in Dynamics 365 Business Central
     * @param {PictureApiDeletePictureForVendorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureApi
     */
    public deletePictureForVendor(requestParameters: PictureApiDeletePictureForVendorRequest, options?: RawAxiosRequestConfig) {
        return PictureApiFp(this.configuration).deletePictureForVendor(requestParameters.companyId, requestParameters.vendorId, requestParameters.pictureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type picture for Dynamics 365 Business Central.
     * @param {PictureApiGetPictureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureApi
     */
    public getPicture(requestParameters: PictureApiGetPictureRequest, options?: RawAxiosRequestConfig) {
        return PictureApiFp(this.configuration).getPicture(requestParameters.companyId, requestParameters.pictureId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type picture for Dynamics 365 Business Central.
     * @param {PictureApiGetPictureForCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureApi
     */
    public getPictureForCustomer(requestParameters: PictureApiGetPictureForCustomerRequest, options?: RawAxiosRequestConfig) {
        return PictureApiFp(this.configuration).getPictureForCustomer(requestParameters.companyId, requestParameters.customerId, requestParameters.pictureId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type picture for Dynamics 365 Business Central.
     * @param {PictureApiGetPictureForEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureApi
     */
    public getPictureForEmployee(requestParameters: PictureApiGetPictureForEmployeeRequest, options?: RawAxiosRequestConfig) {
        return PictureApiFp(this.configuration).getPictureForEmployee(requestParameters.companyId, requestParameters.employeeId, requestParameters.pictureId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type picture for Dynamics 365 Business Central.
     * @param {PictureApiGetPictureForItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureApi
     */
    public getPictureForItem(requestParameters: PictureApiGetPictureForItemRequest, options?: RawAxiosRequestConfig) {
        return PictureApiFp(this.configuration).getPictureForItem(requestParameters.companyId, requestParameters.itemId, requestParameters.pictureId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type picture for Dynamics 365 Business Central.
     * @param {PictureApiGetPictureForVendorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureApi
     */
    public getPictureForVendor(requestParameters: PictureApiGetPictureForVendorRequest, options?: RawAxiosRequestConfig) {
        return PictureApiFp(this.configuration).getPictureForVendor(requestParameters.companyId, requestParameters.vendorId, requestParameters.pictureId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of picture
     * @param {PictureApiListPictureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureApi
     */
    public listPicture(requestParameters: PictureApiListPictureRequest, options?: RawAxiosRequestConfig) {
        return PictureApiFp(this.configuration).listPicture(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of picture
     * @param {PictureApiListPictureForCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureApi
     */
    public listPictureForCustomer(requestParameters: PictureApiListPictureForCustomerRequest, options?: RawAxiosRequestConfig) {
        return PictureApiFp(this.configuration).listPictureForCustomer(requestParameters.companyId, requestParameters.customerId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of picture
     * @param {PictureApiListPictureForEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureApi
     */
    public listPictureForEmployee(requestParameters: PictureApiListPictureForEmployeeRequest, options?: RawAxiosRequestConfig) {
        return PictureApiFp(this.configuration).listPictureForEmployee(requestParameters.companyId, requestParameters.employeeId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of picture
     * @param {PictureApiListPictureForItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureApi
     */
    public listPictureForItem(requestParameters: PictureApiListPictureForItemRequest, options?: RawAxiosRequestConfig) {
        return PictureApiFp(this.configuration).listPictureForItem(requestParameters.companyId, requestParameters.itemId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of picture
     * @param {PictureApiListPictureForVendorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureApi
     */
    public listPictureForVendor(requestParameters: PictureApiListPictureForVendorRequest, options?: RawAxiosRequestConfig) {
        return PictureApiFp(this.configuration).listPictureForVendor(requestParameters.companyId, requestParameters.vendorId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type picture in Dynamics 365 Business Central
     * @param {PictureApiPatchPictureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureApi
     */
    public patchPicture(requestParameters: PictureApiPatchPictureRequest, options?: RawAxiosRequestConfig) {
        return PictureApiFp(this.configuration).patchPicture(requestParameters.companyId, requestParameters.pictureId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.patchPictureForItemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type picture in Dynamics 365 Business Central
     * @param {PictureApiPatchPictureForCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureApi
     */
    public patchPictureForCustomer(requestParameters: PictureApiPatchPictureForCustomerRequest, options?: RawAxiosRequestConfig) {
        return PictureApiFp(this.configuration).patchPictureForCustomer(requestParameters.companyId, requestParameters.customerId, requestParameters.pictureId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.patchPictureForItemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type picture in Dynamics 365 Business Central
     * @param {PictureApiPatchPictureForEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureApi
     */
    public patchPictureForEmployee(requestParameters: PictureApiPatchPictureForEmployeeRequest, options?: RawAxiosRequestConfig) {
        return PictureApiFp(this.configuration).patchPictureForEmployee(requestParameters.companyId, requestParameters.employeeId, requestParameters.pictureId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.patchPictureForItemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type picture in Dynamics 365 Business Central
     * @param {PictureApiPatchPictureForItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureApi
     */
    public patchPictureForItem(requestParameters: PictureApiPatchPictureForItemRequest, options?: RawAxiosRequestConfig) {
        return PictureApiFp(this.configuration).patchPictureForItem(requestParameters.companyId, requestParameters.itemId, requestParameters.pictureId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.patchPictureForItemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type picture in Dynamics 365 Business Central
     * @param {PictureApiPatchPictureForVendorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureApi
     */
    public patchPictureForVendor(requestParameters: PictureApiPatchPictureForVendorRequest, options?: RawAxiosRequestConfig) {
        return PictureApiFp(this.configuration).patchPictureForVendor(requestParameters.companyId, requestParameters.vendorId, requestParameters.pictureId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.patchPictureForItemRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetPictureSelectEnum = {
    Id: 'id',
    Width: 'width',
    Height: 'height',
    ContentType: 'contentType',
    Content: 'content'
} as const;
export type GetPictureSelectEnum = typeof GetPictureSelectEnum[keyof typeof GetPictureSelectEnum];
/**
 * @export
 */
export const GetPictureForCustomerSelectEnum = {
    Id: 'id',
    Width: 'width',
    Height: 'height',
    ContentType: 'contentType',
    Content: 'content'
} as const;
export type GetPictureForCustomerSelectEnum = typeof GetPictureForCustomerSelectEnum[keyof typeof GetPictureForCustomerSelectEnum];
/**
 * @export
 */
export const GetPictureForEmployeeSelectEnum = {
    Id: 'id',
    Width: 'width',
    Height: 'height',
    ContentType: 'contentType',
    Content: 'content'
} as const;
export type GetPictureForEmployeeSelectEnum = typeof GetPictureForEmployeeSelectEnum[keyof typeof GetPictureForEmployeeSelectEnum];
/**
 * @export
 */
export const GetPictureForItemSelectEnum = {
    Id: 'id',
    Width: 'width',
    Height: 'height',
    ContentType: 'contentType',
    Content: 'content'
} as const;
export type GetPictureForItemSelectEnum = typeof GetPictureForItemSelectEnum[keyof typeof GetPictureForItemSelectEnum];
/**
 * @export
 */
export const GetPictureForVendorSelectEnum = {
    Id: 'id',
    Width: 'width',
    Height: 'height',
    ContentType: 'contentType',
    Content: 'content'
} as const;
export type GetPictureForVendorSelectEnum = typeof GetPictureForVendorSelectEnum[keyof typeof GetPictureForVendorSelectEnum];
/**
 * @export
 */
export const ListPictureSelectEnum = {
    Id: 'id',
    Width: 'width',
    Height: 'height',
    ContentType: 'contentType',
    Content: 'content'
} as const;
export type ListPictureSelectEnum = typeof ListPictureSelectEnum[keyof typeof ListPictureSelectEnum];
/**
 * @export
 */
export const ListPictureForCustomerSelectEnum = {
    Id: 'id',
    Width: 'width',
    Height: 'height',
    ContentType: 'contentType',
    Content: 'content'
} as const;
export type ListPictureForCustomerSelectEnum = typeof ListPictureForCustomerSelectEnum[keyof typeof ListPictureForCustomerSelectEnum];
/**
 * @export
 */
export const ListPictureForEmployeeSelectEnum = {
    Id: 'id',
    Width: 'width',
    Height: 'height',
    ContentType: 'contentType',
    Content: 'content'
} as const;
export type ListPictureForEmployeeSelectEnum = typeof ListPictureForEmployeeSelectEnum[keyof typeof ListPictureForEmployeeSelectEnum];
/**
 * @export
 */
export const ListPictureForItemSelectEnum = {
    Id: 'id',
    Width: 'width',
    Height: 'height',
    ContentType: 'contentType',
    Content: 'content'
} as const;
export type ListPictureForItemSelectEnum = typeof ListPictureForItemSelectEnum[keyof typeof ListPictureForItemSelectEnum];
/**
 * @export
 */
export const ListPictureForVendorSelectEnum = {
    Id: 'id',
    Width: 'width',
    Height: 'height',
    ContentType: 'contentType',
    Content: 'content'
} as const;
export type ListPictureForVendorSelectEnum = typeof ListPictureForVendorSelectEnum[keyof typeof ListPictureForVendorSelectEnum];
