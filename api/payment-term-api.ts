/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ListPaymentTerms200Response } from '../model';
// @ts-ignore
import type { PaymentTerm } from '../model';
// @ts-ignore
import type { PostPaymentTermRequest } from '../model';
/**
 * PaymentTermApi - axios parameter creator
 * @export
 */
export const PaymentTermApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type paymentTerm in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} paymentTermId (v1.0) id for paymentTerm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePaymentTerm: async (companyId: string, paymentTermId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deletePaymentTerm', 'companyId', companyId)
            // verify required parameter 'paymentTermId' is not null or undefined
            assertParamExists('deletePaymentTerm', 'paymentTermId', paymentTermId)
            const localVarPath = `/companies({company_id})/paymentTerms({paymentTerm_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"paymentTerm_id"}}`, encodeURIComponent(String(paymentTermId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type paymentTerm for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} paymentTermId (v1.0) id for paymentTerm
         * @param {Array<GetPaymentTermSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentTerm: async (companyId: string, paymentTermId: string, $select?: Array<GetPaymentTermSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPaymentTerm', 'companyId', companyId)
            // verify required parameter 'paymentTermId' is not null or undefined
            assertParamExists('getPaymentTerm', 'paymentTermId', paymentTermId)
            const localVarPath = `/companies({company_id})/paymentTerms({paymentTerm_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"paymentTerm_id"}}`, encodeURIComponent(String(paymentTermId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of paymentTerms
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPaymentTermsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaymentTerms: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPaymentTermsSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listPaymentTerms', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/paymentTerms`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type paymentTerm in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} paymentTermId (v1.0) id for paymentTerm
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostPaymentTermRequest} postPaymentTermRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPaymentTerm: async (companyId: string, paymentTermId: string, contentType: string, ifMatch: string, postPaymentTermRequest: PostPaymentTermRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchPaymentTerm', 'companyId', companyId)
            // verify required parameter 'paymentTermId' is not null or undefined
            assertParamExists('patchPaymentTerm', 'paymentTermId', paymentTermId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchPaymentTerm', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchPaymentTerm', 'ifMatch', ifMatch)
            // verify required parameter 'postPaymentTermRequest' is not null or undefined
            assertParamExists('patchPaymentTerm', 'postPaymentTermRequest', postPaymentTermRequest)
            const localVarPath = `/companies({company_id})/paymentTerms({paymentTerm_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"paymentTerm_id"}}`, encodeURIComponent(String(paymentTermId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postPaymentTermRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type paymentTerm in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostPaymentTermRequest} postPaymentTermRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaymentTerm: async (companyId: string, contentType: string, postPaymentTermRequest: PostPaymentTermRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postPaymentTerm', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postPaymentTerm', 'contentType', contentType)
            // verify required parameter 'postPaymentTermRequest' is not null or undefined
            assertParamExists('postPaymentTerm', 'postPaymentTermRequest', postPaymentTermRequest)
            const localVarPath = `/companies({company_id})/paymentTerms`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postPaymentTermRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentTermApi - functional programming interface
 * @export
 */
export const PaymentTermApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentTermApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type paymentTerm in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} paymentTermId (v1.0) id for paymentTerm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePaymentTerm(companyId: string, paymentTermId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePaymentTerm(companyId, paymentTermId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentTermApi.deletePaymentTerm']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type paymentTerm for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} paymentTermId (v1.0) id for paymentTerm
         * @param {Array<GetPaymentTermSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentTerm(companyId: string, paymentTermId: string, $select?: Array<GetPaymentTermSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentTerm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaymentTerm(companyId, paymentTermId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentTermApi.getPaymentTerm']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of paymentTerms
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPaymentTermsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPaymentTerms(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPaymentTermsSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPaymentTerms200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPaymentTerms(companyId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentTermApi.listPaymentTerms']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type paymentTerm in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} paymentTermId (v1.0) id for paymentTerm
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostPaymentTermRequest} postPaymentTermRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPaymentTerm(companyId: string, paymentTermId: string, contentType: string, ifMatch: string, postPaymentTermRequest: PostPaymentTermRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentTerm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPaymentTerm(companyId, paymentTermId, contentType, ifMatch, postPaymentTermRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentTermApi.patchPaymentTerm']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type paymentTerm in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostPaymentTermRequest} postPaymentTermRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPaymentTerm(companyId: string, contentType: string, postPaymentTermRequest: PostPaymentTermRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentTerm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPaymentTerm(companyId, contentType, postPaymentTermRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentTermApi.postPaymentTerm']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PaymentTermApi - factory interface
 * @export
 */
export const PaymentTermApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentTermApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type paymentTerm in Dynamics 365 Business Central
         * @param {PaymentTermApiDeletePaymentTermRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePaymentTerm(requestParameters: PaymentTermApiDeletePaymentTermRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePaymentTerm(requestParameters.companyId, requestParameters.paymentTermId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type paymentTerm for Dynamics 365 Business Central.
         * @param {PaymentTermApiGetPaymentTermRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentTerm(requestParameters: PaymentTermApiGetPaymentTermRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaymentTerm> {
            return localVarFp.getPaymentTerm(requestParameters.companyId, requestParameters.paymentTermId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of paymentTerms
         * @param {PaymentTermApiListPaymentTermsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaymentTerms(requestParameters: PaymentTermApiListPaymentTermsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPaymentTerms200Response> {
            return localVarFp.listPaymentTerms(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type paymentTerm in Dynamics 365 Business Central
         * @param {PaymentTermApiPatchPaymentTermRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPaymentTerm(requestParameters: PaymentTermApiPatchPaymentTermRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaymentTerm> {
            return localVarFp.patchPaymentTerm(requestParameters.companyId, requestParameters.paymentTermId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postPaymentTermRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type paymentTerm in Dynamics 365 Business Central
         * @param {PaymentTermApiPostPaymentTermRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaymentTerm(requestParameters: PaymentTermApiPostPaymentTermRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaymentTerm> {
            return localVarFp.postPaymentTerm(requestParameters.companyId, requestParameters.contentType, requestParameters.postPaymentTermRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deletePaymentTerm operation in PaymentTermApi.
 * @export
 * @interface PaymentTermApiDeletePaymentTermRequest
 */
export interface PaymentTermApiDeletePaymentTermRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PaymentTermApiDeletePaymentTerm
     */
    readonly companyId: string

    /**
     * (v1.0) id for paymentTerm
     * @type {string}
     * @memberof PaymentTermApiDeletePaymentTerm
     */
    readonly paymentTermId: string
}

/**
 * Request parameters for getPaymentTerm operation in PaymentTermApi.
 * @export
 * @interface PaymentTermApiGetPaymentTermRequest
 */
export interface PaymentTermApiGetPaymentTermRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PaymentTermApiGetPaymentTerm
     */
    readonly companyId: string

    /**
     * (v1.0) id for paymentTerm
     * @type {string}
     * @memberof PaymentTermApiGetPaymentTerm
     */
    readonly paymentTermId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'code' | 'displayName' | 'dueDateCalculation' | 'discountDateCalculation' | 'discountPercent' | 'calculateDiscountOnCreditMemos' | 'lastModifiedDateTime'>}
     * @memberof PaymentTermApiGetPaymentTerm
     */
    readonly $select?: Array<GetPaymentTermSelectEnum>
}

/**
 * Request parameters for listPaymentTerms operation in PaymentTermApi.
 * @export
 * @interface PaymentTermApiListPaymentTermsRequest
 */
export interface PaymentTermApiListPaymentTermsRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PaymentTermApiListPaymentTerms
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof PaymentTermApiListPaymentTerms
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof PaymentTermApiListPaymentTerms
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof PaymentTermApiListPaymentTerms
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof PaymentTermApiListPaymentTerms
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'code' | 'displayName' | 'dueDateCalculation' | 'discountDateCalculation' | 'discountPercent' | 'calculateDiscountOnCreditMemos' | 'lastModifiedDateTime'>}
     * @memberof PaymentTermApiListPaymentTerms
     */
    readonly $select?: Array<ListPaymentTermsSelectEnum>
}

/**
 * Request parameters for patchPaymentTerm operation in PaymentTermApi.
 * @export
 * @interface PaymentTermApiPatchPaymentTermRequest
 */
export interface PaymentTermApiPatchPaymentTermRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PaymentTermApiPatchPaymentTerm
     */
    readonly companyId: string

    /**
     * (v1.0) id for paymentTerm
     * @type {string}
     * @memberof PaymentTermApiPatchPaymentTerm
     */
    readonly paymentTermId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof PaymentTermApiPatchPaymentTerm
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof PaymentTermApiPatchPaymentTerm
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostPaymentTermRequest}
     * @memberof PaymentTermApiPatchPaymentTerm
     */
    readonly postPaymentTermRequest: PostPaymentTermRequest
}

/**
 * Request parameters for postPaymentTerm operation in PaymentTermApi.
 * @export
 * @interface PaymentTermApiPostPaymentTermRequest
 */
export interface PaymentTermApiPostPaymentTermRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PaymentTermApiPostPaymentTerm
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof PaymentTermApiPostPaymentTerm
     */
    readonly contentType: string

    /**
     * 
     * @type {PostPaymentTermRequest}
     * @memberof PaymentTermApiPostPaymentTerm
     */
    readonly postPaymentTermRequest: PostPaymentTermRequest
}

/**
 * PaymentTermApi - object-oriented interface
 * @export
 * @class PaymentTermApi
 * @extends {BaseAPI}
 */
export class PaymentTermApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type paymentTerm in Dynamics 365 Business Central
     * @param {PaymentTermApiDeletePaymentTermRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentTermApi
     */
    public deletePaymentTerm(requestParameters: PaymentTermApiDeletePaymentTermRequest, options?: RawAxiosRequestConfig) {
        return PaymentTermApiFp(this.configuration).deletePaymentTerm(requestParameters.companyId, requestParameters.paymentTermId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type paymentTerm for Dynamics 365 Business Central.
     * @param {PaymentTermApiGetPaymentTermRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentTermApi
     */
    public getPaymentTerm(requestParameters: PaymentTermApiGetPaymentTermRequest, options?: RawAxiosRequestConfig) {
        return PaymentTermApiFp(this.configuration).getPaymentTerm(requestParameters.companyId, requestParameters.paymentTermId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of paymentTerms
     * @param {PaymentTermApiListPaymentTermsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentTermApi
     */
    public listPaymentTerms(requestParameters: PaymentTermApiListPaymentTermsRequest, options?: RawAxiosRequestConfig) {
        return PaymentTermApiFp(this.configuration).listPaymentTerms(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type paymentTerm in Dynamics 365 Business Central
     * @param {PaymentTermApiPatchPaymentTermRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentTermApi
     */
    public patchPaymentTerm(requestParameters: PaymentTermApiPatchPaymentTermRequest, options?: RawAxiosRequestConfig) {
        return PaymentTermApiFp(this.configuration).patchPaymentTerm(requestParameters.companyId, requestParameters.paymentTermId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postPaymentTermRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type paymentTerm in Dynamics 365 Business Central
     * @param {PaymentTermApiPostPaymentTermRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentTermApi
     */
    public postPaymentTerm(requestParameters: PaymentTermApiPostPaymentTermRequest, options?: RawAxiosRequestConfig) {
        return PaymentTermApiFp(this.configuration).postPaymentTerm(requestParameters.companyId, requestParameters.contentType, requestParameters.postPaymentTermRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetPaymentTermSelectEnum = {
    Id: 'id',
    Code: 'code',
    DisplayName: 'displayName',
    DueDateCalculation: 'dueDateCalculation',
    DiscountDateCalculation: 'discountDateCalculation',
    DiscountPercent: 'discountPercent',
    CalculateDiscountOnCreditMemos: 'calculateDiscountOnCreditMemos',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type GetPaymentTermSelectEnum = typeof GetPaymentTermSelectEnum[keyof typeof GetPaymentTermSelectEnum];
/**
 * @export
 */
export const ListPaymentTermsSelectEnum = {
    Id: 'id',
    Code: 'code',
    DisplayName: 'displayName',
    DueDateCalculation: 'dueDateCalculation',
    DiscountDateCalculation: 'discountDateCalculation',
    DiscountPercent: 'discountPercent',
    CalculateDiscountOnCreditMemos: 'calculateDiscountOnCreditMemos',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type ListPaymentTermsSelectEnum = typeof ListPaymentTermsSelectEnum[keyof typeof ListPaymentTermsSelectEnum];
