/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CompanyInformation } from '../model';
// @ts-ignore
import type { ListCompanyInformation200Response } from '../model';
// @ts-ignore
import type { PatchCompanyInformationRequest } from '../model';
/**
 * CompanyInformationApi - axios parameter creator
 * @export
 */
export const CompanyInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type companyInformation for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} companyInformationId (v1.0) id for companyInformation
         * @param {Array<GetCompanyInformationSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyInformation: async (companyId: string, companyInformationId: string, $select?: Array<GetCompanyInformationSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompanyInformation', 'companyId', companyId)
            // verify required parameter 'companyInformationId' is not null or undefined
            assertParamExists('getCompanyInformation', 'companyInformationId', companyInformationId)
            const localVarPath = `/companies({company_id})/companyInformation({companyInformation_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"companyInformation_id"}}`, encodeURIComponent(String(companyInformationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of companyInformation
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListCompanyInformationSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanyInformation: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListCompanyInformationSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listCompanyInformation', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/companyInformation`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type companyInformation in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} companyInformationId (v1.0) id for companyInformation
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PatchCompanyInformationRequest} patchCompanyInformationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCompanyInformation: async (companyId: string, companyInformationId: string, contentType: string, ifMatch: string, patchCompanyInformationRequest: PatchCompanyInformationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchCompanyInformation', 'companyId', companyId)
            // verify required parameter 'companyInformationId' is not null or undefined
            assertParamExists('patchCompanyInformation', 'companyInformationId', companyInformationId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchCompanyInformation', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchCompanyInformation', 'ifMatch', ifMatch)
            // verify required parameter 'patchCompanyInformationRequest' is not null or undefined
            assertParamExists('patchCompanyInformation', 'patchCompanyInformationRequest', patchCompanyInformationRequest)
            const localVarPath = `/companies({company_id})/companyInformation({companyInformation_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"companyInformation_id"}}`, encodeURIComponent(String(companyInformationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchCompanyInformationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyInformationApi - functional programming interface
 * @export
 */
export const CompanyInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type companyInformation for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} companyInformationId (v1.0) id for companyInformation
         * @param {Array<GetCompanyInformationSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyInformation(companyId: string, companyInformationId: string, $select?: Array<GetCompanyInformationSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyInformation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyInformation(companyId, companyInformationId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompanyInformationApi.getCompanyInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of companyInformation
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListCompanyInformationSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCompanyInformation(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListCompanyInformationSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCompanyInformation200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCompanyInformation(companyId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompanyInformationApi.listCompanyInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type companyInformation in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} companyInformationId (v1.0) id for companyInformation
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PatchCompanyInformationRequest} patchCompanyInformationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCompanyInformation(companyId: string, companyInformationId: string, contentType: string, ifMatch: string, patchCompanyInformationRequest: PatchCompanyInformationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyInformation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCompanyInformation(companyId, companyInformationId, contentType, ifMatch, patchCompanyInformationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompanyInformationApi.patchCompanyInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CompanyInformationApi - factory interface
 * @export
 */
export const CompanyInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyInformationApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type companyInformation for Dynamics 365 Business Central.
         * @param {CompanyInformationApiGetCompanyInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyInformation(requestParameters: CompanyInformationApiGetCompanyInformationRequest, options?: RawAxiosRequestConfig): AxiosPromise<CompanyInformation> {
            return localVarFp.getCompanyInformation(requestParameters.companyId, requestParameters.companyInformationId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of companyInformation
         * @param {CompanyInformationApiListCompanyInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanyInformation(requestParameters: CompanyInformationApiListCompanyInformationRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListCompanyInformation200Response> {
            return localVarFp.listCompanyInformation(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type companyInformation in Dynamics 365 Business Central
         * @param {CompanyInformationApiPatchCompanyInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCompanyInformation(requestParameters: CompanyInformationApiPatchCompanyInformationRequest, options?: RawAxiosRequestConfig): AxiosPromise<CompanyInformation> {
            return localVarFp.patchCompanyInformation(requestParameters.companyId, requestParameters.companyInformationId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.patchCompanyInformationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCompanyInformation operation in CompanyInformationApi.
 * @export
 * @interface CompanyInformationApiGetCompanyInformationRequest
 */
export interface CompanyInformationApiGetCompanyInformationRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CompanyInformationApiGetCompanyInformation
     */
    readonly companyId: string

    /**
     * (v1.0) id for companyInformation
     * @type {string}
     * @memberof CompanyInformationApiGetCompanyInformation
     */
    readonly companyInformationId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'displayName' | 'address' | 'phoneNumber' | 'faxNumber' | 'email' | 'website' | 'taxRegistrationNumber' | 'currencyCode' | 'currentFiscalYearStartDate' | 'industry' | 'picture' | 'lastModifiedDateTime'>}
     * @memberof CompanyInformationApiGetCompanyInformation
     */
    readonly $select?: Array<GetCompanyInformationSelectEnum>
}

/**
 * Request parameters for listCompanyInformation operation in CompanyInformationApi.
 * @export
 * @interface CompanyInformationApiListCompanyInformationRequest
 */
export interface CompanyInformationApiListCompanyInformationRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CompanyInformationApiListCompanyInformation
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof CompanyInformationApiListCompanyInformation
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof CompanyInformationApiListCompanyInformation
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof CompanyInformationApiListCompanyInformation
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof CompanyInformationApiListCompanyInformation
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'displayName' | 'address' | 'phoneNumber' | 'faxNumber' | 'email' | 'website' | 'taxRegistrationNumber' | 'currencyCode' | 'currentFiscalYearStartDate' | 'industry' | 'picture' | 'lastModifiedDateTime'>}
     * @memberof CompanyInformationApiListCompanyInformation
     */
    readonly $select?: Array<ListCompanyInformationSelectEnum>
}

/**
 * Request parameters for patchCompanyInformation operation in CompanyInformationApi.
 * @export
 * @interface CompanyInformationApiPatchCompanyInformationRequest
 */
export interface CompanyInformationApiPatchCompanyInformationRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CompanyInformationApiPatchCompanyInformation
     */
    readonly companyId: string

    /**
     * (v1.0) id for companyInformation
     * @type {string}
     * @memberof CompanyInformationApiPatchCompanyInformation
     */
    readonly companyInformationId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof CompanyInformationApiPatchCompanyInformation
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof CompanyInformationApiPatchCompanyInformation
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PatchCompanyInformationRequest}
     * @memberof CompanyInformationApiPatchCompanyInformation
     */
    readonly patchCompanyInformationRequest: PatchCompanyInformationRequest
}

/**
 * CompanyInformationApi - object-oriented interface
 * @export
 * @class CompanyInformationApi
 * @extends {BaseAPI}
 */
export class CompanyInformationApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type companyInformation for Dynamics 365 Business Central.
     * @param {CompanyInformationApiGetCompanyInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyInformationApi
     */
    public getCompanyInformation(requestParameters: CompanyInformationApiGetCompanyInformationRequest, options?: RawAxiosRequestConfig) {
        return CompanyInformationApiFp(this.configuration).getCompanyInformation(requestParameters.companyId, requestParameters.companyInformationId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of companyInformation
     * @param {CompanyInformationApiListCompanyInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyInformationApi
     */
    public listCompanyInformation(requestParameters: CompanyInformationApiListCompanyInformationRequest, options?: RawAxiosRequestConfig) {
        return CompanyInformationApiFp(this.configuration).listCompanyInformation(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type companyInformation in Dynamics 365 Business Central
     * @param {CompanyInformationApiPatchCompanyInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyInformationApi
     */
    public patchCompanyInformation(requestParameters: CompanyInformationApiPatchCompanyInformationRequest, options?: RawAxiosRequestConfig) {
        return CompanyInformationApiFp(this.configuration).patchCompanyInformation(requestParameters.companyId, requestParameters.companyInformationId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.patchCompanyInformationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetCompanyInformationSelectEnum = {
    Id: 'id',
    DisplayName: 'displayName',
    Address: 'address',
    PhoneNumber: 'phoneNumber',
    FaxNumber: 'faxNumber',
    Email: 'email',
    Website: 'website',
    TaxRegistrationNumber: 'taxRegistrationNumber',
    CurrencyCode: 'currencyCode',
    CurrentFiscalYearStartDate: 'currentFiscalYearStartDate',
    Industry: 'industry',
    Picture: 'picture',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type GetCompanyInformationSelectEnum = typeof GetCompanyInformationSelectEnum[keyof typeof GetCompanyInformationSelectEnum];
/**
 * @export
 */
export const ListCompanyInformationSelectEnum = {
    Id: 'id',
    DisplayName: 'displayName',
    Address: 'address',
    PhoneNumber: 'phoneNumber',
    FaxNumber: 'faxNumber',
    Email: 'email',
    Website: 'website',
    TaxRegistrationNumber: 'taxRegistrationNumber',
    CurrencyCode: 'currencyCode',
    CurrentFiscalYearStartDate: 'currentFiscalYearStartDate',
    Industry: 'industry',
    Picture: 'picture',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type ListCompanyInformationSelectEnum = typeof ListCompanyInformationSelectEnum[keyof typeof ListCompanyInformationSelectEnum];
