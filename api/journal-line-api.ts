/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { JournalLine } from '../model';
// @ts-ignore
import type { ListJournalLinesForJournal200Response } from '../model';
// @ts-ignore
import type { PostJournalLineForJournalRequest } from '../model';
/**
 * JournalLineApi - axios parameter creator
 * @export
 */
export const JournalLineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type journalLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJournalLine: async (companyId: string, journalLineId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteJournalLine', 'companyId', companyId)
            // verify required parameter 'journalLineId' is not null or undefined
            assertParamExists('deleteJournalLine', 'journalLineId', journalLineId)
            const localVarPath = `/companies({company_id})/journalLines({journalLine_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"journalLine_id"}}`, encodeURIComponent(String(journalLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an object of type journalLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJournalLineForJournal: async (companyId: string, journalId: string, journalLineId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteJournalLineForJournal', 'companyId', companyId)
            // verify required parameter 'journalId' is not null or undefined
            assertParamExists('deleteJournalLineForJournal', 'journalId', journalId)
            // verify required parameter 'journalLineId' is not null or undefined
            assertParamExists('deleteJournalLineForJournal', 'journalLineId', journalLineId)
            const localVarPath = `/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"journal_id"}}`, encodeURIComponent(String(journalId)))
                .replace(`{${"journalLine_id"}}`, encodeURIComponent(String(journalLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type journalLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {Array<GetJournalLineExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetJournalLineSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJournalLine: async (companyId: string, journalLineId: string, $expand?: Array<GetJournalLineExpandEnum>, $select?: Array<GetJournalLineSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getJournalLine', 'companyId', companyId)
            // verify required parameter 'journalLineId' is not null or undefined
            assertParamExists('getJournalLine', 'journalLineId', journalLineId)
            const localVarPath = `/companies({company_id})/journalLines({journalLine_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"journalLine_id"}}`, encodeURIComponent(String(journalLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type journalLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {Array<GetJournalLineForJournalExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetJournalLineForJournalSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJournalLineForJournal: async (companyId: string, journalId: string, journalLineId: string, $expand?: Array<GetJournalLineForJournalExpandEnum>, $select?: Array<GetJournalLineForJournalSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getJournalLineForJournal', 'companyId', companyId)
            // verify required parameter 'journalId' is not null or undefined
            assertParamExists('getJournalLineForJournal', 'journalId', journalId)
            // verify required parameter 'journalLineId' is not null or undefined
            assertParamExists('getJournalLineForJournal', 'journalLineId', journalLineId)
            const localVarPath = `/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"journal_id"}}`, encodeURIComponent(String(journalId)))
                .replace(`{${"journalLine_id"}}`, encodeURIComponent(String(journalLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of journalLines
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListJournalLinesExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListJournalLinesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJournalLines: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListJournalLinesExpandEnum>, $select?: Array<ListJournalLinesSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listJournalLines', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/journalLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of journalLines
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListJournalLinesForJournalExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListJournalLinesForJournalSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJournalLinesForJournal: async (companyId: string, journalId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListJournalLinesForJournalExpandEnum>, $select?: Array<ListJournalLinesForJournalSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listJournalLinesForJournal', 'companyId', companyId)
            // verify required parameter 'journalId' is not null or undefined
            assertParamExists('listJournalLinesForJournal', 'journalId', journalId)
            const localVarPath = `/companies({company_id})/journals({journal_id})/journalLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"journal_id"}}`, encodeURIComponent(String(journalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type journalLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostJournalLineForJournalRequest} postJournalLineForJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchJournalLine: async (companyId: string, journalLineId: string, contentType: string, ifMatch: string, postJournalLineForJournalRequest: PostJournalLineForJournalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchJournalLine', 'companyId', companyId)
            // verify required parameter 'journalLineId' is not null or undefined
            assertParamExists('patchJournalLine', 'journalLineId', journalLineId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchJournalLine', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchJournalLine', 'ifMatch', ifMatch)
            // verify required parameter 'postJournalLineForJournalRequest' is not null or undefined
            assertParamExists('patchJournalLine', 'postJournalLineForJournalRequest', postJournalLineForJournalRequest)
            const localVarPath = `/companies({company_id})/journalLines({journalLine_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"journalLine_id"}}`, encodeURIComponent(String(journalLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postJournalLineForJournalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type journalLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostJournalLineForJournalRequest} postJournalLineForJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchJournalLineForJournal: async (companyId: string, journalId: string, journalLineId: string, contentType: string, ifMatch: string, postJournalLineForJournalRequest: PostJournalLineForJournalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchJournalLineForJournal', 'companyId', companyId)
            // verify required parameter 'journalId' is not null or undefined
            assertParamExists('patchJournalLineForJournal', 'journalId', journalId)
            // verify required parameter 'journalLineId' is not null or undefined
            assertParamExists('patchJournalLineForJournal', 'journalLineId', journalLineId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchJournalLineForJournal', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchJournalLineForJournal', 'ifMatch', ifMatch)
            // verify required parameter 'postJournalLineForJournalRequest' is not null or undefined
            assertParamExists('patchJournalLineForJournal', 'postJournalLineForJournalRequest', postJournalLineForJournalRequest)
            const localVarPath = `/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"journal_id"}}`, encodeURIComponent(String(journalId)))
                .replace(`{${"journalLine_id"}}`, encodeURIComponent(String(journalLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postJournalLineForJournalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type journalLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostJournalLineForJournalRequest} postJournalLineForJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postJournalLine: async (companyId: string, contentType: string, postJournalLineForJournalRequest: PostJournalLineForJournalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postJournalLine', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postJournalLine', 'contentType', contentType)
            // verify required parameter 'postJournalLineForJournalRequest' is not null or undefined
            assertParamExists('postJournalLine', 'postJournalLineForJournalRequest', postJournalLineForJournalRequest)
            const localVarPath = `/companies({company_id})/journalLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postJournalLineForJournalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type journalLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {string} contentType (v1.0) application/json
         * @param {PostJournalLineForJournalRequest} postJournalLineForJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postJournalLineForJournal: async (companyId: string, journalId: string, contentType: string, postJournalLineForJournalRequest: PostJournalLineForJournalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postJournalLineForJournal', 'companyId', companyId)
            // verify required parameter 'journalId' is not null or undefined
            assertParamExists('postJournalLineForJournal', 'journalId', journalId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postJournalLineForJournal', 'contentType', contentType)
            // verify required parameter 'postJournalLineForJournalRequest' is not null or undefined
            assertParamExists('postJournalLineForJournal', 'postJournalLineForJournalRequest', postJournalLineForJournalRequest)
            const localVarPath = `/companies({company_id})/journals({journal_id})/journalLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"journal_id"}}`, encodeURIComponent(String(journalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postJournalLineForJournalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JournalLineApi - functional programming interface
 * @export
 */
export const JournalLineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JournalLineApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type journalLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteJournalLine(companyId: string, journalLineId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteJournalLine(companyId, journalLineId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JournalLineApi.deleteJournalLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes an object of type journalLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteJournalLineForJournal(companyId: string, journalId: string, journalLineId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteJournalLineForJournal(companyId, journalId, journalLineId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JournalLineApi.deleteJournalLineForJournal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type journalLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {Array<GetJournalLineExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetJournalLineSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJournalLine(companyId: string, journalLineId: string, $expand?: Array<GetJournalLineExpandEnum>, $select?: Array<GetJournalLineSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JournalLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJournalLine(companyId, journalLineId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JournalLineApi.getJournalLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type journalLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {Array<GetJournalLineForJournalExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetJournalLineForJournalSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJournalLineForJournal(companyId: string, journalId: string, journalLineId: string, $expand?: Array<GetJournalLineForJournalExpandEnum>, $select?: Array<GetJournalLineForJournalSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JournalLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJournalLineForJournal(companyId, journalId, journalLineId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JournalLineApi.getJournalLineForJournal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of journalLines
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListJournalLinesExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListJournalLinesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listJournalLines(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListJournalLinesExpandEnum>, $select?: Array<ListJournalLinesSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListJournalLinesForJournal200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listJournalLines(companyId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JournalLineApi.listJournalLines']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of journalLines
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListJournalLinesForJournalExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListJournalLinesForJournalSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listJournalLinesForJournal(companyId: string, journalId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListJournalLinesForJournalExpandEnum>, $select?: Array<ListJournalLinesForJournalSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListJournalLinesForJournal200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listJournalLinesForJournal(companyId, journalId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JournalLineApi.listJournalLinesForJournal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type journalLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostJournalLineForJournalRequest} postJournalLineForJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchJournalLine(companyId: string, journalLineId: string, contentType: string, ifMatch: string, postJournalLineForJournalRequest: PostJournalLineForJournalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JournalLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchJournalLine(companyId, journalLineId, contentType, ifMatch, postJournalLineForJournalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JournalLineApi.patchJournalLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type journalLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostJournalLineForJournalRequest} postJournalLineForJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchJournalLineForJournal(companyId: string, journalId: string, journalLineId: string, contentType: string, ifMatch: string, postJournalLineForJournalRequest: PostJournalLineForJournalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JournalLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchJournalLineForJournal(companyId, journalId, journalLineId, contentType, ifMatch, postJournalLineForJournalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JournalLineApi.patchJournalLineForJournal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type journalLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostJournalLineForJournalRequest} postJournalLineForJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postJournalLine(companyId: string, contentType: string, postJournalLineForJournalRequest: PostJournalLineForJournalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JournalLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postJournalLine(companyId, contentType, postJournalLineForJournalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JournalLineApi.postJournalLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type journalLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {string} contentType (v1.0) application/json
         * @param {PostJournalLineForJournalRequest} postJournalLineForJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postJournalLineForJournal(companyId: string, journalId: string, contentType: string, postJournalLineForJournalRequest: PostJournalLineForJournalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JournalLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postJournalLineForJournal(companyId, journalId, contentType, postJournalLineForJournalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JournalLineApi.postJournalLineForJournal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * JournalLineApi - factory interface
 * @export
 */
export const JournalLineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JournalLineApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type journalLine in Dynamics 365 Business Central
         * @param {JournalLineApiDeleteJournalLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJournalLine(requestParameters: JournalLineApiDeleteJournalLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteJournalLine(requestParameters.companyId, requestParameters.journalLineId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an object of type journalLine in Dynamics 365 Business Central
         * @param {JournalLineApiDeleteJournalLineForJournalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJournalLineForJournal(requestParameters: JournalLineApiDeleteJournalLineForJournalRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteJournalLineForJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.journalLineId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type journalLine for Dynamics 365 Business Central.
         * @param {JournalLineApiGetJournalLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJournalLine(requestParameters: JournalLineApiGetJournalLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<JournalLine> {
            return localVarFp.getJournalLine(requestParameters.companyId, requestParameters.journalLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type journalLine for Dynamics 365 Business Central.
         * @param {JournalLineApiGetJournalLineForJournalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJournalLineForJournal(requestParameters: JournalLineApiGetJournalLineForJournalRequest, options?: RawAxiosRequestConfig): AxiosPromise<JournalLine> {
            return localVarFp.getJournalLineForJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.journalLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of journalLines
         * @param {JournalLineApiListJournalLinesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJournalLines(requestParameters: JournalLineApiListJournalLinesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListJournalLinesForJournal200Response> {
            return localVarFp.listJournalLines(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of journalLines
         * @param {JournalLineApiListJournalLinesForJournalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJournalLinesForJournal(requestParameters: JournalLineApiListJournalLinesForJournalRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListJournalLinesForJournal200Response> {
            return localVarFp.listJournalLinesForJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type journalLine in Dynamics 365 Business Central
         * @param {JournalLineApiPatchJournalLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchJournalLine(requestParameters: JournalLineApiPatchJournalLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<JournalLine> {
            return localVarFp.patchJournalLine(requestParameters.companyId, requestParameters.journalLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postJournalLineForJournalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type journalLine in Dynamics 365 Business Central
         * @param {JournalLineApiPatchJournalLineForJournalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchJournalLineForJournal(requestParameters: JournalLineApiPatchJournalLineForJournalRequest, options?: RawAxiosRequestConfig): AxiosPromise<JournalLine> {
            return localVarFp.patchJournalLineForJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.journalLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postJournalLineForJournalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type journalLine in Dynamics 365 Business Central
         * @param {JournalLineApiPostJournalLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postJournalLine(requestParameters: JournalLineApiPostJournalLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<JournalLine> {
            return localVarFp.postJournalLine(requestParameters.companyId, requestParameters.contentType, requestParameters.postJournalLineForJournalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type journalLine in Dynamics 365 Business Central
         * @param {JournalLineApiPostJournalLineForJournalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postJournalLineForJournal(requestParameters: JournalLineApiPostJournalLineForJournalRequest, options?: RawAxiosRequestConfig): AxiosPromise<JournalLine> {
            return localVarFp.postJournalLineForJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.contentType, requestParameters.postJournalLineForJournalRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteJournalLine operation in JournalLineApi.
 * @export
 * @interface JournalLineApiDeleteJournalLineRequest
 */
export interface JournalLineApiDeleteJournalLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof JournalLineApiDeleteJournalLine
     */
    readonly companyId: string

    /**
     * (v1.0) id for journalLine
     * @type {string}
     * @memberof JournalLineApiDeleteJournalLine
     */
    readonly journalLineId: string
}

/**
 * Request parameters for deleteJournalLineForJournal operation in JournalLineApi.
 * @export
 * @interface JournalLineApiDeleteJournalLineForJournalRequest
 */
export interface JournalLineApiDeleteJournalLineForJournalRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof JournalLineApiDeleteJournalLineForJournal
     */
    readonly companyId: string

    /**
     * (v1.0) id for journal
     * @type {string}
     * @memberof JournalLineApiDeleteJournalLineForJournal
     */
    readonly journalId: string

    /**
     * (v1.0) id for journalLine
     * @type {string}
     * @memberof JournalLineApiDeleteJournalLineForJournal
     */
    readonly journalLineId: string
}

/**
 * Request parameters for getJournalLine operation in JournalLineApi.
 * @export
 * @interface JournalLineApiGetJournalLineRequest
 */
export interface JournalLineApiGetJournalLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof JournalLineApiGetJournalLine
     */
    readonly companyId: string

    /**
     * (v1.0) id for journalLine
     * @type {string}
     * @memberof JournalLineApiGetJournalLine
     */
    readonly journalLineId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'attachments' | 'account'>}
     * @memberof JournalLineApiGetJournalLine
     */
    readonly $expand?: Array<GetJournalLineExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'journalDisplayName' | 'lineNumber' | 'accountType' | 'accountId' | 'accountNumber' | 'postingDate' | 'documentNumber' | 'externalDocumentNumber' | 'amount' | 'description' | 'comment' | 'dimensions' | 'lastModifiedDateTime'>}
     * @memberof JournalLineApiGetJournalLine
     */
    readonly $select?: Array<GetJournalLineSelectEnum>
}

/**
 * Request parameters for getJournalLineForJournal operation in JournalLineApi.
 * @export
 * @interface JournalLineApiGetJournalLineForJournalRequest
 */
export interface JournalLineApiGetJournalLineForJournalRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof JournalLineApiGetJournalLineForJournal
     */
    readonly companyId: string

    /**
     * (v1.0) id for journal
     * @type {string}
     * @memberof JournalLineApiGetJournalLineForJournal
     */
    readonly journalId: string

    /**
     * (v1.0) id for journalLine
     * @type {string}
     * @memberof JournalLineApiGetJournalLineForJournal
     */
    readonly journalLineId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'attachments' | 'account'>}
     * @memberof JournalLineApiGetJournalLineForJournal
     */
    readonly $expand?: Array<GetJournalLineForJournalExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'journalDisplayName' | 'lineNumber' | 'accountType' | 'accountId' | 'accountNumber' | 'postingDate' | 'documentNumber' | 'externalDocumentNumber' | 'amount' | 'description' | 'comment' | 'dimensions' | 'lastModifiedDateTime'>}
     * @memberof JournalLineApiGetJournalLineForJournal
     */
    readonly $select?: Array<GetJournalLineForJournalSelectEnum>
}

/**
 * Request parameters for listJournalLines operation in JournalLineApi.
 * @export
 * @interface JournalLineApiListJournalLinesRequest
 */
export interface JournalLineApiListJournalLinesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof JournalLineApiListJournalLines
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof JournalLineApiListJournalLines
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof JournalLineApiListJournalLines
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof JournalLineApiListJournalLines
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof JournalLineApiListJournalLines
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'attachments' | 'account'>}
     * @memberof JournalLineApiListJournalLines
     */
    readonly $expand?: Array<ListJournalLinesExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'journalDisplayName' | 'lineNumber' | 'accountType' | 'accountId' | 'accountNumber' | 'postingDate' | 'documentNumber' | 'externalDocumentNumber' | 'amount' | 'description' | 'comment' | 'dimensions' | 'lastModifiedDateTime'>}
     * @memberof JournalLineApiListJournalLines
     */
    readonly $select?: Array<ListJournalLinesSelectEnum>
}

/**
 * Request parameters for listJournalLinesForJournal operation in JournalLineApi.
 * @export
 * @interface JournalLineApiListJournalLinesForJournalRequest
 */
export interface JournalLineApiListJournalLinesForJournalRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof JournalLineApiListJournalLinesForJournal
     */
    readonly companyId: string

    /**
     * (v1.0) id for journal
     * @type {string}
     * @memberof JournalLineApiListJournalLinesForJournal
     */
    readonly journalId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof JournalLineApiListJournalLinesForJournal
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof JournalLineApiListJournalLinesForJournal
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof JournalLineApiListJournalLinesForJournal
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof JournalLineApiListJournalLinesForJournal
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'attachments' | 'account'>}
     * @memberof JournalLineApiListJournalLinesForJournal
     */
    readonly $expand?: Array<ListJournalLinesForJournalExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'journalDisplayName' | 'lineNumber' | 'accountType' | 'accountId' | 'accountNumber' | 'postingDate' | 'documentNumber' | 'externalDocumentNumber' | 'amount' | 'description' | 'comment' | 'dimensions' | 'lastModifiedDateTime'>}
     * @memberof JournalLineApiListJournalLinesForJournal
     */
    readonly $select?: Array<ListJournalLinesForJournalSelectEnum>
}

/**
 * Request parameters for patchJournalLine operation in JournalLineApi.
 * @export
 * @interface JournalLineApiPatchJournalLineRequest
 */
export interface JournalLineApiPatchJournalLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof JournalLineApiPatchJournalLine
     */
    readonly companyId: string

    /**
     * (v1.0) id for journalLine
     * @type {string}
     * @memberof JournalLineApiPatchJournalLine
     */
    readonly journalLineId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof JournalLineApiPatchJournalLine
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof JournalLineApiPatchJournalLine
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostJournalLineForJournalRequest}
     * @memberof JournalLineApiPatchJournalLine
     */
    readonly postJournalLineForJournalRequest: PostJournalLineForJournalRequest
}

/**
 * Request parameters for patchJournalLineForJournal operation in JournalLineApi.
 * @export
 * @interface JournalLineApiPatchJournalLineForJournalRequest
 */
export interface JournalLineApiPatchJournalLineForJournalRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof JournalLineApiPatchJournalLineForJournal
     */
    readonly companyId: string

    /**
     * (v1.0) id for journal
     * @type {string}
     * @memberof JournalLineApiPatchJournalLineForJournal
     */
    readonly journalId: string

    /**
     * (v1.0) id for journalLine
     * @type {string}
     * @memberof JournalLineApiPatchJournalLineForJournal
     */
    readonly journalLineId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof JournalLineApiPatchJournalLineForJournal
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof JournalLineApiPatchJournalLineForJournal
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostJournalLineForJournalRequest}
     * @memberof JournalLineApiPatchJournalLineForJournal
     */
    readonly postJournalLineForJournalRequest: PostJournalLineForJournalRequest
}

/**
 * Request parameters for postJournalLine operation in JournalLineApi.
 * @export
 * @interface JournalLineApiPostJournalLineRequest
 */
export interface JournalLineApiPostJournalLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof JournalLineApiPostJournalLine
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof JournalLineApiPostJournalLine
     */
    readonly contentType: string

    /**
     * 
     * @type {PostJournalLineForJournalRequest}
     * @memberof JournalLineApiPostJournalLine
     */
    readonly postJournalLineForJournalRequest: PostJournalLineForJournalRequest
}

/**
 * Request parameters for postJournalLineForJournal operation in JournalLineApi.
 * @export
 * @interface JournalLineApiPostJournalLineForJournalRequest
 */
export interface JournalLineApiPostJournalLineForJournalRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof JournalLineApiPostJournalLineForJournal
     */
    readonly companyId: string

    /**
     * (v1.0) id for journal
     * @type {string}
     * @memberof JournalLineApiPostJournalLineForJournal
     */
    readonly journalId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof JournalLineApiPostJournalLineForJournal
     */
    readonly contentType: string

    /**
     * 
     * @type {PostJournalLineForJournalRequest}
     * @memberof JournalLineApiPostJournalLineForJournal
     */
    readonly postJournalLineForJournalRequest: PostJournalLineForJournalRequest
}

/**
 * JournalLineApi - object-oriented interface
 * @export
 * @class JournalLineApi
 * @extends {BaseAPI}
 */
export class JournalLineApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type journalLine in Dynamics 365 Business Central
     * @param {JournalLineApiDeleteJournalLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JournalLineApi
     */
    public deleteJournalLine(requestParameters: JournalLineApiDeleteJournalLineRequest, options?: RawAxiosRequestConfig) {
        return JournalLineApiFp(this.configuration).deleteJournalLine(requestParameters.companyId, requestParameters.journalLineId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an object of type journalLine in Dynamics 365 Business Central
     * @param {JournalLineApiDeleteJournalLineForJournalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JournalLineApi
     */
    public deleteJournalLineForJournal(requestParameters: JournalLineApiDeleteJournalLineForJournalRequest, options?: RawAxiosRequestConfig) {
        return JournalLineApiFp(this.configuration).deleteJournalLineForJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.journalLineId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type journalLine for Dynamics 365 Business Central.
     * @param {JournalLineApiGetJournalLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JournalLineApi
     */
    public getJournalLine(requestParameters: JournalLineApiGetJournalLineRequest, options?: RawAxiosRequestConfig) {
        return JournalLineApiFp(this.configuration).getJournalLine(requestParameters.companyId, requestParameters.journalLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type journalLine for Dynamics 365 Business Central.
     * @param {JournalLineApiGetJournalLineForJournalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JournalLineApi
     */
    public getJournalLineForJournal(requestParameters: JournalLineApiGetJournalLineForJournalRequest, options?: RawAxiosRequestConfig) {
        return JournalLineApiFp(this.configuration).getJournalLineForJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.journalLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of journalLines
     * @param {JournalLineApiListJournalLinesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JournalLineApi
     */
    public listJournalLines(requestParameters: JournalLineApiListJournalLinesRequest, options?: RawAxiosRequestConfig) {
        return JournalLineApiFp(this.configuration).listJournalLines(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of journalLines
     * @param {JournalLineApiListJournalLinesForJournalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JournalLineApi
     */
    public listJournalLinesForJournal(requestParameters: JournalLineApiListJournalLinesForJournalRequest, options?: RawAxiosRequestConfig) {
        return JournalLineApiFp(this.configuration).listJournalLinesForJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type journalLine in Dynamics 365 Business Central
     * @param {JournalLineApiPatchJournalLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JournalLineApi
     */
    public patchJournalLine(requestParameters: JournalLineApiPatchJournalLineRequest, options?: RawAxiosRequestConfig) {
        return JournalLineApiFp(this.configuration).patchJournalLine(requestParameters.companyId, requestParameters.journalLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postJournalLineForJournalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type journalLine in Dynamics 365 Business Central
     * @param {JournalLineApiPatchJournalLineForJournalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JournalLineApi
     */
    public patchJournalLineForJournal(requestParameters: JournalLineApiPatchJournalLineForJournalRequest, options?: RawAxiosRequestConfig) {
        return JournalLineApiFp(this.configuration).patchJournalLineForJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.journalLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postJournalLineForJournalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type journalLine in Dynamics 365 Business Central
     * @param {JournalLineApiPostJournalLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JournalLineApi
     */
    public postJournalLine(requestParameters: JournalLineApiPostJournalLineRequest, options?: RawAxiosRequestConfig) {
        return JournalLineApiFp(this.configuration).postJournalLine(requestParameters.companyId, requestParameters.contentType, requestParameters.postJournalLineForJournalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type journalLine in Dynamics 365 Business Central
     * @param {JournalLineApiPostJournalLineForJournalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JournalLineApi
     */
    public postJournalLineForJournal(requestParameters: JournalLineApiPostJournalLineForJournalRequest, options?: RawAxiosRequestConfig) {
        return JournalLineApiFp(this.configuration).postJournalLineForJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.contentType, requestParameters.postJournalLineForJournalRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetJournalLineExpandEnum = {
    Attachments: 'attachments',
    Account: 'account'
} as const;
export type GetJournalLineExpandEnum = typeof GetJournalLineExpandEnum[keyof typeof GetJournalLineExpandEnum];
/**
 * @export
 */
export const GetJournalLineSelectEnum = {
    Id: 'id',
    JournalDisplayName: 'journalDisplayName',
    LineNumber: 'lineNumber',
    AccountType: 'accountType',
    AccountId: 'accountId',
    AccountNumber: 'accountNumber',
    PostingDate: 'postingDate',
    DocumentNumber: 'documentNumber',
    ExternalDocumentNumber: 'externalDocumentNumber',
    Amount: 'amount',
    Description: 'description',
    Comment: 'comment',
    Dimensions: 'dimensions',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type GetJournalLineSelectEnum = typeof GetJournalLineSelectEnum[keyof typeof GetJournalLineSelectEnum];
/**
 * @export
 */
export const GetJournalLineForJournalExpandEnum = {
    Attachments: 'attachments',
    Account: 'account'
} as const;
export type GetJournalLineForJournalExpandEnum = typeof GetJournalLineForJournalExpandEnum[keyof typeof GetJournalLineForJournalExpandEnum];
/**
 * @export
 */
export const GetJournalLineForJournalSelectEnum = {
    Id: 'id',
    JournalDisplayName: 'journalDisplayName',
    LineNumber: 'lineNumber',
    AccountType: 'accountType',
    AccountId: 'accountId',
    AccountNumber: 'accountNumber',
    PostingDate: 'postingDate',
    DocumentNumber: 'documentNumber',
    ExternalDocumentNumber: 'externalDocumentNumber',
    Amount: 'amount',
    Description: 'description',
    Comment: 'comment',
    Dimensions: 'dimensions',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type GetJournalLineForJournalSelectEnum = typeof GetJournalLineForJournalSelectEnum[keyof typeof GetJournalLineForJournalSelectEnum];
/**
 * @export
 */
export const ListJournalLinesExpandEnum = {
    Attachments: 'attachments',
    Account: 'account'
} as const;
export type ListJournalLinesExpandEnum = typeof ListJournalLinesExpandEnum[keyof typeof ListJournalLinesExpandEnum];
/**
 * @export
 */
export const ListJournalLinesSelectEnum = {
    Id: 'id',
    JournalDisplayName: 'journalDisplayName',
    LineNumber: 'lineNumber',
    AccountType: 'accountType',
    AccountId: 'accountId',
    AccountNumber: 'accountNumber',
    PostingDate: 'postingDate',
    DocumentNumber: 'documentNumber',
    ExternalDocumentNumber: 'externalDocumentNumber',
    Amount: 'amount',
    Description: 'description',
    Comment: 'comment',
    Dimensions: 'dimensions',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type ListJournalLinesSelectEnum = typeof ListJournalLinesSelectEnum[keyof typeof ListJournalLinesSelectEnum];
/**
 * @export
 */
export const ListJournalLinesForJournalExpandEnum = {
    Attachments: 'attachments',
    Account: 'account'
} as const;
export type ListJournalLinesForJournalExpandEnum = typeof ListJournalLinesForJournalExpandEnum[keyof typeof ListJournalLinesForJournalExpandEnum];
/**
 * @export
 */
export const ListJournalLinesForJournalSelectEnum = {
    Id: 'id',
    JournalDisplayName: 'journalDisplayName',
    LineNumber: 'lineNumber',
    AccountType: 'accountType',
    AccountId: 'accountId',
    AccountNumber: 'accountNumber',
    PostingDate: 'postingDate',
    DocumentNumber: 'documentNumber',
    ExternalDocumentNumber: 'externalDocumentNumber',
    Amount: 'amount',
    Description: 'description',
    Comment: 'comment',
    Dimensions: 'dimensions',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type ListJournalLinesForJournalSelectEnum = typeof ListJournalLinesForJournalSelectEnum[keyof typeof ListJournalLinesForJournalSelectEnum];
