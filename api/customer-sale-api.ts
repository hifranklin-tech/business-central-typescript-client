/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CustomerSale } from '../model';
// @ts-ignore
import type { ListCustomerSales200Response } from '../model';
/**
 * CustomerSaleApi - axios parameter creator
 * @export
 */
export const CustomerSaleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type customerSale for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerSaleCustomerId (v1.0) customerId for customerSale
         * @param {string} customerSaleCustomerNumber (v1.0) customerNumber for customerSale
         * @param {string} customerSaleName (v1.0) name for customerSale
         * @param {Array<GetCustomerSaleSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerSale: async (companyId: string, customerSaleCustomerId: string, customerSaleCustomerNumber: string, customerSaleName: string, $select?: Array<GetCustomerSaleSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCustomerSale', 'companyId', companyId)
            // verify required parameter 'customerSaleCustomerId' is not null or undefined
            assertParamExists('getCustomerSale', 'customerSaleCustomerId', customerSaleCustomerId)
            // verify required parameter 'customerSaleCustomerNumber' is not null or undefined
            assertParamExists('getCustomerSale', 'customerSaleCustomerNumber', customerSaleCustomerNumber)
            // verify required parameter 'customerSaleName' is not null or undefined
            assertParamExists('getCustomerSale', 'customerSaleName', customerSaleName)
            const localVarPath = `/companies({company_id})/customerSales({customerSale_customerId},'{customerSale_customerNumber}','{customerSale_name}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"customerSale_customerId"}}`, encodeURIComponent(String(customerSaleCustomerId)))
                .replace(`{${"customerSale_customerNumber"}}`, encodeURIComponent(String(customerSaleCustomerNumber)))
                .replace(`{${"customerSale_name"}}`, encodeURIComponent(String(customerSaleName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of customerSales
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListCustomerSalesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerSales: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListCustomerSalesSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listCustomerSales', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/customerSales`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerSaleApi - functional programming interface
 * @export
 */
export const CustomerSaleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerSaleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type customerSale for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerSaleCustomerId (v1.0) customerId for customerSale
         * @param {string} customerSaleCustomerNumber (v1.0) customerNumber for customerSale
         * @param {string} customerSaleName (v1.0) name for customerSale
         * @param {Array<GetCustomerSaleSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerSale(companyId: string, customerSaleCustomerId: string, customerSaleCustomerNumber: string, customerSaleName: string, $select?: Array<GetCustomerSaleSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerSale>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerSale(companyId, customerSaleCustomerId, customerSaleCustomerNumber, customerSaleName, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerSaleApi.getCustomerSale']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of customerSales
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListCustomerSalesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCustomerSales(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListCustomerSalesSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCustomerSales200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCustomerSales(companyId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerSaleApi.listCustomerSales']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerSaleApi - factory interface
 * @export
 */
export const CustomerSaleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerSaleApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type customerSale for Dynamics 365 Business Central.
         * @param {CustomerSaleApiGetCustomerSaleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerSale(requestParameters: CustomerSaleApiGetCustomerSaleRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomerSale> {
            return localVarFp.getCustomerSale(requestParameters.companyId, requestParameters.customerSaleCustomerId, requestParameters.customerSaleCustomerNumber, requestParameters.customerSaleName, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of customerSales
         * @param {CustomerSaleApiListCustomerSalesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerSales(requestParameters: CustomerSaleApiListCustomerSalesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListCustomerSales200Response> {
            return localVarFp.listCustomerSales(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCustomerSale operation in CustomerSaleApi.
 * @export
 * @interface CustomerSaleApiGetCustomerSaleRequest
 */
export interface CustomerSaleApiGetCustomerSaleRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerSaleApiGetCustomerSale
     */
    readonly companyId: string

    /**
     * (v1.0) customerId for customerSale
     * @type {string}
     * @memberof CustomerSaleApiGetCustomerSale
     */
    readonly customerSaleCustomerId: string

    /**
     * (v1.0) customerNumber for customerSale
     * @type {string}
     * @memberof CustomerSaleApiGetCustomerSale
     */
    readonly customerSaleCustomerNumber: string

    /**
     * (v1.0) name for customerSale
     * @type {string}
     * @memberof CustomerSaleApiGetCustomerSale
     */
    readonly customerSaleName: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'customerId' | 'customerNumber' | 'name' | 'totalSalesAmount' | 'dateFilter_FilterOnly'>}
     * @memberof CustomerSaleApiGetCustomerSale
     */
    readonly $select?: Array<GetCustomerSaleSelectEnum>
}

/**
 * Request parameters for listCustomerSales operation in CustomerSaleApi.
 * @export
 * @interface CustomerSaleApiListCustomerSalesRequest
 */
export interface CustomerSaleApiListCustomerSalesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerSaleApiListCustomerSales
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof CustomerSaleApiListCustomerSales
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof CustomerSaleApiListCustomerSales
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof CustomerSaleApiListCustomerSales
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof CustomerSaleApiListCustomerSales
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'customerId' | 'customerNumber' | 'name' | 'totalSalesAmount' | 'dateFilter_FilterOnly'>}
     * @memberof CustomerSaleApiListCustomerSales
     */
    readonly $select?: Array<ListCustomerSalesSelectEnum>
}

/**
 * CustomerSaleApi - object-oriented interface
 * @export
 * @class CustomerSaleApi
 * @extends {BaseAPI}
 */
export class CustomerSaleApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type customerSale for Dynamics 365 Business Central.
     * @param {CustomerSaleApiGetCustomerSaleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerSaleApi
     */
    public getCustomerSale(requestParameters: CustomerSaleApiGetCustomerSaleRequest, options?: RawAxiosRequestConfig) {
        return CustomerSaleApiFp(this.configuration).getCustomerSale(requestParameters.companyId, requestParameters.customerSaleCustomerId, requestParameters.customerSaleCustomerNumber, requestParameters.customerSaleName, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of customerSales
     * @param {CustomerSaleApiListCustomerSalesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerSaleApi
     */
    public listCustomerSales(requestParameters: CustomerSaleApiListCustomerSalesRequest, options?: RawAxiosRequestConfig) {
        return CustomerSaleApiFp(this.configuration).listCustomerSales(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetCustomerSaleSelectEnum = {
    CustomerId: 'customerId',
    CustomerNumber: 'customerNumber',
    Name: 'name',
    TotalSalesAmount: 'totalSalesAmount',
    DateFilterFilterOnly: 'dateFilter_FilterOnly'
} as const;
export type GetCustomerSaleSelectEnum = typeof GetCustomerSaleSelectEnum[keyof typeof GetCustomerSaleSelectEnum];
/**
 * @export
 */
export const ListCustomerSalesSelectEnum = {
    CustomerId: 'customerId',
    CustomerNumber: 'customerNumber',
    Name: 'name',
    TotalSalesAmount: 'totalSalesAmount',
    DateFilterFilterOnly: 'dateFilter_FilterOnly'
} as const;
export type ListCustomerSalesSelectEnum = typeof ListCustomerSalesSelectEnum[keyof typeof ListCustomerSalesSelectEnum];
