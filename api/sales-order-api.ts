/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ListSalesOrders200Response } from '../model';
// @ts-ignore
import type { PostSalesOrderRequest } from '../model';
// @ts-ignore
import type { SalesOrder } from '../model';
/**
 * SalesOrderApi - axios parameter creator
 * @export
 */
export const SalesOrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type salesOrder in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderId (v1.0) id for salesOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesOrder: async (companyId: string, salesOrderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteSalesOrder', 'companyId', companyId)
            // verify required parameter 'salesOrderId' is not null or undefined
            assertParamExists('deleteSalesOrder', 'salesOrderId', salesOrderId)
            const localVarPath = `/companies({company_id})/salesOrders({salesOrder_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesOrder_id"}}`, encodeURIComponent(String(salesOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesOrder for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderId (v1.0) id for salesOrder
         * @param {Array<GetSalesOrderExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesOrderSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesOrder: async (companyId: string, salesOrderId: string, $expand?: Array<GetSalesOrderExpandEnum>, $select?: Array<GetSalesOrderSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSalesOrder', 'companyId', companyId)
            // verify required parameter 'salesOrderId' is not null or undefined
            assertParamExists('getSalesOrder', 'salesOrderId', salesOrderId)
            const localVarPath = `/companies({company_id})/salesOrders({salesOrder_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesOrder_id"}}`, encodeURIComponent(String(salesOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of salesOrders
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesOrdersExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesOrdersSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesOrders: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesOrdersExpandEnum>, $select?: Array<ListSalesOrdersSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listSalesOrders', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/salesOrders`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type salesOrder in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderId (v1.0) id for salesOrder
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesOrderRequest} postSalesOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesOrder: async (companyId: string, salesOrderId: string, contentType: string, ifMatch: string, postSalesOrderRequest: PostSalesOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchSalesOrder', 'companyId', companyId)
            // verify required parameter 'salesOrderId' is not null or undefined
            assertParamExists('patchSalesOrder', 'salesOrderId', salesOrderId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchSalesOrder', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchSalesOrder', 'ifMatch', ifMatch)
            // verify required parameter 'postSalesOrderRequest' is not null or undefined
            assertParamExists('patchSalesOrder', 'postSalesOrderRequest', postSalesOrderRequest)
            const localVarPath = `/companies({company_id})/salesOrders({salesOrder_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesOrder_id"}}`, encodeURIComponent(String(salesOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type salesOrder in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesOrderRequest} postSalesOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesOrder: async (companyId: string, contentType: string, postSalesOrderRequest: PostSalesOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postSalesOrder', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postSalesOrder', 'contentType', contentType)
            // verify required parameter 'postSalesOrderRequest' is not null or undefined
            assertParamExists('postSalesOrder', 'postSalesOrderRequest', postSalesOrderRequest)
            const localVarPath = `/companies({company_id})/salesOrders`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Performs the shipAndInvoice action for salesOrders entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderId (v1.0) id for salesOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipAndInvoiceActionSalesOrders: async (companyId: string, salesOrderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('shipAndInvoiceActionSalesOrders', 'companyId', companyId)
            // verify required parameter 'salesOrderId' is not null or undefined
            assertParamExists('shipAndInvoiceActionSalesOrders', 'salesOrderId', salesOrderId)
            const localVarPath = `/companies({company_id})/salesOrders({salesOrder_id})/Microsoft.NAV.shipAndInvoice`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesOrder_id"}}`, encodeURIComponent(String(salesOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalesOrderApi - functional programming interface
 * @export
 */
export const SalesOrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalesOrderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type salesOrder in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderId (v1.0) id for salesOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalesOrder(companyId: string, salesOrderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalesOrder(companyId, salesOrderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesOrderApi.deleteSalesOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesOrder for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderId (v1.0) id for salesOrder
         * @param {Array<GetSalesOrderExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesOrderSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesOrder(companyId: string, salesOrderId: string, $expand?: Array<GetSalesOrderExpandEnum>, $select?: Array<GetSalesOrderSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesOrder(companyId, salesOrderId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesOrderApi.getSalesOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of salesOrders
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesOrdersExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesOrdersSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSalesOrders(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesOrdersExpandEnum>, $select?: Array<ListSalesOrdersSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListSalesOrders200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSalesOrders(companyId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesOrderApi.listSalesOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type salesOrder in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderId (v1.0) id for salesOrder
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesOrderRequest} postSalesOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSalesOrder(companyId: string, salesOrderId: string, contentType: string, ifMatch: string, postSalesOrderRequest: PostSalesOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSalesOrder(companyId, salesOrderId, contentType, ifMatch, postSalesOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesOrderApi.patchSalesOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type salesOrder in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesOrderRequest} postSalesOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSalesOrder(companyId: string, contentType: string, postSalesOrderRequest: PostSalesOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSalesOrder(companyId, contentType, postSalesOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesOrderApi.postSalesOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Performs the shipAndInvoice action for salesOrders entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderId (v1.0) id for salesOrder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shipAndInvoiceActionSalesOrders(companyId: string, salesOrderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shipAndInvoiceActionSalesOrders(companyId, salesOrderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesOrderApi.shipAndInvoiceActionSalesOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SalesOrderApi - factory interface
 * @export
 */
export const SalesOrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalesOrderApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type salesOrder in Dynamics 365 Business Central
         * @param {SalesOrderApiDeleteSalesOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesOrder(requestParameters: SalesOrderApiDeleteSalesOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSalesOrder(requestParameters.companyId, requestParameters.salesOrderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesOrder for Dynamics 365 Business Central.
         * @param {SalesOrderApiGetSalesOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesOrder(requestParameters: SalesOrderApiGetSalesOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesOrder> {
            return localVarFp.getSalesOrder(requestParameters.companyId, requestParameters.salesOrderId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of salesOrders
         * @param {SalesOrderApiListSalesOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesOrders(requestParameters: SalesOrderApiListSalesOrdersRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListSalesOrders200Response> {
            return localVarFp.listSalesOrders(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type salesOrder in Dynamics 365 Business Central
         * @param {SalesOrderApiPatchSalesOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesOrder(requestParameters: SalesOrderApiPatchSalesOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesOrder> {
            return localVarFp.patchSalesOrder(requestParameters.companyId, requestParameters.salesOrderId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type salesOrder in Dynamics 365 Business Central
         * @param {SalesOrderApiPostSalesOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesOrder(requestParameters: SalesOrderApiPostSalesOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesOrder> {
            return localVarFp.postSalesOrder(requestParameters.companyId, requestParameters.contentType, requestParameters.postSalesOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Performs the shipAndInvoice action for salesOrders entity
         * @param {SalesOrderApiShipAndInvoiceActionSalesOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipAndInvoiceActionSalesOrders(requestParameters: SalesOrderApiShipAndInvoiceActionSalesOrdersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.shipAndInvoiceActionSalesOrders(requestParameters.companyId, requestParameters.salesOrderId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteSalesOrder operation in SalesOrderApi.
 * @export
 * @interface SalesOrderApiDeleteSalesOrderRequest
 */
export interface SalesOrderApiDeleteSalesOrderRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesOrderApiDeleteSalesOrder
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesOrder
     * @type {string}
     * @memberof SalesOrderApiDeleteSalesOrder
     */
    readonly salesOrderId: string
}

/**
 * Request parameters for getSalesOrder operation in SalesOrderApi.
 * @export
 * @interface SalesOrderApiGetSalesOrderRequest
 */
export interface SalesOrderApiGetSalesOrderRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesOrderApiGetSalesOrder
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesOrder
     * @type {string}
     * @memberof SalesOrderApiGetSalesOrder
     */
    readonly salesOrderId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'salesOrderLines' | 'customer' | 'currency' | 'paymentTerm' | 'shipmentMethod'>}
     * @memberof SalesOrderApiGetSalesOrder
     */
    readonly $expand?: Array<GetSalesOrderExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'externalDocumentNumber' | 'orderDate' | 'customerId' | 'contactId' | 'customerNumber' | 'customerName' | 'billToName' | 'billToCustomerId' | 'billToCustomerNumber' | 'shipToName' | 'shipToContact' | 'sellingPostalAddress' | 'billingPostalAddress' | 'shippingPostalAddress' | 'currencyId' | 'currencyCode' | 'pricesIncludeTax' | 'paymentTermsId' | 'shipmentMethodId' | 'salesperson' | 'partialShipping' | 'requestedDeliveryDate' | 'discountAmount' | 'discountAppliedBeforeTax' | 'totalAmountExcludingTax' | 'totalTaxAmount' | 'totalAmountIncludingTax' | 'fullyShipped' | 'status' | 'lastModifiedDateTime' | 'phoneNumber' | 'email'>}
     * @memberof SalesOrderApiGetSalesOrder
     */
    readonly $select?: Array<GetSalesOrderSelectEnum>
}

/**
 * Request parameters for listSalesOrders operation in SalesOrderApi.
 * @export
 * @interface SalesOrderApiListSalesOrdersRequest
 */
export interface SalesOrderApiListSalesOrdersRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesOrderApiListSalesOrders
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof SalesOrderApiListSalesOrders
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof SalesOrderApiListSalesOrders
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof SalesOrderApiListSalesOrders
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof SalesOrderApiListSalesOrders
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'salesOrderLines' | 'customer' | 'currency' | 'paymentTerm' | 'shipmentMethod'>}
     * @memberof SalesOrderApiListSalesOrders
     */
    readonly $expand?: Array<ListSalesOrdersExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'externalDocumentNumber' | 'orderDate' | 'customerId' | 'contactId' | 'customerNumber' | 'customerName' | 'billToName' | 'billToCustomerId' | 'billToCustomerNumber' | 'shipToName' | 'shipToContact' | 'sellingPostalAddress' | 'billingPostalAddress' | 'shippingPostalAddress' | 'currencyId' | 'currencyCode' | 'pricesIncludeTax' | 'paymentTermsId' | 'shipmentMethodId' | 'salesperson' | 'partialShipping' | 'requestedDeliveryDate' | 'discountAmount' | 'discountAppliedBeforeTax' | 'totalAmountExcludingTax' | 'totalTaxAmount' | 'totalAmountIncludingTax' | 'fullyShipped' | 'status' | 'lastModifiedDateTime' | 'phoneNumber' | 'email'>}
     * @memberof SalesOrderApiListSalesOrders
     */
    readonly $select?: Array<ListSalesOrdersSelectEnum>
}

/**
 * Request parameters for patchSalesOrder operation in SalesOrderApi.
 * @export
 * @interface SalesOrderApiPatchSalesOrderRequest
 */
export interface SalesOrderApiPatchSalesOrderRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesOrderApiPatchSalesOrder
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesOrder
     * @type {string}
     * @memberof SalesOrderApiPatchSalesOrder
     */
    readonly salesOrderId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesOrderApiPatchSalesOrder
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof SalesOrderApiPatchSalesOrder
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostSalesOrderRequest}
     * @memberof SalesOrderApiPatchSalesOrder
     */
    readonly postSalesOrderRequest: PostSalesOrderRequest
}

/**
 * Request parameters for postSalesOrder operation in SalesOrderApi.
 * @export
 * @interface SalesOrderApiPostSalesOrderRequest
 */
export interface SalesOrderApiPostSalesOrderRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesOrderApiPostSalesOrder
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesOrderApiPostSalesOrder
     */
    readonly contentType: string

    /**
     * 
     * @type {PostSalesOrderRequest}
     * @memberof SalesOrderApiPostSalesOrder
     */
    readonly postSalesOrderRequest: PostSalesOrderRequest
}

/**
 * Request parameters for shipAndInvoiceActionSalesOrders operation in SalesOrderApi.
 * @export
 * @interface SalesOrderApiShipAndInvoiceActionSalesOrdersRequest
 */
export interface SalesOrderApiShipAndInvoiceActionSalesOrdersRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesOrderApiShipAndInvoiceActionSalesOrders
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesOrder
     * @type {string}
     * @memberof SalesOrderApiShipAndInvoiceActionSalesOrders
     */
    readonly salesOrderId: string
}

/**
 * SalesOrderApi - object-oriented interface
 * @export
 * @class SalesOrderApi
 * @extends {BaseAPI}
 */
export class SalesOrderApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type salesOrder in Dynamics 365 Business Central
     * @param {SalesOrderApiDeleteSalesOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderApi
     */
    public deleteSalesOrder(requestParameters: SalesOrderApiDeleteSalesOrderRequest, options?: RawAxiosRequestConfig) {
        return SalesOrderApiFp(this.configuration).deleteSalesOrder(requestParameters.companyId, requestParameters.salesOrderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type salesOrder for Dynamics 365 Business Central.
     * @param {SalesOrderApiGetSalesOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderApi
     */
    public getSalesOrder(requestParameters: SalesOrderApiGetSalesOrderRequest, options?: RawAxiosRequestConfig) {
        return SalesOrderApiFp(this.configuration).getSalesOrder(requestParameters.companyId, requestParameters.salesOrderId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of salesOrders
     * @param {SalesOrderApiListSalesOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderApi
     */
    public listSalesOrders(requestParameters: SalesOrderApiListSalesOrdersRequest, options?: RawAxiosRequestConfig) {
        return SalesOrderApiFp(this.configuration).listSalesOrders(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type salesOrder in Dynamics 365 Business Central
     * @param {SalesOrderApiPatchSalesOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderApi
     */
    public patchSalesOrder(requestParameters: SalesOrderApiPatchSalesOrderRequest, options?: RawAxiosRequestConfig) {
        return SalesOrderApiFp(this.configuration).patchSalesOrder(requestParameters.companyId, requestParameters.salesOrderId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type salesOrder in Dynamics 365 Business Central
     * @param {SalesOrderApiPostSalesOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderApi
     */
    public postSalesOrder(requestParameters: SalesOrderApiPostSalesOrderRequest, options?: RawAxiosRequestConfig) {
        return SalesOrderApiFp(this.configuration).postSalesOrder(requestParameters.companyId, requestParameters.contentType, requestParameters.postSalesOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Performs the shipAndInvoice action for salesOrders entity
     * @param {SalesOrderApiShipAndInvoiceActionSalesOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderApi
     */
    public shipAndInvoiceActionSalesOrders(requestParameters: SalesOrderApiShipAndInvoiceActionSalesOrdersRequest, options?: RawAxiosRequestConfig) {
        return SalesOrderApiFp(this.configuration).shipAndInvoiceActionSalesOrders(requestParameters.companyId, requestParameters.salesOrderId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetSalesOrderExpandEnum = {
    SalesOrderLines: 'salesOrderLines',
    Customer: 'customer',
    Currency: 'currency',
    PaymentTerm: 'paymentTerm',
    ShipmentMethod: 'shipmentMethod'
} as const;
export type GetSalesOrderExpandEnum = typeof GetSalesOrderExpandEnum[keyof typeof GetSalesOrderExpandEnum];
/**
 * @export
 */
export const GetSalesOrderSelectEnum = {
    Id: 'id',
    Number: 'number',
    ExternalDocumentNumber: 'externalDocumentNumber',
    OrderDate: 'orderDate',
    CustomerId: 'customerId',
    ContactId: 'contactId',
    CustomerNumber: 'customerNumber',
    CustomerName: 'customerName',
    BillToName: 'billToName',
    BillToCustomerId: 'billToCustomerId',
    BillToCustomerNumber: 'billToCustomerNumber',
    ShipToName: 'shipToName',
    ShipToContact: 'shipToContact',
    SellingPostalAddress: 'sellingPostalAddress',
    BillingPostalAddress: 'billingPostalAddress',
    ShippingPostalAddress: 'shippingPostalAddress',
    CurrencyId: 'currencyId',
    CurrencyCode: 'currencyCode',
    PricesIncludeTax: 'pricesIncludeTax',
    PaymentTermsId: 'paymentTermsId',
    ShipmentMethodId: 'shipmentMethodId',
    Salesperson: 'salesperson',
    PartialShipping: 'partialShipping',
    RequestedDeliveryDate: 'requestedDeliveryDate',
    DiscountAmount: 'discountAmount',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    TotalAmountExcludingTax: 'totalAmountExcludingTax',
    TotalTaxAmount: 'totalTaxAmount',
    TotalAmountIncludingTax: 'totalAmountIncludingTax',
    FullyShipped: 'fullyShipped',
    Status: 'status',
    LastModifiedDateTime: 'lastModifiedDateTime',
    PhoneNumber: 'phoneNumber',
    Email: 'email'
} as const;
export type GetSalesOrderSelectEnum = typeof GetSalesOrderSelectEnum[keyof typeof GetSalesOrderSelectEnum];
/**
 * @export
 */
export const ListSalesOrdersExpandEnum = {
    SalesOrderLines: 'salesOrderLines',
    Customer: 'customer',
    Currency: 'currency',
    PaymentTerm: 'paymentTerm',
    ShipmentMethod: 'shipmentMethod'
} as const;
export type ListSalesOrdersExpandEnum = typeof ListSalesOrdersExpandEnum[keyof typeof ListSalesOrdersExpandEnum];
/**
 * @export
 */
export const ListSalesOrdersSelectEnum = {
    Id: 'id',
    Number: 'number',
    ExternalDocumentNumber: 'externalDocumentNumber',
    OrderDate: 'orderDate',
    CustomerId: 'customerId',
    ContactId: 'contactId',
    CustomerNumber: 'customerNumber',
    CustomerName: 'customerName',
    BillToName: 'billToName',
    BillToCustomerId: 'billToCustomerId',
    BillToCustomerNumber: 'billToCustomerNumber',
    ShipToName: 'shipToName',
    ShipToContact: 'shipToContact',
    SellingPostalAddress: 'sellingPostalAddress',
    BillingPostalAddress: 'billingPostalAddress',
    ShippingPostalAddress: 'shippingPostalAddress',
    CurrencyId: 'currencyId',
    CurrencyCode: 'currencyCode',
    PricesIncludeTax: 'pricesIncludeTax',
    PaymentTermsId: 'paymentTermsId',
    ShipmentMethodId: 'shipmentMethodId',
    Salesperson: 'salesperson',
    PartialShipping: 'partialShipping',
    RequestedDeliveryDate: 'requestedDeliveryDate',
    DiscountAmount: 'discountAmount',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    TotalAmountExcludingTax: 'totalAmountExcludingTax',
    TotalTaxAmount: 'totalTaxAmount',
    TotalAmountIncludingTax: 'totalAmountIncludingTax',
    FullyShipped: 'fullyShipped',
    Status: 'status',
    LastModifiedDateTime: 'lastModifiedDateTime',
    PhoneNumber: 'phoneNumber',
    Email: 'email'
} as const;
export type ListSalesOrdersSelectEnum = typeof ListSalesOrdersSelectEnum[keyof typeof ListSalesOrdersSelectEnum];
