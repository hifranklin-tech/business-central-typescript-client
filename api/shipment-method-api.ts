/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ListShipmentMethods200Response } from '../model';
// @ts-ignore
import type { PostShipmentMethodRequest } from '../model';
// @ts-ignore
import type { ShipmentMethod } from '../model';
/**
 * ShipmentMethodApi - axios parameter creator
 * @export
 */
export const ShipmentMethodApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type shipmentMethod in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} shipmentMethodId (v1.0) id for shipmentMethod
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShipmentMethod: async (companyId: string, shipmentMethodId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteShipmentMethod', 'companyId', companyId)
            // verify required parameter 'shipmentMethodId' is not null or undefined
            assertParamExists('deleteShipmentMethod', 'shipmentMethodId', shipmentMethodId)
            const localVarPath = `/companies({company_id})/shipmentMethods({shipmentMethod_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"shipmentMethod_id"}}`, encodeURIComponent(String(shipmentMethodId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type shipmentMethod for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} shipmentMethodId (v1.0) id for shipmentMethod
         * @param {Array<GetShipmentMethodSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipmentMethod: async (companyId: string, shipmentMethodId: string, $select?: Array<GetShipmentMethodSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getShipmentMethod', 'companyId', companyId)
            // verify required parameter 'shipmentMethodId' is not null or undefined
            assertParamExists('getShipmentMethod', 'shipmentMethodId', shipmentMethodId)
            const localVarPath = `/companies({company_id})/shipmentMethods({shipmentMethod_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"shipmentMethod_id"}}`, encodeURIComponent(String(shipmentMethodId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of shipmentMethods
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListShipmentMethodsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShipmentMethods: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListShipmentMethodsSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listShipmentMethods', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/shipmentMethods`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type shipmentMethod in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} shipmentMethodId (v1.0) id for shipmentMethod
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostShipmentMethodRequest} postShipmentMethodRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchShipmentMethod: async (companyId: string, shipmentMethodId: string, contentType: string, ifMatch: string, postShipmentMethodRequest: PostShipmentMethodRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchShipmentMethod', 'companyId', companyId)
            // verify required parameter 'shipmentMethodId' is not null or undefined
            assertParamExists('patchShipmentMethod', 'shipmentMethodId', shipmentMethodId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchShipmentMethod', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchShipmentMethod', 'ifMatch', ifMatch)
            // verify required parameter 'postShipmentMethodRequest' is not null or undefined
            assertParamExists('patchShipmentMethod', 'postShipmentMethodRequest', postShipmentMethodRequest)
            const localVarPath = `/companies({company_id})/shipmentMethods({shipmentMethod_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"shipmentMethod_id"}}`, encodeURIComponent(String(shipmentMethodId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postShipmentMethodRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type shipmentMethod in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostShipmentMethodRequest} postShipmentMethodRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postShipmentMethod: async (companyId: string, contentType: string, postShipmentMethodRequest: PostShipmentMethodRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postShipmentMethod', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postShipmentMethod', 'contentType', contentType)
            // verify required parameter 'postShipmentMethodRequest' is not null or undefined
            assertParamExists('postShipmentMethod', 'postShipmentMethodRequest', postShipmentMethodRequest)
            const localVarPath = `/companies({company_id})/shipmentMethods`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postShipmentMethodRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShipmentMethodApi - functional programming interface
 * @export
 */
export const ShipmentMethodApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShipmentMethodApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type shipmentMethod in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} shipmentMethodId (v1.0) id for shipmentMethod
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteShipmentMethod(companyId: string, shipmentMethodId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteShipmentMethod(companyId, shipmentMethodId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShipmentMethodApi.deleteShipmentMethod']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type shipmentMethod for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} shipmentMethodId (v1.0) id for shipmentMethod
         * @param {Array<GetShipmentMethodSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShipmentMethod(companyId: string, shipmentMethodId: string, $select?: Array<GetShipmentMethodSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShipmentMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShipmentMethod(companyId, shipmentMethodId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShipmentMethodApi.getShipmentMethod']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of shipmentMethods
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListShipmentMethodsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listShipmentMethods(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListShipmentMethodsSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListShipmentMethods200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listShipmentMethods(companyId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShipmentMethodApi.listShipmentMethods']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type shipmentMethod in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} shipmentMethodId (v1.0) id for shipmentMethod
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostShipmentMethodRequest} postShipmentMethodRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchShipmentMethod(companyId: string, shipmentMethodId: string, contentType: string, ifMatch: string, postShipmentMethodRequest: PostShipmentMethodRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShipmentMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchShipmentMethod(companyId, shipmentMethodId, contentType, ifMatch, postShipmentMethodRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShipmentMethodApi.patchShipmentMethod']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type shipmentMethod in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostShipmentMethodRequest} postShipmentMethodRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postShipmentMethod(companyId: string, contentType: string, postShipmentMethodRequest: PostShipmentMethodRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShipmentMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postShipmentMethod(companyId, contentType, postShipmentMethodRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShipmentMethodApi.postShipmentMethod']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ShipmentMethodApi - factory interface
 * @export
 */
export const ShipmentMethodApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShipmentMethodApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type shipmentMethod in Dynamics 365 Business Central
         * @param {ShipmentMethodApiDeleteShipmentMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShipmentMethod(requestParameters: ShipmentMethodApiDeleteShipmentMethodRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteShipmentMethod(requestParameters.companyId, requestParameters.shipmentMethodId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type shipmentMethod for Dynamics 365 Business Central.
         * @param {ShipmentMethodApiGetShipmentMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipmentMethod(requestParameters: ShipmentMethodApiGetShipmentMethodRequest, options?: RawAxiosRequestConfig): AxiosPromise<ShipmentMethod> {
            return localVarFp.getShipmentMethod(requestParameters.companyId, requestParameters.shipmentMethodId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of shipmentMethods
         * @param {ShipmentMethodApiListShipmentMethodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listShipmentMethods(requestParameters: ShipmentMethodApiListShipmentMethodsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListShipmentMethods200Response> {
            return localVarFp.listShipmentMethods(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type shipmentMethod in Dynamics 365 Business Central
         * @param {ShipmentMethodApiPatchShipmentMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchShipmentMethod(requestParameters: ShipmentMethodApiPatchShipmentMethodRequest, options?: RawAxiosRequestConfig): AxiosPromise<ShipmentMethod> {
            return localVarFp.patchShipmentMethod(requestParameters.companyId, requestParameters.shipmentMethodId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postShipmentMethodRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type shipmentMethod in Dynamics 365 Business Central
         * @param {ShipmentMethodApiPostShipmentMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postShipmentMethod(requestParameters: ShipmentMethodApiPostShipmentMethodRequest, options?: RawAxiosRequestConfig): AxiosPromise<ShipmentMethod> {
            return localVarFp.postShipmentMethod(requestParameters.companyId, requestParameters.contentType, requestParameters.postShipmentMethodRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteShipmentMethod operation in ShipmentMethodApi.
 * @export
 * @interface ShipmentMethodApiDeleteShipmentMethodRequest
 */
export interface ShipmentMethodApiDeleteShipmentMethodRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof ShipmentMethodApiDeleteShipmentMethod
     */
    readonly companyId: string

    /**
     * (v1.0) id for shipmentMethod
     * @type {string}
     * @memberof ShipmentMethodApiDeleteShipmentMethod
     */
    readonly shipmentMethodId: string
}

/**
 * Request parameters for getShipmentMethod operation in ShipmentMethodApi.
 * @export
 * @interface ShipmentMethodApiGetShipmentMethodRequest
 */
export interface ShipmentMethodApiGetShipmentMethodRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof ShipmentMethodApiGetShipmentMethod
     */
    readonly companyId: string

    /**
     * (v1.0) id for shipmentMethod
     * @type {string}
     * @memberof ShipmentMethodApiGetShipmentMethod
     */
    readonly shipmentMethodId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'code' | 'displayName' | 'lastModifiedDateTime'>}
     * @memberof ShipmentMethodApiGetShipmentMethod
     */
    readonly $select?: Array<GetShipmentMethodSelectEnum>
}

/**
 * Request parameters for listShipmentMethods operation in ShipmentMethodApi.
 * @export
 * @interface ShipmentMethodApiListShipmentMethodsRequest
 */
export interface ShipmentMethodApiListShipmentMethodsRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof ShipmentMethodApiListShipmentMethods
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof ShipmentMethodApiListShipmentMethods
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof ShipmentMethodApiListShipmentMethods
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof ShipmentMethodApiListShipmentMethods
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof ShipmentMethodApiListShipmentMethods
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'code' | 'displayName' | 'lastModifiedDateTime'>}
     * @memberof ShipmentMethodApiListShipmentMethods
     */
    readonly $select?: Array<ListShipmentMethodsSelectEnum>
}

/**
 * Request parameters for patchShipmentMethod operation in ShipmentMethodApi.
 * @export
 * @interface ShipmentMethodApiPatchShipmentMethodRequest
 */
export interface ShipmentMethodApiPatchShipmentMethodRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof ShipmentMethodApiPatchShipmentMethod
     */
    readonly companyId: string

    /**
     * (v1.0) id for shipmentMethod
     * @type {string}
     * @memberof ShipmentMethodApiPatchShipmentMethod
     */
    readonly shipmentMethodId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof ShipmentMethodApiPatchShipmentMethod
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof ShipmentMethodApiPatchShipmentMethod
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostShipmentMethodRequest}
     * @memberof ShipmentMethodApiPatchShipmentMethod
     */
    readonly postShipmentMethodRequest: PostShipmentMethodRequest
}

/**
 * Request parameters for postShipmentMethod operation in ShipmentMethodApi.
 * @export
 * @interface ShipmentMethodApiPostShipmentMethodRequest
 */
export interface ShipmentMethodApiPostShipmentMethodRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof ShipmentMethodApiPostShipmentMethod
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof ShipmentMethodApiPostShipmentMethod
     */
    readonly contentType: string

    /**
     * 
     * @type {PostShipmentMethodRequest}
     * @memberof ShipmentMethodApiPostShipmentMethod
     */
    readonly postShipmentMethodRequest: PostShipmentMethodRequest
}

/**
 * ShipmentMethodApi - object-oriented interface
 * @export
 * @class ShipmentMethodApi
 * @extends {BaseAPI}
 */
export class ShipmentMethodApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type shipmentMethod in Dynamics 365 Business Central
     * @param {ShipmentMethodApiDeleteShipmentMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentMethodApi
     */
    public deleteShipmentMethod(requestParameters: ShipmentMethodApiDeleteShipmentMethodRequest, options?: RawAxiosRequestConfig) {
        return ShipmentMethodApiFp(this.configuration).deleteShipmentMethod(requestParameters.companyId, requestParameters.shipmentMethodId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type shipmentMethod for Dynamics 365 Business Central.
     * @param {ShipmentMethodApiGetShipmentMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentMethodApi
     */
    public getShipmentMethod(requestParameters: ShipmentMethodApiGetShipmentMethodRequest, options?: RawAxiosRequestConfig) {
        return ShipmentMethodApiFp(this.configuration).getShipmentMethod(requestParameters.companyId, requestParameters.shipmentMethodId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of shipmentMethods
     * @param {ShipmentMethodApiListShipmentMethodsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentMethodApi
     */
    public listShipmentMethods(requestParameters: ShipmentMethodApiListShipmentMethodsRequest, options?: RawAxiosRequestConfig) {
        return ShipmentMethodApiFp(this.configuration).listShipmentMethods(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type shipmentMethod in Dynamics 365 Business Central
     * @param {ShipmentMethodApiPatchShipmentMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentMethodApi
     */
    public patchShipmentMethod(requestParameters: ShipmentMethodApiPatchShipmentMethodRequest, options?: RawAxiosRequestConfig) {
        return ShipmentMethodApiFp(this.configuration).patchShipmentMethod(requestParameters.companyId, requestParameters.shipmentMethodId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postShipmentMethodRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type shipmentMethod in Dynamics 365 Business Central
     * @param {ShipmentMethodApiPostShipmentMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentMethodApi
     */
    public postShipmentMethod(requestParameters: ShipmentMethodApiPostShipmentMethodRequest, options?: RawAxiosRequestConfig) {
        return ShipmentMethodApiFp(this.configuration).postShipmentMethod(requestParameters.companyId, requestParameters.contentType, requestParameters.postShipmentMethodRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetShipmentMethodSelectEnum = {
    Id: 'id',
    Code: 'code',
    DisplayName: 'displayName',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type GetShipmentMethodSelectEnum = typeof GetShipmentMethodSelectEnum[keyof typeof GetShipmentMethodSelectEnum];
/**
 * @export
 */
export const ListShipmentMethodsSelectEnum = {
    Id: 'id',
    Code: 'code',
    DisplayName: 'displayName',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type ListShipmentMethodsSelectEnum = typeof ListShipmentMethodsSelectEnum[keyof typeof ListShipmentMethodsSelectEnum];
