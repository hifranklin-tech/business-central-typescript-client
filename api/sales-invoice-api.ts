/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ListSalesInvoices200Response } from '../model';
// @ts-ignore
import type { PostSalesInvoiceRequest } from '../model';
// @ts-ignore
import type { SalesInvoice } from '../model';
/**
 * SalesInvoiceApi - axios parameter creator
 * @export
 */
export const SalesInvoiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Performs the cancel action for salesInvoices entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelActionSalesInvoices: async (companyId: string, salesInvoiceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('cancelActionSalesInvoices', 'companyId', companyId)
            // verify required parameter 'salesInvoiceId' is not null or undefined
            assertParamExists('cancelActionSalesInvoices', 'salesInvoiceId', salesInvoiceId)
            const localVarPath = `/companies({company_id})/salesInvoices({salesInvoice_id})/Microsoft.NAV.cancel`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesInvoice_id"}}`, encodeURIComponent(String(salesInvoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Performs the cancelAndSend action for salesInvoices entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAndSendActionSalesInvoices: async (companyId: string, salesInvoiceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('cancelAndSendActionSalesInvoices', 'companyId', companyId)
            // verify required parameter 'salesInvoiceId' is not null or undefined
            assertParamExists('cancelAndSendActionSalesInvoices', 'salesInvoiceId', salesInvoiceId)
            const localVarPath = `/companies({company_id})/salesInvoices({salesInvoice_id})/Microsoft.NAV.cancelAndSend`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesInvoice_id"}}`, encodeURIComponent(String(salesInvoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an object of type salesInvoice in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesInvoice: async (companyId: string, salesInvoiceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteSalesInvoice', 'companyId', companyId)
            // verify required parameter 'salesInvoiceId' is not null or undefined
            assertParamExists('deleteSalesInvoice', 'salesInvoiceId', salesInvoiceId)
            const localVarPath = `/companies({company_id})/salesInvoices({salesInvoice_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesInvoice_id"}}`, encodeURIComponent(String(salesInvoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesInvoice for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {Array<GetSalesInvoiceExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesInvoiceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesInvoice: async (companyId: string, salesInvoiceId: string, $expand?: Array<GetSalesInvoiceExpandEnum>, $select?: Array<GetSalesInvoiceSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSalesInvoice', 'companyId', companyId)
            // verify required parameter 'salesInvoiceId' is not null or undefined
            assertParamExists('getSalesInvoice', 'salesInvoiceId', salesInvoiceId)
            const localVarPath = `/companies({company_id})/salesInvoices({salesInvoice_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesInvoice_id"}}`, encodeURIComponent(String(salesInvoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of salesInvoices
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesInvoicesExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesInvoicesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesInvoices: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesInvoicesExpandEnum>, $select?: Array<ListSalesInvoicesSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listSalesInvoices', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/salesInvoices`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Performs the makeCorrectiveCreditMemo action for salesInvoices entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeCorrectiveCreditMemoActionSalesInvoices: async (companyId: string, salesInvoiceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('makeCorrectiveCreditMemoActionSalesInvoices', 'companyId', companyId)
            // verify required parameter 'salesInvoiceId' is not null or undefined
            assertParamExists('makeCorrectiveCreditMemoActionSalesInvoices', 'salesInvoiceId', salesInvoiceId)
            const localVarPath = `/companies({company_id})/salesInvoices({salesInvoice_id})/Microsoft.NAV.makeCorrectiveCreditMemo`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesInvoice_id"}}`, encodeURIComponent(String(salesInvoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type salesInvoice in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesInvoiceRequest} postSalesInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesInvoice: async (companyId: string, salesInvoiceId: string, contentType: string, ifMatch: string, postSalesInvoiceRequest: PostSalesInvoiceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchSalesInvoice', 'companyId', companyId)
            // verify required parameter 'salesInvoiceId' is not null or undefined
            assertParamExists('patchSalesInvoice', 'salesInvoiceId', salesInvoiceId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchSalesInvoice', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchSalesInvoice', 'ifMatch', ifMatch)
            // verify required parameter 'postSalesInvoiceRequest' is not null or undefined
            assertParamExists('patchSalesInvoice', 'postSalesInvoiceRequest', postSalesInvoiceRequest)
            const localVarPath = `/companies({company_id})/salesInvoices({salesInvoice_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesInvoice_id"}}`, encodeURIComponent(String(salesInvoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesInvoiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Performs the post action for salesInvoices entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postActionSalesInvoices: async (companyId: string, salesInvoiceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postActionSalesInvoices', 'companyId', companyId)
            // verify required parameter 'salesInvoiceId' is not null or undefined
            assertParamExists('postActionSalesInvoices', 'salesInvoiceId', salesInvoiceId)
            const localVarPath = `/companies({company_id})/salesInvoices({salesInvoice_id})/Microsoft.NAV.post`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesInvoice_id"}}`, encodeURIComponent(String(salesInvoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Performs the postAndSend action for salesInvoices entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAndSendActionSalesInvoices: async (companyId: string, salesInvoiceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postAndSendActionSalesInvoices', 'companyId', companyId)
            // verify required parameter 'salesInvoiceId' is not null or undefined
            assertParamExists('postAndSendActionSalesInvoices', 'salesInvoiceId', salesInvoiceId)
            const localVarPath = `/companies({company_id})/salesInvoices({salesInvoice_id})/Microsoft.NAV.postAndSend`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesInvoice_id"}}`, encodeURIComponent(String(salesInvoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type salesInvoice in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesInvoiceRequest} postSalesInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesInvoice: async (companyId: string, contentType: string, postSalesInvoiceRequest: PostSalesInvoiceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postSalesInvoice', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postSalesInvoice', 'contentType', contentType)
            // verify required parameter 'postSalesInvoiceRequest' is not null or undefined
            assertParamExists('postSalesInvoice', 'postSalesInvoiceRequest', postSalesInvoiceRequest)
            const localVarPath = `/companies({company_id})/salesInvoices`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesInvoiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Performs the send action for salesInvoices entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendActionSalesInvoices: async (companyId: string, salesInvoiceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('sendActionSalesInvoices', 'companyId', companyId)
            // verify required parameter 'salesInvoiceId' is not null or undefined
            assertParamExists('sendActionSalesInvoices', 'salesInvoiceId', salesInvoiceId)
            const localVarPath = `/companies({company_id})/salesInvoices({salesInvoice_id})/Microsoft.NAV.send`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesInvoice_id"}}`, encodeURIComponent(String(salesInvoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalesInvoiceApi - functional programming interface
 * @export
 */
export const SalesInvoiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalesInvoiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Performs the cancel action for salesInvoices entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelActionSalesInvoices(companyId: string, salesInvoiceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelActionSalesInvoices(companyId, salesInvoiceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesInvoiceApi.cancelActionSalesInvoices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Performs the cancelAndSend action for salesInvoices entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelAndSendActionSalesInvoices(companyId: string, salesInvoiceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelAndSendActionSalesInvoices(companyId, salesInvoiceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesInvoiceApi.cancelAndSendActionSalesInvoices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes an object of type salesInvoice in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalesInvoice(companyId: string, salesInvoiceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalesInvoice(companyId, salesInvoiceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesInvoiceApi.deleteSalesInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesInvoice for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {Array<GetSalesInvoiceExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesInvoiceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesInvoice(companyId: string, salesInvoiceId: string, $expand?: Array<GetSalesInvoiceExpandEnum>, $select?: Array<GetSalesInvoiceSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesInvoice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesInvoice(companyId, salesInvoiceId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesInvoiceApi.getSalesInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of salesInvoices
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesInvoicesExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesInvoicesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSalesInvoices(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesInvoicesExpandEnum>, $select?: Array<ListSalesInvoicesSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListSalesInvoices200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSalesInvoices(companyId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesInvoiceApi.listSalesInvoices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Performs the makeCorrectiveCreditMemo action for salesInvoices entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async makeCorrectiveCreditMemoActionSalesInvoices(companyId: string, salesInvoiceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.makeCorrectiveCreditMemoActionSalesInvoices(companyId, salesInvoiceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesInvoiceApi.makeCorrectiveCreditMemoActionSalesInvoices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type salesInvoice in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesInvoiceRequest} postSalesInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSalesInvoice(companyId: string, salesInvoiceId: string, contentType: string, ifMatch: string, postSalesInvoiceRequest: PostSalesInvoiceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesInvoice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSalesInvoice(companyId, salesInvoiceId, contentType, ifMatch, postSalesInvoiceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesInvoiceApi.patchSalesInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Performs the post action for salesInvoices entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postActionSalesInvoices(companyId: string, salesInvoiceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postActionSalesInvoices(companyId, salesInvoiceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesInvoiceApi.postActionSalesInvoices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Performs the postAndSend action for salesInvoices entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAndSendActionSalesInvoices(companyId: string, salesInvoiceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAndSendActionSalesInvoices(companyId, salesInvoiceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesInvoiceApi.postAndSendActionSalesInvoices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type salesInvoice in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesInvoiceRequest} postSalesInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSalesInvoice(companyId: string, contentType: string, postSalesInvoiceRequest: PostSalesInvoiceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesInvoice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSalesInvoice(companyId, contentType, postSalesInvoiceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesInvoiceApi.postSalesInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Performs the send action for salesInvoices entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendActionSalesInvoices(companyId: string, salesInvoiceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendActionSalesInvoices(companyId, salesInvoiceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesInvoiceApi.sendActionSalesInvoices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SalesInvoiceApi - factory interface
 * @export
 */
export const SalesInvoiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalesInvoiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Performs the cancel action for salesInvoices entity
         * @param {SalesInvoiceApiCancelActionSalesInvoicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelActionSalesInvoices(requestParameters: SalesInvoiceApiCancelActionSalesInvoicesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cancelActionSalesInvoices(requestParameters.companyId, requestParameters.salesInvoiceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Performs the cancelAndSend action for salesInvoices entity
         * @param {SalesInvoiceApiCancelAndSendActionSalesInvoicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAndSendActionSalesInvoices(requestParameters: SalesInvoiceApiCancelAndSendActionSalesInvoicesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cancelAndSendActionSalesInvoices(requestParameters.companyId, requestParameters.salesInvoiceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an object of type salesInvoice in Dynamics 365 Business Central
         * @param {SalesInvoiceApiDeleteSalesInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesInvoice(requestParameters: SalesInvoiceApiDeleteSalesInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSalesInvoice(requestParameters.companyId, requestParameters.salesInvoiceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesInvoice for Dynamics 365 Business Central.
         * @param {SalesInvoiceApiGetSalesInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesInvoice(requestParameters: SalesInvoiceApiGetSalesInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesInvoice> {
            return localVarFp.getSalesInvoice(requestParameters.companyId, requestParameters.salesInvoiceId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of salesInvoices
         * @param {SalesInvoiceApiListSalesInvoicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesInvoices(requestParameters: SalesInvoiceApiListSalesInvoicesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListSalesInvoices200Response> {
            return localVarFp.listSalesInvoices(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Performs the makeCorrectiveCreditMemo action for salesInvoices entity
         * @param {SalesInvoiceApiMakeCorrectiveCreditMemoActionSalesInvoicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeCorrectiveCreditMemoActionSalesInvoices(requestParameters: SalesInvoiceApiMakeCorrectiveCreditMemoActionSalesInvoicesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.makeCorrectiveCreditMemoActionSalesInvoices(requestParameters.companyId, requestParameters.salesInvoiceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type salesInvoice in Dynamics 365 Business Central
         * @param {SalesInvoiceApiPatchSalesInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesInvoice(requestParameters: SalesInvoiceApiPatchSalesInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesInvoice> {
            return localVarFp.patchSalesInvoice(requestParameters.companyId, requestParameters.salesInvoiceId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesInvoiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Performs the post action for salesInvoices entity
         * @param {SalesInvoiceApiPostActionSalesInvoicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postActionSalesInvoices(requestParameters: SalesInvoiceApiPostActionSalesInvoicesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postActionSalesInvoices(requestParameters.companyId, requestParameters.salesInvoiceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Performs the postAndSend action for salesInvoices entity
         * @param {SalesInvoiceApiPostAndSendActionSalesInvoicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAndSendActionSalesInvoices(requestParameters: SalesInvoiceApiPostAndSendActionSalesInvoicesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postAndSendActionSalesInvoices(requestParameters.companyId, requestParameters.salesInvoiceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type salesInvoice in Dynamics 365 Business Central
         * @param {SalesInvoiceApiPostSalesInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesInvoice(requestParameters: SalesInvoiceApiPostSalesInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesInvoice> {
            return localVarFp.postSalesInvoice(requestParameters.companyId, requestParameters.contentType, requestParameters.postSalesInvoiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Performs the send action for salesInvoices entity
         * @param {SalesInvoiceApiSendActionSalesInvoicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendActionSalesInvoices(requestParameters: SalesInvoiceApiSendActionSalesInvoicesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendActionSalesInvoices(requestParameters.companyId, requestParameters.salesInvoiceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelActionSalesInvoices operation in SalesInvoiceApi.
 * @export
 * @interface SalesInvoiceApiCancelActionSalesInvoicesRequest
 */
export interface SalesInvoiceApiCancelActionSalesInvoicesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesInvoiceApiCancelActionSalesInvoices
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesInvoice
     * @type {string}
     * @memberof SalesInvoiceApiCancelActionSalesInvoices
     */
    readonly salesInvoiceId: string
}

/**
 * Request parameters for cancelAndSendActionSalesInvoices operation in SalesInvoiceApi.
 * @export
 * @interface SalesInvoiceApiCancelAndSendActionSalesInvoicesRequest
 */
export interface SalesInvoiceApiCancelAndSendActionSalesInvoicesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesInvoiceApiCancelAndSendActionSalesInvoices
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesInvoice
     * @type {string}
     * @memberof SalesInvoiceApiCancelAndSendActionSalesInvoices
     */
    readonly salesInvoiceId: string
}

/**
 * Request parameters for deleteSalesInvoice operation in SalesInvoiceApi.
 * @export
 * @interface SalesInvoiceApiDeleteSalesInvoiceRequest
 */
export interface SalesInvoiceApiDeleteSalesInvoiceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesInvoiceApiDeleteSalesInvoice
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesInvoice
     * @type {string}
     * @memberof SalesInvoiceApiDeleteSalesInvoice
     */
    readonly salesInvoiceId: string
}

/**
 * Request parameters for getSalesInvoice operation in SalesInvoiceApi.
 * @export
 * @interface SalesInvoiceApiGetSalesInvoiceRequest
 */
export interface SalesInvoiceApiGetSalesInvoiceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesInvoiceApiGetSalesInvoice
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesInvoice
     * @type {string}
     * @memberof SalesInvoiceApiGetSalesInvoice
     */
    readonly salesInvoiceId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'salesInvoiceLines' | 'pdfDocument' | 'customer' | 'currency' | 'paymentTerm' | 'shipmentMethod'>}
     * @memberof SalesInvoiceApiGetSalesInvoice
     */
    readonly $expand?: Array<GetSalesInvoiceExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'externalDocumentNumber' | 'invoiceDate' | 'dueDate' | 'customerPurchaseOrderReference' | 'customerId' | 'contactId' | 'customerNumber' | 'customerName' | 'billToName' | 'billToCustomerId' | 'billToCustomerNumber' | 'shipToName' | 'shipToContact' | 'sellingPostalAddress' | 'billingPostalAddress' | 'shippingPostalAddress' | 'currencyId' | 'currencyCode' | 'orderId' | 'orderNumber' | 'paymentTermsId' | 'shipmentMethodId' | 'salesperson' | 'pricesIncludeTax' | 'remainingAmount' | 'discountAmount' | 'discountAppliedBeforeTax' | 'totalAmountExcludingTax' | 'totalTaxAmount' | 'totalAmountIncludingTax' | 'status' | 'lastModifiedDateTime' | 'phoneNumber' | 'email'>}
     * @memberof SalesInvoiceApiGetSalesInvoice
     */
    readonly $select?: Array<GetSalesInvoiceSelectEnum>
}

/**
 * Request parameters for listSalesInvoices operation in SalesInvoiceApi.
 * @export
 * @interface SalesInvoiceApiListSalesInvoicesRequest
 */
export interface SalesInvoiceApiListSalesInvoicesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesInvoiceApiListSalesInvoices
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof SalesInvoiceApiListSalesInvoices
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof SalesInvoiceApiListSalesInvoices
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof SalesInvoiceApiListSalesInvoices
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof SalesInvoiceApiListSalesInvoices
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'salesInvoiceLines' | 'pdfDocument' | 'customer' | 'currency' | 'paymentTerm' | 'shipmentMethod'>}
     * @memberof SalesInvoiceApiListSalesInvoices
     */
    readonly $expand?: Array<ListSalesInvoicesExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'externalDocumentNumber' | 'invoiceDate' | 'dueDate' | 'customerPurchaseOrderReference' | 'customerId' | 'contactId' | 'customerNumber' | 'customerName' | 'billToName' | 'billToCustomerId' | 'billToCustomerNumber' | 'shipToName' | 'shipToContact' | 'sellingPostalAddress' | 'billingPostalAddress' | 'shippingPostalAddress' | 'currencyId' | 'currencyCode' | 'orderId' | 'orderNumber' | 'paymentTermsId' | 'shipmentMethodId' | 'salesperson' | 'pricesIncludeTax' | 'remainingAmount' | 'discountAmount' | 'discountAppliedBeforeTax' | 'totalAmountExcludingTax' | 'totalTaxAmount' | 'totalAmountIncludingTax' | 'status' | 'lastModifiedDateTime' | 'phoneNumber' | 'email'>}
     * @memberof SalesInvoiceApiListSalesInvoices
     */
    readonly $select?: Array<ListSalesInvoicesSelectEnum>
}

/**
 * Request parameters for makeCorrectiveCreditMemoActionSalesInvoices operation in SalesInvoiceApi.
 * @export
 * @interface SalesInvoiceApiMakeCorrectiveCreditMemoActionSalesInvoicesRequest
 */
export interface SalesInvoiceApiMakeCorrectiveCreditMemoActionSalesInvoicesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesInvoiceApiMakeCorrectiveCreditMemoActionSalesInvoices
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesInvoice
     * @type {string}
     * @memberof SalesInvoiceApiMakeCorrectiveCreditMemoActionSalesInvoices
     */
    readonly salesInvoiceId: string
}

/**
 * Request parameters for patchSalesInvoice operation in SalesInvoiceApi.
 * @export
 * @interface SalesInvoiceApiPatchSalesInvoiceRequest
 */
export interface SalesInvoiceApiPatchSalesInvoiceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesInvoiceApiPatchSalesInvoice
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesInvoice
     * @type {string}
     * @memberof SalesInvoiceApiPatchSalesInvoice
     */
    readonly salesInvoiceId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesInvoiceApiPatchSalesInvoice
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof SalesInvoiceApiPatchSalesInvoice
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostSalesInvoiceRequest}
     * @memberof SalesInvoiceApiPatchSalesInvoice
     */
    readonly postSalesInvoiceRequest: PostSalesInvoiceRequest
}

/**
 * Request parameters for postActionSalesInvoices operation in SalesInvoiceApi.
 * @export
 * @interface SalesInvoiceApiPostActionSalesInvoicesRequest
 */
export interface SalesInvoiceApiPostActionSalesInvoicesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesInvoiceApiPostActionSalesInvoices
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesInvoice
     * @type {string}
     * @memberof SalesInvoiceApiPostActionSalesInvoices
     */
    readonly salesInvoiceId: string
}

/**
 * Request parameters for postAndSendActionSalesInvoices operation in SalesInvoiceApi.
 * @export
 * @interface SalesInvoiceApiPostAndSendActionSalesInvoicesRequest
 */
export interface SalesInvoiceApiPostAndSendActionSalesInvoicesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesInvoiceApiPostAndSendActionSalesInvoices
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesInvoice
     * @type {string}
     * @memberof SalesInvoiceApiPostAndSendActionSalesInvoices
     */
    readonly salesInvoiceId: string
}

/**
 * Request parameters for postSalesInvoice operation in SalesInvoiceApi.
 * @export
 * @interface SalesInvoiceApiPostSalesInvoiceRequest
 */
export interface SalesInvoiceApiPostSalesInvoiceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesInvoiceApiPostSalesInvoice
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesInvoiceApiPostSalesInvoice
     */
    readonly contentType: string

    /**
     * 
     * @type {PostSalesInvoiceRequest}
     * @memberof SalesInvoiceApiPostSalesInvoice
     */
    readonly postSalesInvoiceRequest: PostSalesInvoiceRequest
}

/**
 * Request parameters for sendActionSalesInvoices operation in SalesInvoiceApi.
 * @export
 * @interface SalesInvoiceApiSendActionSalesInvoicesRequest
 */
export interface SalesInvoiceApiSendActionSalesInvoicesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesInvoiceApiSendActionSalesInvoices
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesInvoice
     * @type {string}
     * @memberof SalesInvoiceApiSendActionSalesInvoices
     */
    readonly salesInvoiceId: string
}

/**
 * SalesInvoiceApi - object-oriented interface
 * @export
 * @class SalesInvoiceApi
 * @extends {BaseAPI}
 */
export class SalesInvoiceApi extends BaseAPI {
    /**
     * 
     * @summary Performs the cancel action for salesInvoices entity
     * @param {SalesInvoiceApiCancelActionSalesInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesInvoiceApi
     */
    public cancelActionSalesInvoices(requestParameters: SalesInvoiceApiCancelActionSalesInvoicesRequest, options?: RawAxiosRequestConfig) {
        return SalesInvoiceApiFp(this.configuration).cancelActionSalesInvoices(requestParameters.companyId, requestParameters.salesInvoiceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Performs the cancelAndSend action for salesInvoices entity
     * @param {SalesInvoiceApiCancelAndSendActionSalesInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesInvoiceApi
     */
    public cancelAndSendActionSalesInvoices(requestParameters: SalesInvoiceApiCancelAndSendActionSalesInvoicesRequest, options?: RawAxiosRequestConfig) {
        return SalesInvoiceApiFp(this.configuration).cancelAndSendActionSalesInvoices(requestParameters.companyId, requestParameters.salesInvoiceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an object of type salesInvoice in Dynamics 365 Business Central
     * @param {SalesInvoiceApiDeleteSalesInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesInvoiceApi
     */
    public deleteSalesInvoice(requestParameters: SalesInvoiceApiDeleteSalesInvoiceRequest, options?: RawAxiosRequestConfig) {
        return SalesInvoiceApiFp(this.configuration).deleteSalesInvoice(requestParameters.companyId, requestParameters.salesInvoiceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type salesInvoice for Dynamics 365 Business Central.
     * @param {SalesInvoiceApiGetSalesInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesInvoiceApi
     */
    public getSalesInvoice(requestParameters: SalesInvoiceApiGetSalesInvoiceRequest, options?: RawAxiosRequestConfig) {
        return SalesInvoiceApiFp(this.configuration).getSalesInvoice(requestParameters.companyId, requestParameters.salesInvoiceId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of salesInvoices
     * @param {SalesInvoiceApiListSalesInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesInvoiceApi
     */
    public listSalesInvoices(requestParameters: SalesInvoiceApiListSalesInvoicesRequest, options?: RawAxiosRequestConfig) {
        return SalesInvoiceApiFp(this.configuration).listSalesInvoices(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Performs the makeCorrectiveCreditMemo action for salesInvoices entity
     * @param {SalesInvoiceApiMakeCorrectiveCreditMemoActionSalesInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesInvoiceApi
     */
    public makeCorrectiveCreditMemoActionSalesInvoices(requestParameters: SalesInvoiceApiMakeCorrectiveCreditMemoActionSalesInvoicesRequest, options?: RawAxiosRequestConfig) {
        return SalesInvoiceApiFp(this.configuration).makeCorrectiveCreditMemoActionSalesInvoices(requestParameters.companyId, requestParameters.salesInvoiceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type salesInvoice in Dynamics 365 Business Central
     * @param {SalesInvoiceApiPatchSalesInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesInvoiceApi
     */
    public patchSalesInvoice(requestParameters: SalesInvoiceApiPatchSalesInvoiceRequest, options?: RawAxiosRequestConfig) {
        return SalesInvoiceApiFp(this.configuration).patchSalesInvoice(requestParameters.companyId, requestParameters.salesInvoiceId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesInvoiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Performs the post action for salesInvoices entity
     * @param {SalesInvoiceApiPostActionSalesInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesInvoiceApi
     */
    public postActionSalesInvoices(requestParameters: SalesInvoiceApiPostActionSalesInvoicesRequest, options?: RawAxiosRequestConfig) {
        return SalesInvoiceApiFp(this.configuration).postActionSalesInvoices(requestParameters.companyId, requestParameters.salesInvoiceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Performs the postAndSend action for salesInvoices entity
     * @param {SalesInvoiceApiPostAndSendActionSalesInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesInvoiceApi
     */
    public postAndSendActionSalesInvoices(requestParameters: SalesInvoiceApiPostAndSendActionSalesInvoicesRequest, options?: RawAxiosRequestConfig) {
        return SalesInvoiceApiFp(this.configuration).postAndSendActionSalesInvoices(requestParameters.companyId, requestParameters.salesInvoiceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type salesInvoice in Dynamics 365 Business Central
     * @param {SalesInvoiceApiPostSalesInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesInvoiceApi
     */
    public postSalesInvoice(requestParameters: SalesInvoiceApiPostSalesInvoiceRequest, options?: RawAxiosRequestConfig) {
        return SalesInvoiceApiFp(this.configuration).postSalesInvoice(requestParameters.companyId, requestParameters.contentType, requestParameters.postSalesInvoiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Performs the send action for salesInvoices entity
     * @param {SalesInvoiceApiSendActionSalesInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesInvoiceApi
     */
    public sendActionSalesInvoices(requestParameters: SalesInvoiceApiSendActionSalesInvoicesRequest, options?: RawAxiosRequestConfig) {
        return SalesInvoiceApiFp(this.configuration).sendActionSalesInvoices(requestParameters.companyId, requestParameters.salesInvoiceId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetSalesInvoiceExpandEnum = {
    SalesInvoiceLines: 'salesInvoiceLines',
    PdfDocument: 'pdfDocument',
    Customer: 'customer',
    Currency: 'currency',
    PaymentTerm: 'paymentTerm',
    ShipmentMethod: 'shipmentMethod'
} as const;
export type GetSalesInvoiceExpandEnum = typeof GetSalesInvoiceExpandEnum[keyof typeof GetSalesInvoiceExpandEnum];
/**
 * @export
 */
export const GetSalesInvoiceSelectEnum = {
    Id: 'id',
    Number: 'number',
    ExternalDocumentNumber: 'externalDocumentNumber',
    InvoiceDate: 'invoiceDate',
    DueDate: 'dueDate',
    CustomerPurchaseOrderReference: 'customerPurchaseOrderReference',
    CustomerId: 'customerId',
    ContactId: 'contactId',
    CustomerNumber: 'customerNumber',
    CustomerName: 'customerName',
    BillToName: 'billToName',
    BillToCustomerId: 'billToCustomerId',
    BillToCustomerNumber: 'billToCustomerNumber',
    ShipToName: 'shipToName',
    ShipToContact: 'shipToContact',
    SellingPostalAddress: 'sellingPostalAddress',
    BillingPostalAddress: 'billingPostalAddress',
    ShippingPostalAddress: 'shippingPostalAddress',
    CurrencyId: 'currencyId',
    CurrencyCode: 'currencyCode',
    OrderId: 'orderId',
    OrderNumber: 'orderNumber',
    PaymentTermsId: 'paymentTermsId',
    ShipmentMethodId: 'shipmentMethodId',
    Salesperson: 'salesperson',
    PricesIncludeTax: 'pricesIncludeTax',
    RemainingAmount: 'remainingAmount',
    DiscountAmount: 'discountAmount',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    TotalAmountExcludingTax: 'totalAmountExcludingTax',
    TotalTaxAmount: 'totalTaxAmount',
    TotalAmountIncludingTax: 'totalAmountIncludingTax',
    Status: 'status',
    LastModifiedDateTime: 'lastModifiedDateTime',
    PhoneNumber: 'phoneNumber',
    Email: 'email'
} as const;
export type GetSalesInvoiceSelectEnum = typeof GetSalesInvoiceSelectEnum[keyof typeof GetSalesInvoiceSelectEnum];
/**
 * @export
 */
export const ListSalesInvoicesExpandEnum = {
    SalesInvoiceLines: 'salesInvoiceLines',
    PdfDocument: 'pdfDocument',
    Customer: 'customer',
    Currency: 'currency',
    PaymentTerm: 'paymentTerm',
    ShipmentMethod: 'shipmentMethod'
} as const;
export type ListSalesInvoicesExpandEnum = typeof ListSalesInvoicesExpandEnum[keyof typeof ListSalesInvoicesExpandEnum];
/**
 * @export
 */
export const ListSalesInvoicesSelectEnum = {
    Id: 'id',
    Number: 'number',
    ExternalDocumentNumber: 'externalDocumentNumber',
    InvoiceDate: 'invoiceDate',
    DueDate: 'dueDate',
    CustomerPurchaseOrderReference: 'customerPurchaseOrderReference',
    CustomerId: 'customerId',
    ContactId: 'contactId',
    CustomerNumber: 'customerNumber',
    CustomerName: 'customerName',
    BillToName: 'billToName',
    BillToCustomerId: 'billToCustomerId',
    BillToCustomerNumber: 'billToCustomerNumber',
    ShipToName: 'shipToName',
    ShipToContact: 'shipToContact',
    SellingPostalAddress: 'sellingPostalAddress',
    BillingPostalAddress: 'billingPostalAddress',
    ShippingPostalAddress: 'shippingPostalAddress',
    CurrencyId: 'currencyId',
    CurrencyCode: 'currencyCode',
    OrderId: 'orderId',
    OrderNumber: 'orderNumber',
    PaymentTermsId: 'paymentTermsId',
    ShipmentMethodId: 'shipmentMethodId',
    Salesperson: 'salesperson',
    PricesIncludeTax: 'pricesIncludeTax',
    RemainingAmount: 'remainingAmount',
    DiscountAmount: 'discountAmount',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    TotalAmountExcludingTax: 'totalAmountExcludingTax',
    TotalTaxAmount: 'totalTaxAmount',
    TotalAmountIncludingTax: 'totalAmountIncludingTax',
    Status: 'status',
    LastModifiedDateTime: 'lastModifiedDateTime',
    PhoneNumber: 'phoneNumber',
    Email: 'email'
} as const;
export type ListSalesInvoicesSelectEnum = typeof ListSalesInvoicesSelectEnum[keyof typeof ListSalesInvoicesSelectEnum];
