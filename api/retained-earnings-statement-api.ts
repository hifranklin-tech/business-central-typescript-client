/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ListRetainedEarningsStatement200Response } from '../model';
// @ts-ignore
import type { RetainedEarningsStatement } from '../model';
/**
 * RetainedEarningsStatementApi - axios parameter creator
 * @export
 */
export const RetainedEarningsStatementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type retainedEarningsStatement for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {number} retainedEarningsStatementLineNumber (v1.0) lineNumber for retainedEarningsStatement
         * @param {Array<GetRetainedEarningsStatementSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetainedEarningsStatement: async (companyId: string, retainedEarningsStatementLineNumber: number, $select?: Array<GetRetainedEarningsStatementSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getRetainedEarningsStatement', 'companyId', companyId)
            // verify required parameter 'retainedEarningsStatementLineNumber' is not null or undefined
            assertParamExists('getRetainedEarningsStatement', 'retainedEarningsStatementLineNumber', retainedEarningsStatementLineNumber)
            const localVarPath = `/companies({company_id})/retainedEarningsStatement({retainedEarningsStatement_lineNumber})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"retainedEarningsStatement_lineNumber"}}`, encodeURIComponent(String(retainedEarningsStatementLineNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of retainedEarningsStatement
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListRetainedEarningsStatementSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRetainedEarningsStatement: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListRetainedEarningsStatementSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listRetainedEarningsStatement', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/retainedEarningsStatement`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RetainedEarningsStatementApi - functional programming interface
 * @export
 */
export const RetainedEarningsStatementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RetainedEarningsStatementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type retainedEarningsStatement for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {number} retainedEarningsStatementLineNumber (v1.0) lineNumber for retainedEarningsStatement
         * @param {Array<GetRetainedEarningsStatementSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetainedEarningsStatement(companyId: string, retainedEarningsStatementLineNumber: number, $select?: Array<GetRetainedEarningsStatementSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetainedEarningsStatement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetainedEarningsStatement(companyId, retainedEarningsStatementLineNumber, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RetainedEarningsStatementApi.getRetainedEarningsStatement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of retainedEarningsStatement
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListRetainedEarningsStatementSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRetainedEarningsStatement(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListRetainedEarningsStatementSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListRetainedEarningsStatement200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRetainedEarningsStatement(companyId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RetainedEarningsStatementApi.listRetainedEarningsStatement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RetainedEarningsStatementApi - factory interface
 * @export
 */
export const RetainedEarningsStatementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RetainedEarningsStatementApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type retainedEarningsStatement for Dynamics 365 Business Central.
         * @param {RetainedEarningsStatementApiGetRetainedEarningsStatementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetainedEarningsStatement(requestParameters: RetainedEarningsStatementApiGetRetainedEarningsStatementRequest, options?: RawAxiosRequestConfig): AxiosPromise<RetainedEarningsStatement> {
            return localVarFp.getRetainedEarningsStatement(requestParameters.companyId, requestParameters.retainedEarningsStatementLineNumber, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of retainedEarningsStatement
         * @param {RetainedEarningsStatementApiListRetainedEarningsStatementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRetainedEarningsStatement(requestParameters: RetainedEarningsStatementApiListRetainedEarningsStatementRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListRetainedEarningsStatement200Response> {
            return localVarFp.listRetainedEarningsStatement(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getRetainedEarningsStatement operation in RetainedEarningsStatementApi.
 * @export
 * @interface RetainedEarningsStatementApiGetRetainedEarningsStatementRequest
 */
export interface RetainedEarningsStatementApiGetRetainedEarningsStatementRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof RetainedEarningsStatementApiGetRetainedEarningsStatement
     */
    readonly companyId: string

    /**
     * (v1.0) lineNumber for retainedEarningsStatement
     * @type {number}
     * @memberof RetainedEarningsStatementApiGetRetainedEarningsStatement
     */
    readonly retainedEarningsStatementLineNumber: number

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'lineNumber' | 'display' | 'netChange' | 'lineType' | 'indentation' | 'dateFilter'>}
     * @memberof RetainedEarningsStatementApiGetRetainedEarningsStatement
     */
    readonly $select?: Array<GetRetainedEarningsStatementSelectEnum>
}

/**
 * Request parameters for listRetainedEarningsStatement operation in RetainedEarningsStatementApi.
 * @export
 * @interface RetainedEarningsStatementApiListRetainedEarningsStatementRequest
 */
export interface RetainedEarningsStatementApiListRetainedEarningsStatementRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof RetainedEarningsStatementApiListRetainedEarningsStatement
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof RetainedEarningsStatementApiListRetainedEarningsStatement
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof RetainedEarningsStatementApiListRetainedEarningsStatement
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof RetainedEarningsStatementApiListRetainedEarningsStatement
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof RetainedEarningsStatementApiListRetainedEarningsStatement
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'lineNumber' | 'display' | 'netChange' | 'lineType' | 'indentation' | 'dateFilter'>}
     * @memberof RetainedEarningsStatementApiListRetainedEarningsStatement
     */
    readonly $select?: Array<ListRetainedEarningsStatementSelectEnum>
}

/**
 * RetainedEarningsStatementApi - object-oriented interface
 * @export
 * @class RetainedEarningsStatementApi
 * @extends {BaseAPI}
 */
export class RetainedEarningsStatementApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type retainedEarningsStatement for Dynamics 365 Business Central.
     * @param {RetainedEarningsStatementApiGetRetainedEarningsStatementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetainedEarningsStatementApi
     */
    public getRetainedEarningsStatement(requestParameters: RetainedEarningsStatementApiGetRetainedEarningsStatementRequest, options?: RawAxiosRequestConfig) {
        return RetainedEarningsStatementApiFp(this.configuration).getRetainedEarningsStatement(requestParameters.companyId, requestParameters.retainedEarningsStatementLineNumber, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of retainedEarningsStatement
     * @param {RetainedEarningsStatementApiListRetainedEarningsStatementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetainedEarningsStatementApi
     */
    public listRetainedEarningsStatement(requestParameters: RetainedEarningsStatementApiListRetainedEarningsStatementRequest, options?: RawAxiosRequestConfig) {
        return RetainedEarningsStatementApiFp(this.configuration).listRetainedEarningsStatement(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetRetainedEarningsStatementSelectEnum = {
    LineNumber: 'lineNumber',
    Display: 'display',
    NetChange: 'netChange',
    LineType: 'lineType',
    Indentation: 'indentation',
    DateFilter: 'dateFilter'
} as const;
export type GetRetainedEarningsStatementSelectEnum = typeof GetRetainedEarningsStatementSelectEnum[keyof typeof GetRetainedEarningsStatementSelectEnum];
/**
 * @export
 */
export const ListRetainedEarningsStatementSelectEnum = {
    LineNumber: 'lineNumber',
    Display: 'display',
    NetChange: 'netChange',
    LineType: 'lineType',
    Indentation: 'indentation',
    DateFilter: 'dateFilter'
} as const;
export type ListRetainedEarningsStatementSelectEnum = typeof ListRetainedEarningsStatementSelectEnum[keyof typeof ListRetainedEarningsStatementSelectEnum];
