/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ListTimeRegistrationEntriesForEmployee200Response } from '../model';
// @ts-ignore
import type { PostTimeRegistrationEntryForEmployeeRequest } from '../model';
// @ts-ignore
import type { TimeRegistrationEntry } from '../model';
/**
 * TimeRegistrationEntryApi - axios parameter creator
 * @export
 */
export const TimeRegistrationEntryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type timeRegistrationEntry in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} timeRegistrationEntryId (v1.0) id for timeRegistrationEntry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeRegistrationEntry: async (companyId: string, timeRegistrationEntryId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteTimeRegistrationEntry', 'companyId', companyId)
            // verify required parameter 'timeRegistrationEntryId' is not null or undefined
            assertParamExists('deleteTimeRegistrationEntry', 'timeRegistrationEntryId', timeRegistrationEntryId)
            const localVarPath = `/companies({company_id})/timeRegistrationEntries({timeRegistrationEntry_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"timeRegistrationEntry_id"}}`, encodeURIComponent(String(timeRegistrationEntryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an object of type timeRegistrationEntry in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {string} timeRegistrationEntryId (v1.0) id for timeRegistrationEntry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeRegistrationEntryForEmployee: async (companyId: string, employeeId: string, timeRegistrationEntryId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteTimeRegistrationEntryForEmployee', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('deleteTimeRegistrationEntryForEmployee', 'employeeId', employeeId)
            // verify required parameter 'timeRegistrationEntryId' is not null or undefined
            assertParamExists('deleteTimeRegistrationEntryForEmployee', 'timeRegistrationEntryId', timeRegistrationEntryId)
            const localVarPath = `/companies({company_id})/employees({employee_id})/timeRegistrationEntries({timeRegistrationEntry_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)))
                .replace(`{${"timeRegistrationEntry_id"}}`, encodeURIComponent(String(timeRegistrationEntryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type timeRegistrationEntry for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} timeRegistrationEntryId (v1.0) id for timeRegistrationEntry
         * @param {Array<GetTimeRegistrationEntryExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetTimeRegistrationEntrySelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeRegistrationEntry: async (companyId: string, timeRegistrationEntryId: string, $expand?: Array<GetTimeRegistrationEntryExpandEnum>, $select?: Array<GetTimeRegistrationEntrySelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getTimeRegistrationEntry', 'companyId', companyId)
            // verify required parameter 'timeRegistrationEntryId' is not null or undefined
            assertParamExists('getTimeRegistrationEntry', 'timeRegistrationEntryId', timeRegistrationEntryId)
            const localVarPath = `/companies({company_id})/timeRegistrationEntries({timeRegistrationEntry_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"timeRegistrationEntry_id"}}`, encodeURIComponent(String(timeRegistrationEntryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type timeRegistrationEntry for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {string} timeRegistrationEntryId (v1.0) id for timeRegistrationEntry
         * @param {Array<GetTimeRegistrationEntryForEmployeeExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetTimeRegistrationEntryForEmployeeSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeRegistrationEntryForEmployee: async (companyId: string, employeeId: string, timeRegistrationEntryId: string, $expand?: Array<GetTimeRegistrationEntryForEmployeeExpandEnum>, $select?: Array<GetTimeRegistrationEntryForEmployeeSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getTimeRegistrationEntryForEmployee', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getTimeRegistrationEntryForEmployee', 'employeeId', employeeId)
            // verify required parameter 'timeRegistrationEntryId' is not null or undefined
            assertParamExists('getTimeRegistrationEntryForEmployee', 'timeRegistrationEntryId', timeRegistrationEntryId)
            const localVarPath = `/companies({company_id})/employees({employee_id})/timeRegistrationEntries({timeRegistrationEntry_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)))
                .replace(`{${"timeRegistrationEntry_id"}}`, encodeURIComponent(String(timeRegistrationEntryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of timeRegistrationEntries
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListTimeRegistrationEntriesExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListTimeRegistrationEntriesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimeRegistrationEntries: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListTimeRegistrationEntriesExpandEnum>, $select?: Array<ListTimeRegistrationEntriesSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listTimeRegistrationEntries', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/timeRegistrationEntries`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of timeRegistrationEntries
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListTimeRegistrationEntriesForEmployeeExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListTimeRegistrationEntriesForEmployeeSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimeRegistrationEntriesForEmployee: async (companyId: string, employeeId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListTimeRegistrationEntriesForEmployeeExpandEnum>, $select?: Array<ListTimeRegistrationEntriesForEmployeeSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listTimeRegistrationEntriesForEmployee', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('listTimeRegistrationEntriesForEmployee', 'employeeId', employeeId)
            const localVarPath = `/companies({company_id})/employees({employee_id})/timeRegistrationEntries`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type timeRegistrationEntry in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} timeRegistrationEntryId (v1.0) id for timeRegistrationEntry
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostTimeRegistrationEntryForEmployeeRequest} postTimeRegistrationEntryForEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTimeRegistrationEntry: async (companyId: string, timeRegistrationEntryId: string, contentType: string, ifMatch: string, postTimeRegistrationEntryForEmployeeRequest: PostTimeRegistrationEntryForEmployeeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchTimeRegistrationEntry', 'companyId', companyId)
            // verify required parameter 'timeRegistrationEntryId' is not null or undefined
            assertParamExists('patchTimeRegistrationEntry', 'timeRegistrationEntryId', timeRegistrationEntryId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchTimeRegistrationEntry', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchTimeRegistrationEntry', 'ifMatch', ifMatch)
            // verify required parameter 'postTimeRegistrationEntryForEmployeeRequest' is not null or undefined
            assertParamExists('patchTimeRegistrationEntry', 'postTimeRegistrationEntryForEmployeeRequest', postTimeRegistrationEntryForEmployeeRequest)
            const localVarPath = `/companies({company_id})/timeRegistrationEntries({timeRegistrationEntry_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"timeRegistrationEntry_id"}}`, encodeURIComponent(String(timeRegistrationEntryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTimeRegistrationEntryForEmployeeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type timeRegistrationEntry in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {string} timeRegistrationEntryId (v1.0) id for timeRegistrationEntry
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostTimeRegistrationEntryForEmployeeRequest} postTimeRegistrationEntryForEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTimeRegistrationEntryForEmployee: async (companyId: string, employeeId: string, timeRegistrationEntryId: string, contentType: string, ifMatch: string, postTimeRegistrationEntryForEmployeeRequest: PostTimeRegistrationEntryForEmployeeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchTimeRegistrationEntryForEmployee', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('patchTimeRegistrationEntryForEmployee', 'employeeId', employeeId)
            // verify required parameter 'timeRegistrationEntryId' is not null or undefined
            assertParamExists('patchTimeRegistrationEntryForEmployee', 'timeRegistrationEntryId', timeRegistrationEntryId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchTimeRegistrationEntryForEmployee', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchTimeRegistrationEntryForEmployee', 'ifMatch', ifMatch)
            // verify required parameter 'postTimeRegistrationEntryForEmployeeRequest' is not null or undefined
            assertParamExists('patchTimeRegistrationEntryForEmployee', 'postTimeRegistrationEntryForEmployeeRequest', postTimeRegistrationEntryForEmployeeRequest)
            const localVarPath = `/companies({company_id})/employees({employee_id})/timeRegistrationEntries({timeRegistrationEntry_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)))
                .replace(`{${"timeRegistrationEntry_id"}}`, encodeURIComponent(String(timeRegistrationEntryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTimeRegistrationEntryForEmployeeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type timeRegistrationEntry in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostTimeRegistrationEntryForEmployeeRequest} postTimeRegistrationEntryForEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTimeRegistrationEntry: async (companyId: string, contentType: string, postTimeRegistrationEntryForEmployeeRequest: PostTimeRegistrationEntryForEmployeeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postTimeRegistrationEntry', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postTimeRegistrationEntry', 'contentType', contentType)
            // verify required parameter 'postTimeRegistrationEntryForEmployeeRequest' is not null or undefined
            assertParamExists('postTimeRegistrationEntry', 'postTimeRegistrationEntryForEmployeeRequest', postTimeRegistrationEntryForEmployeeRequest)
            const localVarPath = `/companies({company_id})/timeRegistrationEntries`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTimeRegistrationEntryForEmployeeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type timeRegistrationEntry in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {string} contentType (v1.0) application/json
         * @param {PostTimeRegistrationEntryForEmployeeRequest} postTimeRegistrationEntryForEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTimeRegistrationEntryForEmployee: async (companyId: string, employeeId: string, contentType: string, postTimeRegistrationEntryForEmployeeRequest: PostTimeRegistrationEntryForEmployeeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postTimeRegistrationEntryForEmployee', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('postTimeRegistrationEntryForEmployee', 'employeeId', employeeId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postTimeRegistrationEntryForEmployee', 'contentType', contentType)
            // verify required parameter 'postTimeRegistrationEntryForEmployeeRequest' is not null or undefined
            assertParamExists('postTimeRegistrationEntryForEmployee', 'postTimeRegistrationEntryForEmployeeRequest', postTimeRegistrationEntryForEmployeeRequest)
            const localVarPath = `/companies({company_id})/employees({employee_id})/timeRegistrationEntries`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTimeRegistrationEntryForEmployeeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimeRegistrationEntryApi - functional programming interface
 * @export
 */
export const TimeRegistrationEntryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimeRegistrationEntryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type timeRegistrationEntry in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} timeRegistrationEntryId (v1.0) id for timeRegistrationEntry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTimeRegistrationEntry(companyId: string, timeRegistrationEntryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTimeRegistrationEntry(companyId, timeRegistrationEntryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TimeRegistrationEntryApi.deleteTimeRegistrationEntry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes an object of type timeRegistrationEntry in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {string} timeRegistrationEntryId (v1.0) id for timeRegistrationEntry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTimeRegistrationEntryForEmployee(companyId: string, employeeId: string, timeRegistrationEntryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTimeRegistrationEntryForEmployee(companyId, employeeId, timeRegistrationEntryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TimeRegistrationEntryApi.deleteTimeRegistrationEntryForEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type timeRegistrationEntry for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} timeRegistrationEntryId (v1.0) id for timeRegistrationEntry
         * @param {Array<GetTimeRegistrationEntryExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetTimeRegistrationEntrySelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimeRegistrationEntry(companyId: string, timeRegistrationEntryId: string, $expand?: Array<GetTimeRegistrationEntryExpandEnum>, $select?: Array<GetTimeRegistrationEntrySelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeRegistrationEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimeRegistrationEntry(companyId, timeRegistrationEntryId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TimeRegistrationEntryApi.getTimeRegistrationEntry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type timeRegistrationEntry for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {string} timeRegistrationEntryId (v1.0) id for timeRegistrationEntry
         * @param {Array<GetTimeRegistrationEntryForEmployeeExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetTimeRegistrationEntryForEmployeeSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimeRegistrationEntryForEmployee(companyId: string, employeeId: string, timeRegistrationEntryId: string, $expand?: Array<GetTimeRegistrationEntryForEmployeeExpandEnum>, $select?: Array<GetTimeRegistrationEntryForEmployeeSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeRegistrationEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimeRegistrationEntryForEmployee(companyId, employeeId, timeRegistrationEntryId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TimeRegistrationEntryApi.getTimeRegistrationEntryForEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of timeRegistrationEntries
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListTimeRegistrationEntriesExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListTimeRegistrationEntriesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTimeRegistrationEntries(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListTimeRegistrationEntriesExpandEnum>, $select?: Array<ListTimeRegistrationEntriesSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTimeRegistrationEntriesForEmployee200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTimeRegistrationEntries(companyId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TimeRegistrationEntryApi.listTimeRegistrationEntries']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of timeRegistrationEntries
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListTimeRegistrationEntriesForEmployeeExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListTimeRegistrationEntriesForEmployeeSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTimeRegistrationEntriesForEmployee(companyId: string, employeeId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListTimeRegistrationEntriesForEmployeeExpandEnum>, $select?: Array<ListTimeRegistrationEntriesForEmployeeSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTimeRegistrationEntriesForEmployee200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTimeRegistrationEntriesForEmployee(companyId, employeeId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TimeRegistrationEntryApi.listTimeRegistrationEntriesForEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type timeRegistrationEntry in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} timeRegistrationEntryId (v1.0) id for timeRegistrationEntry
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostTimeRegistrationEntryForEmployeeRequest} postTimeRegistrationEntryForEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchTimeRegistrationEntry(companyId: string, timeRegistrationEntryId: string, contentType: string, ifMatch: string, postTimeRegistrationEntryForEmployeeRequest: PostTimeRegistrationEntryForEmployeeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeRegistrationEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchTimeRegistrationEntry(companyId, timeRegistrationEntryId, contentType, ifMatch, postTimeRegistrationEntryForEmployeeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TimeRegistrationEntryApi.patchTimeRegistrationEntry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type timeRegistrationEntry in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {string} timeRegistrationEntryId (v1.0) id for timeRegistrationEntry
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostTimeRegistrationEntryForEmployeeRequest} postTimeRegistrationEntryForEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchTimeRegistrationEntryForEmployee(companyId: string, employeeId: string, timeRegistrationEntryId: string, contentType: string, ifMatch: string, postTimeRegistrationEntryForEmployeeRequest: PostTimeRegistrationEntryForEmployeeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeRegistrationEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchTimeRegistrationEntryForEmployee(companyId, employeeId, timeRegistrationEntryId, contentType, ifMatch, postTimeRegistrationEntryForEmployeeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TimeRegistrationEntryApi.patchTimeRegistrationEntryForEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type timeRegistrationEntry in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostTimeRegistrationEntryForEmployeeRequest} postTimeRegistrationEntryForEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTimeRegistrationEntry(companyId: string, contentType: string, postTimeRegistrationEntryForEmployeeRequest: PostTimeRegistrationEntryForEmployeeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeRegistrationEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTimeRegistrationEntry(companyId, contentType, postTimeRegistrationEntryForEmployeeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TimeRegistrationEntryApi.postTimeRegistrationEntry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type timeRegistrationEntry in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {string} contentType (v1.0) application/json
         * @param {PostTimeRegistrationEntryForEmployeeRequest} postTimeRegistrationEntryForEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTimeRegistrationEntryForEmployee(companyId: string, employeeId: string, contentType: string, postTimeRegistrationEntryForEmployeeRequest: PostTimeRegistrationEntryForEmployeeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeRegistrationEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTimeRegistrationEntryForEmployee(companyId, employeeId, contentType, postTimeRegistrationEntryForEmployeeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TimeRegistrationEntryApi.postTimeRegistrationEntryForEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TimeRegistrationEntryApi - factory interface
 * @export
 */
export const TimeRegistrationEntryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimeRegistrationEntryApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type timeRegistrationEntry in Dynamics 365 Business Central
         * @param {TimeRegistrationEntryApiDeleteTimeRegistrationEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeRegistrationEntry(requestParameters: TimeRegistrationEntryApiDeleteTimeRegistrationEntryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTimeRegistrationEntry(requestParameters.companyId, requestParameters.timeRegistrationEntryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an object of type timeRegistrationEntry in Dynamics 365 Business Central
         * @param {TimeRegistrationEntryApiDeleteTimeRegistrationEntryForEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeRegistrationEntryForEmployee(requestParameters: TimeRegistrationEntryApiDeleteTimeRegistrationEntryForEmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTimeRegistrationEntryForEmployee(requestParameters.companyId, requestParameters.employeeId, requestParameters.timeRegistrationEntryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type timeRegistrationEntry for Dynamics 365 Business Central.
         * @param {TimeRegistrationEntryApiGetTimeRegistrationEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeRegistrationEntry(requestParameters: TimeRegistrationEntryApiGetTimeRegistrationEntryRequest, options?: RawAxiosRequestConfig): AxiosPromise<TimeRegistrationEntry> {
            return localVarFp.getTimeRegistrationEntry(requestParameters.companyId, requestParameters.timeRegistrationEntryId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type timeRegistrationEntry for Dynamics 365 Business Central.
         * @param {TimeRegistrationEntryApiGetTimeRegistrationEntryForEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeRegistrationEntryForEmployee(requestParameters: TimeRegistrationEntryApiGetTimeRegistrationEntryForEmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<TimeRegistrationEntry> {
            return localVarFp.getTimeRegistrationEntryForEmployee(requestParameters.companyId, requestParameters.employeeId, requestParameters.timeRegistrationEntryId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of timeRegistrationEntries
         * @param {TimeRegistrationEntryApiListTimeRegistrationEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimeRegistrationEntries(requestParameters: TimeRegistrationEntryApiListTimeRegistrationEntriesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListTimeRegistrationEntriesForEmployee200Response> {
            return localVarFp.listTimeRegistrationEntries(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of timeRegistrationEntries
         * @param {TimeRegistrationEntryApiListTimeRegistrationEntriesForEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimeRegistrationEntriesForEmployee(requestParameters: TimeRegistrationEntryApiListTimeRegistrationEntriesForEmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListTimeRegistrationEntriesForEmployee200Response> {
            return localVarFp.listTimeRegistrationEntriesForEmployee(requestParameters.companyId, requestParameters.employeeId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type timeRegistrationEntry in Dynamics 365 Business Central
         * @param {TimeRegistrationEntryApiPatchTimeRegistrationEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTimeRegistrationEntry(requestParameters: TimeRegistrationEntryApiPatchTimeRegistrationEntryRequest, options?: RawAxiosRequestConfig): AxiosPromise<TimeRegistrationEntry> {
            return localVarFp.patchTimeRegistrationEntry(requestParameters.companyId, requestParameters.timeRegistrationEntryId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postTimeRegistrationEntryForEmployeeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type timeRegistrationEntry in Dynamics 365 Business Central
         * @param {TimeRegistrationEntryApiPatchTimeRegistrationEntryForEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTimeRegistrationEntryForEmployee(requestParameters: TimeRegistrationEntryApiPatchTimeRegistrationEntryForEmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<TimeRegistrationEntry> {
            return localVarFp.patchTimeRegistrationEntryForEmployee(requestParameters.companyId, requestParameters.employeeId, requestParameters.timeRegistrationEntryId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postTimeRegistrationEntryForEmployeeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type timeRegistrationEntry in Dynamics 365 Business Central
         * @param {TimeRegistrationEntryApiPostTimeRegistrationEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTimeRegistrationEntry(requestParameters: TimeRegistrationEntryApiPostTimeRegistrationEntryRequest, options?: RawAxiosRequestConfig): AxiosPromise<TimeRegistrationEntry> {
            return localVarFp.postTimeRegistrationEntry(requestParameters.companyId, requestParameters.contentType, requestParameters.postTimeRegistrationEntryForEmployeeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type timeRegistrationEntry in Dynamics 365 Business Central
         * @param {TimeRegistrationEntryApiPostTimeRegistrationEntryForEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTimeRegistrationEntryForEmployee(requestParameters: TimeRegistrationEntryApiPostTimeRegistrationEntryForEmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<TimeRegistrationEntry> {
            return localVarFp.postTimeRegistrationEntryForEmployee(requestParameters.companyId, requestParameters.employeeId, requestParameters.contentType, requestParameters.postTimeRegistrationEntryForEmployeeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteTimeRegistrationEntry operation in TimeRegistrationEntryApi.
 * @export
 * @interface TimeRegistrationEntryApiDeleteTimeRegistrationEntryRequest
 */
export interface TimeRegistrationEntryApiDeleteTimeRegistrationEntryRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof TimeRegistrationEntryApiDeleteTimeRegistrationEntry
     */
    readonly companyId: string

    /**
     * (v1.0) id for timeRegistrationEntry
     * @type {string}
     * @memberof TimeRegistrationEntryApiDeleteTimeRegistrationEntry
     */
    readonly timeRegistrationEntryId: string
}

/**
 * Request parameters for deleteTimeRegistrationEntryForEmployee operation in TimeRegistrationEntryApi.
 * @export
 * @interface TimeRegistrationEntryApiDeleteTimeRegistrationEntryForEmployeeRequest
 */
export interface TimeRegistrationEntryApiDeleteTimeRegistrationEntryForEmployeeRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof TimeRegistrationEntryApiDeleteTimeRegistrationEntryForEmployee
     */
    readonly companyId: string

    /**
     * (v1.0) id for employee
     * @type {string}
     * @memberof TimeRegistrationEntryApiDeleteTimeRegistrationEntryForEmployee
     */
    readonly employeeId: string

    /**
     * (v1.0) id for timeRegistrationEntry
     * @type {string}
     * @memberof TimeRegistrationEntryApiDeleteTimeRegistrationEntryForEmployee
     */
    readonly timeRegistrationEntryId: string
}

/**
 * Request parameters for getTimeRegistrationEntry operation in TimeRegistrationEntryApi.
 * @export
 * @interface TimeRegistrationEntryApiGetTimeRegistrationEntryRequest
 */
export interface TimeRegistrationEntryApiGetTimeRegistrationEntryRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof TimeRegistrationEntryApiGetTimeRegistrationEntry
     */
    readonly companyId: string

    /**
     * (v1.0) id for timeRegistrationEntry
     * @type {string}
     * @memberof TimeRegistrationEntryApiGetTimeRegistrationEntry
     */
    readonly timeRegistrationEntryId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'project'>}
     * @memberof TimeRegistrationEntryApiGetTimeRegistrationEntry
     */
    readonly $expand?: Array<GetTimeRegistrationEntryExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'employeeId' | 'employeeNumber' | 'jobId' | 'jobNumber' | 'absence' | 'lineNumber' | 'date' | 'quantity' | 'status' | 'unitOfMeasureId' | 'unitOfMeasure' | 'dimensions' | 'lastModfiedDateTime'>}
     * @memberof TimeRegistrationEntryApiGetTimeRegistrationEntry
     */
    readonly $select?: Array<GetTimeRegistrationEntrySelectEnum>
}

/**
 * Request parameters for getTimeRegistrationEntryForEmployee operation in TimeRegistrationEntryApi.
 * @export
 * @interface TimeRegistrationEntryApiGetTimeRegistrationEntryForEmployeeRequest
 */
export interface TimeRegistrationEntryApiGetTimeRegistrationEntryForEmployeeRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof TimeRegistrationEntryApiGetTimeRegistrationEntryForEmployee
     */
    readonly companyId: string

    /**
     * (v1.0) id for employee
     * @type {string}
     * @memberof TimeRegistrationEntryApiGetTimeRegistrationEntryForEmployee
     */
    readonly employeeId: string

    /**
     * (v1.0) id for timeRegistrationEntry
     * @type {string}
     * @memberof TimeRegistrationEntryApiGetTimeRegistrationEntryForEmployee
     */
    readonly timeRegistrationEntryId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'project'>}
     * @memberof TimeRegistrationEntryApiGetTimeRegistrationEntryForEmployee
     */
    readonly $expand?: Array<GetTimeRegistrationEntryForEmployeeExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'employeeId' | 'employeeNumber' | 'jobId' | 'jobNumber' | 'absence' | 'lineNumber' | 'date' | 'quantity' | 'status' | 'unitOfMeasureId' | 'unitOfMeasure' | 'dimensions' | 'lastModfiedDateTime'>}
     * @memberof TimeRegistrationEntryApiGetTimeRegistrationEntryForEmployee
     */
    readonly $select?: Array<GetTimeRegistrationEntryForEmployeeSelectEnum>
}

/**
 * Request parameters for listTimeRegistrationEntries operation in TimeRegistrationEntryApi.
 * @export
 * @interface TimeRegistrationEntryApiListTimeRegistrationEntriesRequest
 */
export interface TimeRegistrationEntryApiListTimeRegistrationEntriesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof TimeRegistrationEntryApiListTimeRegistrationEntries
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof TimeRegistrationEntryApiListTimeRegistrationEntries
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof TimeRegistrationEntryApiListTimeRegistrationEntries
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof TimeRegistrationEntryApiListTimeRegistrationEntries
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof TimeRegistrationEntryApiListTimeRegistrationEntries
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'project'>}
     * @memberof TimeRegistrationEntryApiListTimeRegistrationEntries
     */
    readonly $expand?: Array<ListTimeRegistrationEntriesExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'employeeId' | 'employeeNumber' | 'jobId' | 'jobNumber' | 'absence' | 'lineNumber' | 'date' | 'quantity' | 'status' | 'unitOfMeasureId' | 'unitOfMeasure' | 'dimensions' | 'lastModfiedDateTime'>}
     * @memberof TimeRegistrationEntryApiListTimeRegistrationEntries
     */
    readonly $select?: Array<ListTimeRegistrationEntriesSelectEnum>
}

/**
 * Request parameters for listTimeRegistrationEntriesForEmployee operation in TimeRegistrationEntryApi.
 * @export
 * @interface TimeRegistrationEntryApiListTimeRegistrationEntriesForEmployeeRequest
 */
export interface TimeRegistrationEntryApiListTimeRegistrationEntriesForEmployeeRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof TimeRegistrationEntryApiListTimeRegistrationEntriesForEmployee
     */
    readonly companyId: string

    /**
     * (v1.0) id for employee
     * @type {string}
     * @memberof TimeRegistrationEntryApiListTimeRegistrationEntriesForEmployee
     */
    readonly employeeId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof TimeRegistrationEntryApiListTimeRegistrationEntriesForEmployee
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof TimeRegistrationEntryApiListTimeRegistrationEntriesForEmployee
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof TimeRegistrationEntryApiListTimeRegistrationEntriesForEmployee
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof TimeRegistrationEntryApiListTimeRegistrationEntriesForEmployee
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'project'>}
     * @memberof TimeRegistrationEntryApiListTimeRegistrationEntriesForEmployee
     */
    readonly $expand?: Array<ListTimeRegistrationEntriesForEmployeeExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'employeeId' | 'employeeNumber' | 'jobId' | 'jobNumber' | 'absence' | 'lineNumber' | 'date' | 'quantity' | 'status' | 'unitOfMeasureId' | 'unitOfMeasure' | 'dimensions' | 'lastModfiedDateTime'>}
     * @memberof TimeRegistrationEntryApiListTimeRegistrationEntriesForEmployee
     */
    readonly $select?: Array<ListTimeRegistrationEntriesForEmployeeSelectEnum>
}

/**
 * Request parameters for patchTimeRegistrationEntry operation in TimeRegistrationEntryApi.
 * @export
 * @interface TimeRegistrationEntryApiPatchTimeRegistrationEntryRequest
 */
export interface TimeRegistrationEntryApiPatchTimeRegistrationEntryRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof TimeRegistrationEntryApiPatchTimeRegistrationEntry
     */
    readonly companyId: string

    /**
     * (v1.0) id for timeRegistrationEntry
     * @type {string}
     * @memberof TimeRegistrationEntryApiPatchTimeRegistrationEntry
     */
    readonly timeRegistrationEntryId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof TimeRegistrationEntryApiPatchTimeRegistrationEntry
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof TimeRegistrationEntryApiPatchTimeRegistrationEntry
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostTimeRegistrationEntryForEmployeeRequest}
     * @memberof TimeRegistrationEntryApiPatchTimeRegistrationEntry
     */
    readonly postTimeRegistrationEntryForEmployeeRequest: PostTimeRegistrationEntryForEmployeeRequest
}

/**
 * Request parameters for patchTimeRegistrationEntryForEmployee operation in TimeRegistrationEntryApi.
 * @export
 * @interface TimeRegistrationEntryApiPatchTimeRegistrationEntryForEmployeeRequest
 */
export interface TimeRegistrationEntryApiPatchTimeRegistrationEntryForEmployeeRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof TimeRegistrationEntryApiPatchTimeRegistrationEntryForEmployee
     */
    readonly companyId: string

    /**
     * (v1.0) id for employee
     * @type {string}
     * @memberof TimeRegistrationEntryApiPatchTimeRegistrationEntryForEmployee
     */
    readonly employeeId: string

    /**
     * (v1.0) id for timeRegistrationEntry
     * @type {string}
     * @memberof TimeRegistrationEntryApiPatchTimeRegistrationEntryForEmployee
     */
    readonly timeRegistrationEntryId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof TimeRegistrationEntryApiPatchTimeRegistrationEntryForEmployee
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof TimeRegistrationEntryApiPatchTimeRegistrationEntryForEmployee
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostTimeRegistrationEntryForEmployeeRequest}
     * @memberof TimeRegistrationEntryApiPatchTimeRegistrationEntryForEmployee
     */
    readonly postTimeRegistrationEntryForEmployeeRequest: PostTimeRegistrationEntryForEmployeeRequest
}

/**
 * Request parameters for postTimeRegistrationEntry operation in TimeRegistrationEntryApi.
 * @export
 * @interface TimeRegistrationEntryApiPostTimeRegistrationEntryRequest
 */
export interface TimeRegistrationEntryApiPostTimeRegistrationEntryRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof TimeRegistrationEntryApiPostTimeRegistrationEntry
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof TimeRegistrationEntryApiPostTimeRegistrationEntry
     */
    readonly contentType: string

    /**
     * 
     * @type {PostTimeRegistrationEntryForEmployeeRequest}
     * @memberof TimeRegistrationEntryApiPostTimeRegistrationEntry
     */
    readonly postTimeRegistrationEntryForEmployeeRequest: PostTimeRegistrationEntryForEmployeeRequest
}

/**
 * Request parameters for postTimeRegistrationEntryForEmployee operation in TimeRegistrationEntryApi.
 * @export
 * @interface TimeRegistrationEntryApiPostTimeRegistrationEntryForEmployeeRequest
 */
export interface TimeRegistrationEntryApiPostTimeRegistrationEntryForEmployeeRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof TimeRegistrationEntryApiPostTimeRegistrationEntryForEmployee
     */
    readonly companyId: string

    /**
     * (v1.0) id for employee
     * @type {string}
     * @memberof TimeRegistrationEntryApiPostTimeRegistrationEntryForEmployee
     */
    readonly employeeId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof TimeRegistrationEntryApiPostTimeRegistrationEntryForEmployee
     */
    readonly contentType: string

    /**
     * 
     * @type {PostTimeRegistrationEntryForEmployeeRequest}
     * @memberof TimeRegistrationEntryApiPostTimeRegistrationEntryForEmployee
     */
    readonly postTimeRegistrationEntryForEmployeeRequest: PostTimeRegistrationEntryForEmployeeRequest
}

/**
 * TimeRegistrationEntryApi - object-oriented interface
 * @export
 * @class TimeRegistrationEntryApi
 * @extends {BaseAPI}
 */
export class TimeRegistrationEntryApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type timeRegistrationEntry in Dynamics 365 Business Central
     * @param {TimeRegistrationEntryApiDeleteTimeRegistrationEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeRegistrationEntryApi
     */
    public deleteTimeRegistrationEntry(requestParameters: TimeRegistrationEntryApiDeleteTimeRegistrationEntryRequest, options?: RawAxiosRequestConfig) {
        return TimeRegistrationEntryApiFp(this.configuration).deleteTimeRegistrationEntry(requestParameters.companyId, requestParameters.timeRegistrationEntryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an object of type timeRegistrationEntry in Dynamics 365 Business Central
     * @param {TimeRegistrationEntryApiDeleteTimeRegistrationEntryForEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeRegistrationEntryApi
     */
    public deleteTimeRegistrationEntryForEmployee(requestParameters: TimeRegistrationEntryApiDeleteTimeRegistrationEntryForEmployeeRequest, options?: RawAxiosRequestConfig) {
        return TimeRegistrationEntryApiFp(this.configuration).deleteTimeRegistrationEntryForEmployee(requestParameters.companyId, requestParameters.employeeId, requestParameters.timeRegistrationEntryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type timeRegistrationEntry for Dynamics 365 Business Central.
     * @param {TimeRegistrationEntryApiGetTimeRegistrationEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeRegistrationEntryApi
     */
    public getTimeRegistrationEntry(requestParameters: TimeRegistrationEntryApiGetTimeRegistrationEntryRequest, options?: RawAxiosRequestConfig) {
        return TimeRegistrationEntryApiFp(this.configuration).getTimeRegistrationEntry(requestParameters.companyId, requestParameters.timeRegistrationEntryId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type timeRegistrationEntry for Dynamics 365 Business Central.
     * @param {TimeRegistrationEntryApiGetTimeRegistrationEntryForEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeRegistrationEntryApi
     */
    public getTimeRegistrationEntryForEmployee(requestParameters: TimeRegistrationEntryApiGetTimeRegistrationEntryForEmployeeRequest, options?: RawAxiosRequestConfig) {
        return TimeRegistrationEntryApiFp(this.configuration).getTimeRegistrationEntryForEmployee(requestParameters.companyId, requestParameters.employeeId, requestParameters.timeRegistrationEntryId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of timeRegistrationEntries
     * @param {TimeRegistrationEntryApiListTimeRegistrationEntriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeRegistrationEntryApi
     */
    public listTimeRegistrationEntries(requestParameters: TimeRegistrationEntryApiListTimeRegistrationEntriesRequest, options?: RawAxiosRequestConfig) {
        return TimeRegistrationEntryApiFp(this.configuration).listTimeRegistrationEntries(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of timeRegistrationEntries
     * @param {TimeRegistrationEntryApiListTimeRegistrationEntriesForEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeRegistrationEntryApi
     */
    public listTimeRegistrationEntriesForEmployee(requestParameters: TimeRegistrationEntryApiListTimeRegistrationEntriesForEmployeeRequest, options?: RawAxiosRequestConfig) {
        return TimeRegistrationEntryApiFp(this.configuration).listTimeRegistrationEntriesForEmployee(requestParameters.companyId, requestParameters.employeeId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type timeRegistrationEntry in Dynamics 365 Business Central
     * @param {TimeRegistrationEntryApiPatchTimeRegistrationEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeRegistrationEntryApi
     */
    public patchTimeRegistrationEntry(requestParameters: TimeRegistrationEntryApiPatchTimeRegistrationEntryRequest, options?: RawAxiosRequestConfig) {
        return TimeRegistrationEntryApiFp(this.configuration).patchTimeRegistrationEntry(requestParameters.companyId, requestParameters.timeRegistrationEntryId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postTimeRegistrationEntryForEmployeeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type timeRegistrationEntry in Dynamics 365 Business Central
     * @param {TimeRegistrationEntryApiPatchTimeRegistrationEntryForEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeRegistrationEntryApi
     */
    public patchTimeRegistrationEntryForEmployee(requestParameters: TimeRegistrationEntryApiPatchTimeRegistrationEntryForEmployeeRequest, options?: RawAxiosRequestConfig) {
        return TimeRegistrationEntryApiFp(this.configuration).patchTimeRegistrationEntryForEmployee(requestParameters.companyId, requestParameters.employeeId, requestParameters.timeRegistrationEntryId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postTimeRegistrationEntryForEmployeeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type timeRegistrationEntry in Dynamics 365 Business Central
     * @param {TimeRegistrationEntryApiPostTimeRegistrationEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeRegistrationEntryApi
     */
    public postTimeRegistrationEntry(requestParameters: TimeRegistrationEntryApiPostTimeRegistrationEntryRequest, options?: RawAxiosRequestConfig) {
        return TimeRegistrationEntryApiFp(this.configuration).postTimeRegistrationEntry(requestParameters.companyId, requestParameters.contentType, requestParameters.postTimeRegistrationEntryForEmployeeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type timeRegistrationEntry in Dynamics 365 Business Central
     * @param {TimeRegistrationEntryApiPostTimeRegistrationEntryForEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeRegistrationEntryApi
     */
    public postTimeRegistrationEntryForEmployee(requestParameters: TimeRegistrationEntryApiPostTimeRegistrationEntryForEmployeeRequest, options?: RawAxiosRequestConfig) {
        return TimeRegistrationEntryApiFp(this.configuration).postTimeRegistrationEntryForEmployee(requestParameters.companyId, requestParameters.employeeId, requestParameters.contentType, requestParameters.postTimeRegistrationEntryForEmployeeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetTimeRegistrationEntryExpandEnum = {
    Project: 'project'
} as const;
export type GetTimeRegistrationEntryExpandEnum = typeof GetTimeRegistrationEntryExpandEnum[keyof typeof GetTimeRegistrationEntryExpandEnum];
/**
 * @export
 */
export const GetTimeRegistrationEntrySelectEnum = {
    Id: 'id',
    EmployeeId: 'employeeId',
    EmployeeNumber: 'employeeNumber',
    JobId: 'jobId',
    JobNumber: 'jobNumber',
    Absence: 'absence',
    LineNumber: 'lineNumber',
    Date: 'date',
    Quantity: 'quantity',
    Status: 'status',
    UnitOfMeasureId: 'unitOfMeasureId',
    UnitOfMeasure: 'unitOfMeasure',
    Dimensions: 'dimensions',
    LastModfiedDateTime: 'lastModfiedDateTime'
} as const;
export type GetTimeRegistrationEntrySelectEnum = typeof GetTimeRegistrationEntrySelectEnum[keyof typeof GetTimeRegistrationEntrySelectEnum];
/**
 * @export
 */
export const GetTimeRegistrationEntryForEmployeeExpandEnum = {
    Project: 'project'
} as const;
export type GetTimeRegistrationEntryForEmployeeExpandEnum = typeof GetTimeRegistrationEntryForEmployeeExpandEnum[keyof typeof GetTimeRegistrationEntryForEmployeeExpandEnum];
/**
 * @export
 */
export const GetTimeRegistrationEntryForEmployeeSelectEnum = {
    Id: 'id',
    EmployeeId: 'employeeId',
    EmployeeNumber: 'employeeNumber',
    JobId: 'jobId',
    JobNumber: 'jobNumber',
    Absence: 'absence',
    LineNumber: 'lineNumber',
    Date: 'date',
    Quantity: 'quantity',
    Status: 'status',
    UnitOfMeasureId: 'unitOfMeasureId',
    UnitOfMeasure: 'unitOfMeasure',
    Dimensions: 'dimensions',
    LastModfiedDateTime: 'lastModfiedDateTime'
} as const;
export type GetTimeRegistrationEntryForEmployeeSelectEnum = typeof GetTimeRegistrationEntryForEmployeeSelectEnum[keyof typeof GetTimeRegistrationEntryForEmployeeSelectEnum];
/**
 * @export
 */
export const ListTimeRegistrationEntriesExpandEnum = {
    Project: 'project'
} as const;
export type ListTimeRegistrationEntriesExpandEnum = typeof ListTimeRegistrationEntriesExpandEnum[keyof typeof ListTimeRegistrationEntriesExpandEnum];
/**
 * @export
 */
export const ListTimeRegistrationEntriesSelectEnum = {
    Id: 'id',
    EmployeeId: 'employeeId',
    EmployeeNumber: 'employeeNumber',
    JobId: 'jobId',
    JobNumber: 'jobNumber',
    Absence: 'absence',
    LineNumber: 'lineNumber',
    Date: 'date',
    Quantity: 'quantity',
    Status: 'status',
    UnitOfMeasureId: 'unitOfMeasureId',
    UnitOfMeasure: 'unitOfMeasure',
    Dimensions: 'dimensions',
    LastModfiedDateTime: 'lastModfiedDateTime'
} as const;
export type ListTimeRegistrationEntriesSelectEnum = typeof ListTimeRegistrationEntriesSelectEnum[keyof typeof ListTimeRegistrationEntriesSelectEnum];
/**
 * @export
 */
export const ListTimeRegistrationEntriesForEmployeeExpandEnum = {
    Project: 'project'
} as const;
export type ListTimeRegistrationEntriesForEmployeeExpandEnum = typeof ListTimeRegistrationEntriesForEmployeeExpandEnum[keyof typeof ListTimeRegistrationEntriesForEmployeeExpandEnum];
/**
 * @export
 */
export const ListTimeRegistrationEntriesForEmployeeSelectEnum = {
    Id: 'id',
    EmployeeId: 'employeeId',
    EmployeeNumber: 'employeeNumber',
    JobId: 'jobId',
    JobNumber: 'jobNumber',
    Absence: 'absence',
    LineNumber: 'lineNumber',
    Date: 'date',
    Quantity: 'quantity',
    Status: 'status',
    UnitOfMeasureId: 'unitOfMeasureId',
    UnitOfMeasure: 'unitOfMeasure',
    Dimensions: 'dimensions',
    LastModfiedDateTime: 'lastModfiedDateTime'
} as const;
export type ListTimeRegistrationEntriesForEmployeeSelectEnum = typeof ListTimeRegistrationEntriesForEmployeeSelectEnum[keyof typeof ListTimeRegistrationEntriesForEmployeeSelectEnum];
