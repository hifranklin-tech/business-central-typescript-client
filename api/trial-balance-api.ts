/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ListTrialBalance200Response } from '../model';
// @ts-ignore
import type { TrialBalance } from '../model';
/**
 * TrialBalanceApi - axios parameter creator
 * @export
 */
export const TrialBalanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type trialBalance for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} trialBalanceNumber (v1.0) number for trialBalance
         * @param {Array<GetTrialBalanceExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetTrialBalanceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrialBalance: async (companyId: string, trialBalanceNumber: string, $expand?: Array<GetTrialBalanceExpandEnum>, $select?: Array<GetTrialBalanceSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getTrialBalance', 'companyId', companyId)
            // verify required parameter 'trialBalanceNumber' is not null or undefined
            assertParamExists('getTrialBalance', 'trialBalanceNumber', trialBalanceNumber)
            const localVarPath = `/companies({company_id})/trialBalance('{trialBalance_number}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"trialBalance_number"}}`, encodeURIComponent(String(trialBalanceNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of trialBalance
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListTrialBalanceExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListTrialBalanceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTrialBalance: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListTrialBalanceExpandEnum>, $select?: Array<ListTrialBalanceSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listTrialBalance', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/trialBalance`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrialBalanceApi - functional programming interface
 * @export
 */
export const TrialBalanceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrialBalanceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type trialBalance for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} trialBalanceNumber (v1.0) number for trialBalance
         * @param {Array<GetTrialBalanceExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetTrialBalanceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrialBalance(companyId: string, trialBalanceNumber: string, $expand?: Array<GetTrialBalanceExpandEnum>, $select?: Array<GetTrialBalanceSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrialBalance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrialBalance(companyId, trialBalanceNumber, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrialBalanceApi.getTrialBalance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of trialBalance
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListTrialBalanceExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListTrialBalanceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTrialBalance(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListTrialBalanceExpandEnum>, $select?: Array<ListTrialBalanceSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTrialBalance200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTrialBalance(companyId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrialBalanceApi.listTrialBalance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TrialBalanceApi - factory interface
 * @export
 */
export const TrialBalanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrialBalanceApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type trialBalance for Dynamics 365 Business Central.
         * @param {TrialBalanceApiGetTrialBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrialBalance(requestParameters: TrialBalanceApiGetTrialBalanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<TrialBalance> {
            return localVarFp.getTrialBalance(requestParameters.companyId, requestParameters.trialBalanceNumber, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of trialBalance
         * @param {TrialBalanceApiListTrialBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTrialBalance(requestParameters: TrialBalanceApiListTrialBalanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListTrialBalance200Response> {
            return localVarFp.listTrialBalance(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getTrialBalance operation in TrialBalanceApi.
 * @export
 * @interface TrialBalanceApiGetTrialBalanceRequest
 */
export interface TrialBalanceApiGetTrialBalanceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof TrialBalanceApiGetTrialBalance
     */
    readonly companyId: string

    /**
     * (v1.0) number for trialBalance
     * @type {string}
     * @memberof TrialBalanceApiGetTrialBalance
     */
    readonly trialBalanceNumber: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'account'>}
     * @memberof TrialBalanceApiGetTrialBalance
     */
    readonly $expand?: Array<GetTrialBalanceExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'number' | 'accountId' | 'accountType' | 'display' | 'totalDebit' | 'totalCredit' | 'balanceAtDateDebit' | 'balanceAtDateCredit' | 'dateFilter'>}
     * @memberof TrialBalanceApiGetTrialBalance
     */
    readonly $select?: Array<GetTrialBalanceSelectEnum>
}

/**
 * Request parameters for listTrialBalance operation in TrialBalanceApi.
 * @export
 * @interface TrialBalanceApiListTrialBalanceRequest
 */
export interface TrialBalanceApiListTrialBalanceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof TrialBalanceApiListTrialBalance
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof TrialBalanceApiListTrialBalance
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof TrialBalanceApiListTrialBalance
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof TrialBalanceApiListTrialBalance
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof TrialBalanceApiListTrialBalance
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'account'>}
     * @memberof TrialBalanceApiListTrialBalance
     */
    readonly $expand?: Array<ListTrialBalanceExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'number' | 'accountId' | 'accountType' | 'display' | 'totalDebit' | 'totalCredit' | 'balanceAtDateDebit' | 'balanceAtDateCredit' | 'dateFilter'>}
     * @memberof TrialBalanceApiListTrialBalance
     */
    readonly $select?: Array<ListTrialBalanceSelectEnum>
}

/**
 * TrialBalanceApi - object-oriented interface
 * @export
 * @class TrialBalanceApi
 * @extends {BaseAPI}
 */
export class TrialBalanceApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type trialBalance for Dynamics 365 Business Central.
     * @param {TrialBalanceApiGetTrialBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrialBalanceApi
     */
    public getTrialBalance(requestParameters: TrialBalanceApiGetTrialBalanceRequest, options?: RawAxiosRequestConfig) {
        return TrialBalanceApiFp(this.configuration).getTrialBalance(requestParameters.companyId, requestParameters.trialBalanceNumber, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of trialBalance
     * @param {TrialBalanceApiListTrialBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrialBalanceApi
     */
    public listTrialBalance(requestParameters: TrialBalanceApiListTrialBalanceRequest, options?: RawAxiosRequestConfig) {
        return TrialBalanceApiFp(this.configuration).listTrialBalance(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetTrialBalanceExpandEnum = {
    Account: 'account'
} as const;
export type GetTrialBalanceExpandEnum = typeof GetTrialBalanceExpandEnum[keyof typeof GetTrialBalanceExpandEnum];
/**
 * @export
 */
export const GetTrialBalanceSelectEnum = {
    Number: 'number',
    AccountId: 'accountId',
    AccountType: 'accountType',
    Display: 'display',
    TotalDebit: 'totalDebit',
    TotalCredit: 'totalCredit',
    BalanceAtDateDebit: 'balanceAtDateDebit',
    BalanceAtDateCredit: 'balanceAtDateCredit',
    DateFilter: 'dateFilter'
} as const;
export type GetTrialBalanceSelectEnum = typeof GetTrialBalanceSelectEnum[keyof typeof GetTrialBalanceSelectEnum];
/**
 * @export
 */
export const ListTrialBalanceExpandEnum = {
    Account: 'account'
} as const;
export type ListTrialBalanceExpandEnum = typeof ListTrialBalanceExpandEnum[keyof typeof ListTrialBalanceExpandEnum];
/**
 * @export
 */
export const ListTrialBalanceSelectEnum = {
    Number: 'number',
    AccountId: 'accountId',
    AccountType: 'accountType',
    Display: 'display',
    TotalDebit: 'totalDebit',
    TotalCredit: 'totalCredit',
    BalanceAtDateDebit: 'balanceAtDateDebit',
    BalanceAtDateCredit: 'balanceAtDateCredit',
    DateFilter: 'dateFilter'
} as const;
export type ListTrialBalanceSelectEnum = typeof ListTrialBalanceSelectEnum[keyof typeof ListTrialBalanceSelectEnum];
