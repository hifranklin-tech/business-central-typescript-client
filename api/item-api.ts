/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Item } from '../model';
// @ts-ignore
import type { ListItems200Response } from '../model';
// @ts-ignore
import type { PostItemRequest } from '../model';
/**
 * ItemApi - axios parameter creator
 * @export
 */
export const ItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type item in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} itemId (v1.0) id for item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: async (companyId: string, itemId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteItem', 'companyId', companyId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('deleteItem', 'itemId', itemId)
            const localVarPath = `/companies({company_id})/items({item_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"item_id"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type item for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} itemId (v1.0) id for item
         * @param {Array<GetItemExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetItemSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem: async (companyId: string, itemId: string, $expand?: Array<GetItemExpandEnum>, $select?: Array<GetItemSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getItem', 'companyId', companyId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getItem', 'itemId', itemId)
            const localVarPath = `/companies({company_id})/items({item_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"item_id"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of items
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListItemsExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListItemsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItems: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListItemsExpandEnum>, $select?: Array<ListItemsSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listItems', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/items`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type item in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} itemId (v1.0) id for item
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostItemRequest} postItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItem: async (companyId: string, itemId: string, contentType: string, ifMatch: string, postItemRequest: PostItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchItem', 'companyId', companyId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('patchItem', 'itemId', itemId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchItem', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchItem', 'ifMatch', ifMatch)
            // verify required parameter 'postItemRequest' is not null or undefined
            assertParamExists('patchItem', 'postItemRequest', postItemRequest)
            const localVarPath = `/companies({company_id})/items({item_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"item_id"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type item in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostItemRequest} postItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItem: async (companyId: string, contentType: string, postItemRequest: PostItemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postItem', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postItem', 'contentType', contentType)
            // verify required parameter 'postItemRequest' is not null or undefined
            assertParamExists('postItem', 'postItemRequest', postItemRequest)
            const localVarPath = `/companies({company_id})/items`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemApi - functional programming interface
 * @export
 */
export const ItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type item in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} itemId (v1.0) id for item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItem(companyId: string, itemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItem(companyId, itemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemApi.deleteItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type item for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} itemId (v1.0) id for item
         * @param {Array<GetItemExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetItemSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItem(companyId: string, itemId: string, $expand?: Array<GetItemExpandEnum>, $select?: Array<GetItemSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItem(companyId, itemId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemApi.getItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of items
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListItemsExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListItemsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listItems(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListItemsExpandEnum>, $select?: Array<ListItemsSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListItems200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listItems(companyId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemApi.listItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type item in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} itemId (v1.0) id for item
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostItemRequest} postItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchItem(companyId: string, itemId: string, contentType: string, ifMatch: string, postItemRequest: PostItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchItem(companyId, itemId, contentType, ifMatch, postItemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemApi.patchItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type item in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostItemRequest} postItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postItem(companyId: string, contentType: string, postItemRequest: PostItemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postItem(companyId, contentType, postItemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemApi.postItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ItemApi - factory interface
 * @export
 */
export const ItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type item in Dynamics 365 Business Central
         * @param {ItemApiDeleteItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem(requestParameters: ItemApiDeleteItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteItem(requestParameters.companyId, requestParameters.itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type item for Dynamics 365 Business Central.
         * @param {ItemApiGetItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem(requestParameters: ItemApiGetItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<Item> {
            return localVarFp.getItem(requestParameters.companyId, requestParameters.itemId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of items
         * @param {ItemApiListItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItems(requestParameters: ItemApiListItemsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListItems200Response> {
            return localVarFp.listItems(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type item in Dynamics 365 Business Central
         * @param {ItemApiPatchItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItem(requestParameters: ItemApiPatchItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<Item> {
            return localVarFp.patchItem(requestParameters.companyId, requestParameters.itemId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postItemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type item in Dynamics 365 Business Central
         * @param {ItemApiPostItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postItem(requestParameters: ItemApiPostItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<Item> {
            return localVarFp.postItem(requestParameters.companyId, requestParameters.contentType, requestParameters.postItemRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteItem operation in ItemApi.
 * @export
 * @interface ItemApiDeleteItemRequest
 */
export interface ItemApiDeleteItemRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof ItemApiDeleteItem
     */
    readonly companyId: string

    /**
     * (v1.0) id for item
     * @type {string}
     * @memberof ItemApiDeleteItem
     */
    readonly itemId: string
}

/**
 * Request parameters for getItem operation in ItemApi.
 * @export
 * @interface ItemApiGetItemRequest
 */
export interface ItemApiGetItemRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof ItemApiGetItem
     */
    readonly companyId: string

    /**
     * (v1.0) id for item
     * @type {string}
     * @memberof ItemApiGetItem
     */
    readonly itemId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'picture' | 'defaultDimensions' | 'itemCategory'>}
     * @memberof ItemApiGetItem
     */
    readonly $expand?: Array<GetItemExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'displayName' | 'type' | 'itemCategoryId' | 'itemCategoryCode' | 'blocked' | 'baseUnitOfMeasureId' | 'baseUnitOfMeasure' | 'gtin' | 'inventory' | 'unitPrice' | 'priceIncludesTax' | 'unitCost' | 'taxGroupId' | 'taxGroupCode' | 'lastModifiedDateTime'>}
     * @memberof ItemApiGetItem
     */
    readonly $select?: Array<GetItemSelectEnum>
}

/**
 * Request parameters for listItems operation in ItemApi.
 * @export
 * @interface ItemApiListItemsRequest
 */
export interface ItemApiListItemsRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof ItemApiListItems
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof ItemApiListItems
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof ItemApiListItems
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof ItemApiListItems
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof ItemApiListItems
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'picture' | 'defaultDimensions' | 'itemCategory'>}
     * @memberof ItemApiListItems
     */
    readonly $expand?: Array<ListItemsExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'displayName' | 'type' | 'itemCategoryId' | 'itemCategoryCode' | 'blocked' | 'baseUnitOfMeasureId' | 'baseUnitOfMeasure' | 'gtin' | 'inventory' | 'unitPrice' | 'priceIncludesTax' | 'unitCost' | 'taxGroupId' | 'taxGroupCode' | 'lastModifiedDateTime'>}
     * @memberof ItemApiListItems
     */
    readonly $select?: Array<ListItemsSelectEnum>
}

/**
 * Request parameters for patchItem operation in ItemApi.
 * @export
 * @interface ItemApiPatchItemRequest
 */
export interface ItemApiPatchItemRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof ItemApiPatchItem
     */
    readonly companyId: string

    /**
     * (v1.0) id for item
     * @type {string}
     * @memberof ItemApiPatchItem
     */
    readonly itemId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof ItemApiPatchItem
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof ItemApiPatchItem
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostItemRequest}
     * @memberof ItemApiPatchItem
     */
    readonly postItemRequest: PostItemRequest
}

/**
 * Request parameters for postItem operation in ItemApi.
 * @export
 * @interface ItemApiPostItemRequest
 */
export interface ItemApiPostItemRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof ItemApiPostItem
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof ItemApiPostItem
     */
    readonly contentType: string

    /**
     * 
     * @type {PostItemRequest}
     * @memberof ItemApiPostItem
     */
    readonly postItemRequest: PostItemRequest
}

/**
 * ItemApi - object-oriented interface
 * @export
 * @class ItemApi
 * @extends {BaseAPI}
 */
export class ItemApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type item in Dynamics 365 Business Central
     * @param {ItemApiDeleteItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public deleteItem(requestParameters: ItemApiDeleteItemRequest, options?: RawAxiosRequestConfig) {
        return ItemApiFp(this.configuration).deleteItem(requestParameters.companyId, requestParameters.itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type item for Dynamics 365 Business Central.
     * @param {ItemApiGetItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public getItem(requestParameters: ItemApiGetItemRequest, options?: RawAxiosRequestConfig) {
        return ItemApiFp(this.configuration).getItem(requestParameters.companyId, requestParameters.itemId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of items
     * @param {ItemApiListItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public listItems(requestParameters: ItemApiListItemsRequest, options?: RawAxiosRequestConfig) {
        return ItemApiFp(this.configuration).listItems(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type item in Dynamics 365 Business Central
     * @param {ItemApiPatchItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public patchItem(requestParameters: ItemApiPatchItemRequest, options?: RawAxiosRequestConfig) {
        return ItemApiFp(this.configuration).patchItem(requestParameters.companyId, requestParameters.itemId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postItemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type item in Dynamics 365 Business Central
     * @param {ItemApiPostItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public postItem(requestParameters: ItemApiPostItemRequest, options?: RawAxiosRequestConfig) {
        return ItemApiFp(this.configuration).postItem(requestParameters.companyId, requestParameters.contentType, requestParameters.postItemRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetItemExpandEnum = {
    Picture: 'picture',
    DefaultDimensions: 'defaultDimensions',
    ItemCategory: 'itemCategory'
} as const;
export type GetItemExpandEnum = typeof GetItemExpandEnum[keyof typeof GetItemExpandEnum];
/**
 * @export
 */
export const GetItemSelectEnum = {
    Id: 'id',
    Number: 'number',
    DisplayName: 'displayName',
    Type: 'type',
    ItemCategoryId: 'itemCategoryId',
    ItemCategoryCode: 'itemCategoryCode',
    Blocked: 'blocked',
    BaseUnitOfMeasureId: 'baseUnitOfMeasureId',
    BaseUnitOfMeasure: 'baseUnitOfMeasure',
    Gtin: 'gtin',
    Inventory: 'inventory',
    UnitPrice: 'unitPrice',
    PriceIncludesTax: 'priceIncludesTax',
    UnitCost: 'unitCost',
    TaxGroupId: 'taxGroupId',
    TaxGroupCode: 'taxGroupCode',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type GetItemSelectEnum = typeof GetItemSelectEnum[keyof typeof GetItemSelectEnum];
/**
 * @export
 */
export const ListItemsExpandEnum = {
    Picture: 'picture',
    DefaultDimensions: 'defaultDimensions',
    ItemCategory: 'itemCategory'
} as const;
export type ListItemsExpandEnum = typeof ListItemsExpandEnum[keyof typeof ListItemsExpandEnum];
/**
 * @export
 */
export const ListItemsSelectEnum = {
    Id: 'id',
    Number: 'number',
    DisplayName: 'displayName',
    Type: 'type',
    ItemCategoryId: 'itemCategoryId',
    ItemCategoryCode: 'itemCategoryCode',
    Blocked: 'blocked',
    BaseUnitOfMeasureId: 'baseUnitOfMeasureId',
    BaseUnitOfMeasure: 'baseUnitOfMeasure',
    Gtin: 'gtin',
    Inventory: 'inventory',
    UnitPrice: 'unitPrice',
    PriceIncludesTax: 'priceIncludesTax',
    UnitCost: 'unitCost',
    TaxGroupId: 'taxGroupId',
    TaxGroupCode: 'taxGroupCode',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type ListItemsSelectEnum = typeof ListItemsSelectEnum[keyof typeof ListItemsSelectEnum];
