/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Customer } from '../model';
// @ts-ignore
import type { ListCustomers200Response } from '../model';
// @ts-ignore
import type { PostCustomerRequest } from '../model';
/**
 * CustomerApi - axios parameter creator
 * @export
 */
export const CustomerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type customer in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerId (v1.0) id for customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer: async (companyId: string, customerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteCustomer', 'companyId', companyId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('deleteCustomer', 'customerId', customerId)
            const localVarPath = `/companies({company_id})/customers({customer_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type customer for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerId (v1.0) id for customer
         * @param {Array<GetCustomerExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetCustomerSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer: async (companyId: string, customerId: string, $expand?: Array<GetCustomerExpandEnum>, $select?: Array<GetCustomerSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCustomer', 'companyId', companyId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getCustomer', 'customerId', customerId)
            const localVarPath = `/companies({company_id})/customers({customer_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of customers
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListCustomersExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListCustomersSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomers: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListCustomersExpandEnum>, $select?: Array<ListCustomersSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listCustomers', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/customers`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type customer in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerId (v1.0) id for customer
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostCustomerRequest} postCustomerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCustomer: async (companyId: string, customerId: string, contentType: string, ifMatch: string, postCustomerRequest: PostCustomerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchCustomer', 'companyId', companyId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('patchCustomer', 'customerId', customerId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchCustomer', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchCustomer', 'ifMatch', ifMatch)
            // verify required parameter 'postCustomerRequest' is not null or undefined
            assertParamExists('patchCustomer', 'postCustomerRequest', postCustomerRequest)
            const localVarPath = `/companies({company_id})/customers({customer_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCustomerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type customer in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostCustomerRequest} postCustomerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCustomer: async (companyId: string, contentType: string, postCustomerRequest: PostCustomerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postCustomer', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postCustomer', 'contentType', contentType)
            // verify required parameter 'postCustomerRequest' is not null or undefined
            assertParamExists('postCustomer', 'postCustomerRequest', postCustomerRequest)
            const localVarPath = `/companies({company_id})/customers`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCustomerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerApi - functional programming interface
 * @export
 */
export const CustomerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type customer in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerId (v1.0) id for customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomer(companyId: string, customerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustomer(companyId, customerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerApi.deleteCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type customer for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerId (v1.0) id for customer
         * @param {Array<GetCustomerExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetCustomerSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomer(companyId: string, customerId: string, $expand?: Array<GetCustomerExpandEnum>, $select?: Array<GetCustomerSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomer(companyId, customerId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerApi.getCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of customers
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListCustomersExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListCustomersSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCustomers(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListCustomersExpandEnum>, $select?: Array<ListCustomersSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCustomers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCustomers(companyId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerApi.listCustomers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type customer in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerId (v1.0) id for customer
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostCustomerRequest} postCustomerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCustomer(companyId: string, customerId: string, contentType: string, ifMatch: string, postCustomerRequest: PostCustomerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCustomer(companyId, customerId, contentType, ifMatch, postCustomerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerApi.patchCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type customer in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostCustomerRequest} postCustomerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCustomer(companyId: string, contentType: string, postCustomerRequest: PostCustomerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCustomer(companyId, contentType, postCustomerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerApi.postCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerApi - factory interface
 * @export
 */
export const CustomerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type customer in Dynamics 365 Business Central
         * @param {CustomerApiDeleteCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer(requestParameters: CustomerApiDeleteCustomerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCustomer(requestParameters.companyId, requestParameters.customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type customer for Dynamics 365 Business Central.
         * @param {CustomerApiGetCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer(requestParameters: CustomerApiGetCustomerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Customer> {
            return localVarFp.getCustomer(requestParameters.companyId, requestParameters.customerId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of customers
         * @param {CustomerApiListCustomersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomers(requestParameters: CustomerApiListCustomersRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListCustomers200Response> {
            return localVarFp.listCustomers(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type customer in Dynamics 365 Business Central
         * @param {CustomerApiPatchCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCustomer(requestParameters: CustomerApiPatchCustomerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Customer> {
            return localVarFp.patchCustomer(requestParameters.companyId, requestParameters.customerId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postCustomerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type customer in Dynamics 365 Business Central
         * @param {CustomerApiPostCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCustomer(requestParameters: CustomerApiPostCustomerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Customer> {
            return localVarFp.postCustomer(requestParameters.companyId, requestParameters.contentType, requestParameters.postCustomerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteCustomer operation in CustomerApi.
 * @export
 * @interface CustomerApiDeleteCustomerRequest
 */
export interface CustomerApiDeleteCustomerRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerApiDeleteCustomer
     */
    readonly companyId: string

    /**
     * (v1.0) id for customer
     * @type {string}
     * @memberof CustomerApiDeleteCustomer
     */
    readonly customerId: string
}

/**
 * Request parameters for getCustomer operation in CustomerApi.
 * @export
 * @interface CustomerApiGetCustomerRequest
 */
export interface CustomerApiGetCustomerRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerApiGetCustomer
     */
    readonly companyId: string

    /**
     * (v1.0) id for customer
     * @type {string}
     * @memberof CustomerApiGetCustomer
     */
    readonly customerId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'customerFinancialDetails' | 'picture' | 'defaultDimensions' | 'currency' | 'paymentTerm' | 'shipmentMethod' | 'paymentMethod'>}
     * @memberof CustomerApiGetCustomer
     */
    readonly $expand?: Array<GetCustomerExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'displayName' | 'type' | 'address' | 'phoneNumber' | 'email' | 'website' | 'taxLiable' | 'taxAreaId' | 'taxAreaDisplayName' | 'taxRegistrationNumber' | 'currencyId' | 'currencyCode' | 'paymentTermsId' | 'shipmentMethodId' | 'paymentMethodId' | 'blocked' | 'lastModifiedDateTime'>}
     * @memberof CustomerApiGetCustomer
     */
    readonly $select?: Array<GetCustomerSelectEnum>
}

/**
 * Request parameters for listCustomers operation in CustomerApi.
 * @export
 * @interface CustomerApiListCustomersRequest
 */
export interface CustomerApiListCustomersRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerApiListCustomers
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof CustomerApiListCustomers
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof CustomerApiListCustomers
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof CustomerApiListCustomers
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof CustomerApiListCustomers
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'customerFinancialDetails' | 'picture' | 'defaultDimensions' | 'currency' | 'paymentTerm' | 'shipmentMethod' | 'paymentMethod'>}
     * @memberof CustomerApiListCustomers
     */
    readonly $expand?: Array<ListCustomersExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'displayName' | 'type' | 'address' | 'phoneNumber' | 'email' | 'website' | 'taxLiable' | 'taxAreaId' | 'taxAreaDisplayName' | 'taxRegistrationNumber' | 'currencyId' | 'currencyCode' | 'paymentTermsId' | 'shipmentMethodId' | 'paymentMethodId' | 'blocked' | 'lastModifiedDateTime'>}
     * @memberof CustomerApiListCustomers
     */
    readonly $select?: Array<ListCustomersSelectEnum>
}

/**
 * Request parameters for patchCustomer operation in CustomerApi.
 * @export
 * @interface CustomerApiPatchCustomerRequest
 */
export interface CustomerApiPatchCustomerRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerApiPatchCustomer
     */
    readonly companyId: string

    /**
     * (v1.0) id for customer
     * @type {string}
     * @memberof CustomerApiPatchCustomer
     */
    readonly customerId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof CustomerApiPatchCustomer
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof CustomerApiPatchCustomer
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostCustomerRequest}
     * @memberof CustomerApiPatchCustomer
     */
    readonly postCustomerRequest: PostCustomerRequest
}

/**
 * Request parameters for postCustomer operation in CustomerApi.
 * @export
 * @interface CustomerApiPostCustomerRequest
 */
export interface CustomerApiPostCustomerRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerApiPostCustomer
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof CustomerApiPostCustomer
     */
    readonly contentType: string

    /**
     * 
     * @type {PostCustomerRequest}
     * @memberof CustomerApiPostCustomer
     */
    readonly postCustomerRequest: PostCustomerRequest
}

/**
 * CustomerApi - object-oriented interface
 * @export
 * @class CustomerApi
 * @extends {BaseAPI}
 */
export class CustomerApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type customer in Dynamics 365 Business Central
     * @param {CustomerApiDeleteCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public deleteCustomer(requestParameters: CustomerApiDeleteCustomerRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).deleteCustomer(requestParameters.companyId, requestParameters.customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type customer for Dynamics 365 Business Central.
     * @param {CustomerApiGetCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public getCustomer(requestParameters: CustomerApiGetCustomerRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).getCustomer(requestParameters.companyId, requestParameters.customerId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of customers
     * @param {CustomerApiListCustomersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public listCustomers(requestParameters: CustomerApiListCustomersRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).listCustomers(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type customer in Dynamics 365 Business Central
     * @param {CustomerApiPatchCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public patchCustomer(requestParameters: CustomerApiPatchCustomerRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).patchCustomer(requestParameters.companyId, requestParameters.customerId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postCustomerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type customer in Dynamics 365 Business Central
     * @param {CustomerApiPostCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public postCustomer(requestParameters: CustomerApiPostCustomerRequest, options?: RawAxiosRequestConfig) {
        return CustomerApiFp(this.configuration).postCustomer(requestParameters.companyId, requestParameters.contentType, requestParameters.postCustomerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetCustomerExpandEnum = {
    CustomerFinancialDetails: 'customerFinancialDetails',
    Picture: 'picture',
    DefaultDimensions: 'defaultDimensions',
    Currency: 'currency',
    PaymentTerm: 'paymentTerm',
    ShipmentMethod: 'shipmentMethod',
    PaymentMethod: 'paymentMethod'
} as const;
export type GetCustomerExpandEnum = typeof GetCustomerExpandEnum[keyof typeof GetCustomerExpandEnum];
/**
 * @export
 */
export const GetCustomerSelectEnum = {
    Id: 'id',
    Number: 'number',
    DisplayName: 'displayName',
    Type: 'type',
    Address: 'address',
    PhoneNumber: 'phoneNumber',
    Email: 'email',
    Website: 'website',
    TaxLiable: 'taxLiable',
    TaxAreaId: 'taxAreaId',
    TaxAreaDisplayName: 'taxAreaDisplayName',
    TaxRegistrationNumber: 'taxRegistrationNumber',
    CurrencyId: 'currencyId',
    CurrencyCode: 'currencyCode',
    PaymentTermsId: 'paymentTermsId',
    ShipmentMethodId: 'shipmentMethodId',
    PaymentMethodId: 'paymentMethodId',
    Blocked: 'blocked',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type GetCustomerSelectEnum = typeof GetCustomerSelectEnum[keyof typeof GetCustomerSelectEnum];
/**
 * @export
 */
export const ListCustomersExpandEnum = {
    CustomerFinancialDetails: 'customerFinancialDetails',
    Picture: 'picture',
    DefaultDimensions: 'defaultDimensions',
    Currency: 'currency',
    PaymentTerm: 'paymentTerm',
    ShipmentMethod: 'shipmentMethod',
    PaymentMethod: 'paymentMethod'
} as const;
export type ListCustomersExpandEnum = typeof ListCustomersExpandEnum[keyof typeof ListCustomersExpandEnum];
/**
 * @export
 */
export const ListCustomersSelectEnum = {
    Id: 'id',
    Number: 'number',
    DisplayName: 'displayName',
    Type: 'type',
    Address: 'address',
    PhoneNumber: 'phoneNumber',
    Email: 'email',
    Website: 'website',
    TaxLiable: 'taxLiable',
    TaxAreaId: 'taxAreaId',
    TaxAreaDisplayName: 'taxAreaDisplayName',
    TaxRegistrationNumber: 'taxRegistrationNumber',
    CurrencyId: 'currencyId',
    CurrencyCode: 'currencyCode',
    PaymentTermsId: 'paymentTermsId',
    ShipmentMethodId: 'shipmentMethodId',
    PaymentMethodId: 'paymentMethodId',
    Blocked: 'blocked',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type ListCustomersSelectEnum = typeof ListCustomersSelectEnum[keyof typeof ListCustomersSelectEnum];
