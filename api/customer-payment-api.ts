/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CustomerPayment } from '../model';
// @ts-ignore
import type { ListCustomerPaymentsForCustomerPaymentJournal200Response } from '../model';
// @ts-ignore
import type { PostCustomerPaymentForCustomerPaymentJournalRequest } from '../model';
/**
 * CustomerPaymentApi - axios parameter creator
 * @export
 */
export const CustomerPaymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type customerPayment in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerPaymentId (v1.0) id for customerPayment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerPayment: async (companyId: string, customerPaymentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteCustomerPayment', 'companyId', companyId)
            // verify required parameter 'customerPaymentId' is not null or undefined
            assertParamExists('deleteCustomerPayment', 'customerPaymentId', customerPaymentId)
            const localVarPath = `/companies({company_id})/customerPayments({customerPayment_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"customerPayment_id"}}`, encodeURIComponent(String(customerPaymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an object of type customerPayment in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerPaymentJournalId (v1.0) id for customerPaymentJournal
         * @param {string} customerPaymentId (v1.0) id for customerPayment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerPaymentForCustomerPaymentJournal: async (companyId: string, customerPaymentJournalId: string, customerPaymentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteCustomerPaymentForCustomerPaymentJournal', 'companyId', companyId)
            // verify required parameter 'customerPaymentJournalId' is not null or undefined
            assertParamExists('deleteCustomerPaymentForCustomerPaymentJournal', 'customerPaymentJournalId', customerPaymentJournalId)
            // verify required parameter 'customerPaymentId' is not null or undefined
            assertParamExists('deleteCustomerPaymentForCustomerPaymentJournal', 'customerPaymentId', customerPaymentId)
            const localVarPath = `/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})/customerPayments({customerPayment_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"customerPaymentJournal_id"}}`, encodeURIComponent(String(customerPaymentJournalId)))
                .replace(`{${"customerPayment_id"}}`, encodeURIComponent(String(customerPaymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type customerPayment for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerPaymentId (v1.0) id for customerPayment
         * @param {Array<GetCustomerPaymentExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetCustomerPaymentSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerPayment: async (companyId: string, customerPaymentId: string, $expand?: Array<GetCustomerPaymentExpandEnum>, $select?: Array<GetCustomerPaymentSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCustomerPayment', 'companyId', companyId)
            // verify required parameter 'customerPaymentId' is not null or undefined
            assertParamExists('getCustomerPayment', 'customerPaymentId', customerPaymentId)
            const localVarPath = `/companies({company_id})/customerPayments({customerPayment_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"customerPayment_id"}}`, encodeURIComponent(String(customerPaymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type customerPayment for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerPaymentJournalId (v1.0) id for customerPaymentJournal
         * @param {string} customerPaymentId (v1.0) id for customerPayment
         * @param {Array<GetCustomerPaymentForCustomerPaymentJournalExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetCustomerPaymentForCustomerPaymentJournalSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerPaymentForCustomerPaymentJournal: async (companyId: string, customerPaymentJournalId: string, customerPaymentId: string, $expand?: Array<GetCustomerPaymentForCustomerPaymentJournalExpandEnum>, $select?: Array<GetCustomerPaymentForCustomerPaymentJournalSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCustomerPaymentForCustomerPaymentJournal', 'companyId', companyId)
            // verify required parameter 'customerPaymentJournalId' is not null or undefined
            assertParamExists('getCustomerPaymentForCustomerPaymentJournal', 'customerPaymentJournalId', customerPaymentJournalId)
            // verify required parameter 'customerPaymentId' is not null or undefined
            assertParamExists('getCustomerPaymentForCustomerPaymentJournal', 'customerPaymentId', customerPaymentId)
            const localVarPath = `/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})/customerPayments({customerPayment_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"customerPaymentJournal_id"}}`, encodeURIComponent(String(customerPaymentJournalId)))
                .replace(`{${"customerPayment_id"}}`, encodeURIComponent(String(customerPaymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of customerPayments
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListCustomerPaymentsExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListCustomerPaymentsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerPayments: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListCustomerPaymentsExpandEnum>, $select?: Array<ListCustomerPaymentsSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listCustomerPayments', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/customerPayments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of customerPayments
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerPaymentJournalId (v1.0) id for customerPaymentJournal
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListCustomerPaymentsForCustomerPaymentJournalExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListCustomerPaymentsForCustomerPaymentJournalSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerPaymentsForCustomerPaymentJournal: async (companyId: string, customerPaymentJournalId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListCustomerPaymentsForCustomerPaymentJournalExpandEnum>, $select?: Array<ListCustomerPaymentsForCustomerPaymentJournalSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listCustomerPaymentsForCustomerPaymentJournal', 'companyId', companyId)
            // verify required parameter 'customerPaymentJournalId' is not null or undefined
            assertParamExists('listCustomerPaymentsForCustomerPaymentJournal', 'customerPaymentJournalId', customerPaymentJournalId)
            const localVarPath = `/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})/customerPayments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"customerPaymentJournal_id"}}`, encodeURIComponent(String(customerPaymentJournalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type customerPayment in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerPaymentId (v1.0) id for customerPayment
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostCustomerPaymentForCustomerPaymentJournalRequest} postCustomerPaymentForCustomerPaymentJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCustomerPayment: async (companyId: string, customerPaymentId: string, contentType: string, ifMatch: string, postCustomerPaymentForCustomerPaymentJournalRequest: PostCustomerPaymentForCustomerPaymentJournalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchCustomerPayment', 'companyId', companyId)
            // verify required parameter 'customerPaymentId' is not null or undefined
            assertParamExists('patchCustomerPayment', 'customerPaymentId', customerPaymentId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchCustomerPayment', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchCustomerPayment', 'ifMatch', ifMatch)
            // verify required parameter 'postCustomerPaymentForCustomerPaymentJournalRequest' is not null or undefined
            assertParamExists('patchCustomerPayment', 'postCustomerPaymentForCustomerPaymentJournalRequest', postCustomerPaymentForCustomerPaymentJournalRequest)
            const localVarPath = `/companies({company_id})/customerPayments({customerPayment_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"customerPayment_id"}}`, encodeURIComponent(String(customerPaymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCustomerPaymentForCustomerPaymentJournalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type customerPayment in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerPaymentJournalId (v1.0) id for customerPaymentJournal
         * @param {string} customerPaymentId (v1.0) id for customerPayment
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostCustomerPaymentForCustomerPaymentJournalRequest} postCustomerPaymentForCustomerPaymentJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCustomerPaymentForCustomerPaymentJournal: async (companyId: string, customerPaymentJournalId: string, customerPaymentId: string, contentType: string, ifMatch: string, postCustomerPaymentForCustomerPaymentJournalRequest: PostCustomerPaymentForCustomerPaymentJournalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchCustomerPaymentForCustomerPaymentJournal', 'companyId', companyId)
            // verify required parameter 'customerPaymentJournalId' is not null or undefined
            assertParamExists('patchCustomerPaymentForCustomerPaymentJournal', 'customerPaymentJournalId', customerPaymentJournalId)
            // verify required parameter 'customerPaymentId' is not null or undefined
            assertParamExists('patchCustomerPaymentForCustomerPaymentJournal', 'customerPaymentId', customerPaymentId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchCustomerPaymentForCustomerPaymentJournal', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchCustomerPaymentForCustomerPaymentJournal', 'ifMatch', ifMatch)
            // verify required parameter 'postCustomerPaymentForCustomerPaymentJournalRequest' is not null or undefined
            assertParamExists('patchCustomerPaymentForCustomerPaymentJournal', 'postCustomerPaymentForCustomerPaymentJournalRequest', postCustomerPaymentForCustomerPaymentJournalRequest)
            const localVarPath = `/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})/customerPayments({customerPayment_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"customerPaymentJournal_id"}}`, encodeURIComponent(String(customerPaymentJournalId)))
                .replace(`{${"customerPayment_id"}}`, encodeURIComponent(String(customerPaymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCustomerPaymentForCustomerPaymentJournalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type customerPayment in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostCustomerPaymentForCustomerPaymentJournalRequest} postCustomerPaymentForCustomerPaymentJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCustomerPayment: async (companyId: string, contentType: string, postCustomerPaymentForCustomerPaymentJournalRequest: PostCustomerPaymentForCustomerPaymentJournalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postCustomerPayment', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postCustomerPayment', 'contentType', contentType)
            // verify required parameter 'postCustomerPaymentForCustomerPaymentJournalRequest' is not null or undefined
            assertParamExists('postCustomerPayment', 'postCustomerPaymentForCustomerPaymentJournalRequest', postCustomerPaymentForCustomerPaymentJournalRequest)
            const localVarPath = `/companies({company_id})/customerPayments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCustomerPaymentForCustomerPaymentJournalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type customerPayment in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerPaymentJournalId (v1.0) id for customerPaymentJournal
         * @param {string} contentType (v1.0) application/json
         * @param {PostCustomerPaymentForCustomerPaymentJournalRequest} postCustomerPaymentForCustomerPaymentJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCustomerPaymentForCustomerPaymentJournal: async (companyId: string, customerPaymentJournalId: string, contentType: string, postCustomerPaymentForCustomerPaymentJournalRequest: PostCustomerPaymentForCustomerPaymentJournalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postCustomerPaymentForCustomerPaymentJournal', 'companyId', companyId)
            // verify required parameter 'customerPaymentJournalId' is not null or undefined
            assertParamExists('postCustomerPaymentForCustomerPaymentJournal', 'customerPaymentJournalId', customerPaymentJournalId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postCustomerPaymentForCustomerPaymentJournal', 'contentType', contentType)
            // verify required parameter 'postCustomerPaymentForCustomerPaymentJournalRequest' is not null or undefined
            assertParamExists('postCustomerPaymentForCustomerPaymentJournal', 'postCustomerPaymentForCustomerPaymentJournalRequest', postCustomerPaymentForCustomerPaymentJournalRequest)
            const localVarPath = `/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})/customerPayments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"customerPaymentJournal_id"}}`, encodeURIComponent(String(customerPaymentJournalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCustomerPaymentForCustomerPaymentJournalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerPaymentApi - functional programming interface
 * @export
 */
export const CustomerPaymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerPaymentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type customerPayment in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerPaymentId (v1.0) id for customerPayment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomerPayment(companyId: string, customerPaymentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustomerPayment(companyId, customerPaymentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerPaymentApi.deleteCustomerPayment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes an object of type customerPayment in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerPaymentJournalId (v1.0) id for customerPaymentJournal
         * @param {string} customerPaymentId (v1.0) id for customerPayment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomerPaymentForCustomerPaymentJournal(companyId: string, customerPaymentJournalId: string, customerPaymentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustomerPaymentForCustomerPaymentJournal(companyId, customerPaymentJournalId, customerPaymentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerPaymentApi.deleteCustomerPaymentForCustomerPaymentJournal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type customerPayment for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerPaymentId (v1.0) id for customerPayment
         * @param {Array<GetCustomerPaymentExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetCustomerPaymentSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerPayment(companyId: string, customerPaymentId: string, $expand?: Array<GetCustomerPaymentExpandEnum>, $select?: Array<GetCustomerPaymentSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerPayment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerPayment(companyId, customerPaymentId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerPaymentApi.getCustomerPayment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type customerPayment for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerPaymentJournalId (v1.0) id for customerPaymentJournal
         * @param {string} customerPaymentId (v1.0) id for customerPayment
         * @param {Array<GetCustomerPaymentForCustomerPaymentJournalExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetCustomerPaymentForCustomerPaymentJournalSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerPaymentForCustomerPaymentJournal(companyId: string, customerPaymentJournalId: string, customerPaymentId: string, $expand?: Array<GetCustomerPaymentForCustomerPaymentJournalExpandEnum>, $select?: Array<GetCustomerPaymentForCustomerPaymentJournalSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerPayment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerPaymentForCustomerPaymentJournal(companyId, customerPaymentJournalId, customerPaymentId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerPaymentApi.getCustomerPaymentForCustomerPaymentJournal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of customerPayments
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListCustomerPaymentsExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListCustomerPaymentsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCustomerPayments(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListCustomerPaymentsExpandEnum>, $select?: Array<ListCustomerPaymentsSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCustomerPaymentsForCustomerPaymentJournal200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCustomerPayments(companyId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerPaymentApi.listCustomerPayments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of customerPayments
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerPaymentJournalId (v1.0) id for customerPaymentJournal
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListCustomerPaymentsForCustomerPaymentJournalExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListCustomerPaymentsForCustomerPaymentJournalSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCustomerPaymentsForCustomerPaymentJournal(companyId: string, customerPaymentJournalId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListCustomerPaymentsForCustomerPaymentJournalExpandEnum>, $select?: Array<ListCustomerPaymentsForCustomerPaymentJournalSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCustomerPaymentsForCustomerPaymentJournal200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCustomerPaymentsForCustomerPaymentJournal(companyId, customerPaymentJournalId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerPaymentApi.listCustomerPaymentsForCustomerPaymentJournal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type customerPayment in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerPaymentId (v1.0) id for customerPayment
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostCustomerPaymentForCustomerPaymentJournalRequest} postCustomerPaymentForCustomerPaymentJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCustomerPayment(companyId: string, customerPaymentId: string, contentType: string, ifMatch: string, postCustomerPaymentForCustomerPaymentJournalRequest: PostCustomerPaymentForCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerPayment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCustomerPayment(companyId, customerPaymentId, contentType, ifMatch, postCustomerPaymentForCustomerPaymentJournalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerPaymentApi.patchCustomerPayment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type customerPayment in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerPaymentJournalId (v1.0) id for customerPaymentJournal
         * @param {string} customerPaymentId (v1.0) id for customerPayment
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostCustomerPaymentForCustomerPaymentJournalRequest} postCustomerPaymentForCustomerPaymentJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCustomerPaymentForCustomerPaymentJournal(companyId: string, customerPaymentJournalId: string, customerPaymentId: string, contentType: string, ifMatch: string, postCustomerPaymentForCustomerPaymentJournalRequest: PostCustomerPaymentForCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerPayment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCustomerPaymentForCustomerPaymentJournal(companyId, customerPaymentJournalId, customerPaymentId, contentType, ifMatch, postCustomerPaymentForCustomerPaymentJournalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerPaymentApi.patchCustomerPaymentForCustomerPaymentJournal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type customerPayment in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostCustomerPaymentForCustomerPaymentJournalRequest} postCustomerPaymentForCustomerPaymentJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCustomerPayment(companyId: string, contentType: string, postCustomerPaymentForCustomerPaymentJournalRequest: PostCustomerPaymentForCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerPayment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCustomerPayment(companyId, contentType, postCustomerPaymentForCustomerPaymentJournalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerPaymentApi.postCustomerPayment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type customerPayment in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerPaymentJournalId (v1.0) id for customerPaymentJournal
         * @param {string} contentType (v1.0) application/json
         * @param {PostCustomerPaymentForCustomerPaymentJournalRequest} postCustomerPaymentForCustomerPaymentJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCustomerPaymentForCustomerPaymentJournal(companyId: string, customerPaymentJournalId: string, contentType: string, postCustomerPaymentForCustomerPaymentJournalRequest: PostCustomerPaymentForCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerPayment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCustomerPaymentForCustomerPaymentJournal(companyId, customerPaymentJournalId, contentType, postCustomerPaymentForCustomerPaymentJournalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerPaymentApi.postCustomerPaymentForCustomerPaymentJournal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerPaymentApi - factory interface
 * @export
 */
export const CustomerPaymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerPaymentApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type customerPayment in Dynamics 365 Business Central
         * @param {CustomerPaymentApiDeleteCustomerPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerPayment(requestParameters: CustomerPaymentApiDeleteCustomerPaymentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCustomerPayment(requestParameters.companyId, requestParameters.customerPaymentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an object of type customerPayment in Dynamics 365 Business Central
         * @param {CustomerPaymentApiDeleteCustomerPaymentForCustomerPaymentJournalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerPaymentForCustomerPaymentJournal(requestParameters: CustomerPaymentApiDeleteCustomerPaymentForCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCustomerPaymentForCustomerPaymentJournal(requestParameters.companyId, requestParameters.customerPaymentJournalId, requestParameters.customerPaymentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type customerPayment for Dynamics 365 Business Central.
         * @param {CustomerPaymentApiGetCustomerPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerPayment(requestParameters: CustomerPaymentApiGetCustomerPaymentRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomerPayment> {
            return localVarFp.getCustomerPayment(requestParameters.companyId, requestParameters.customerPaymentId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type customerPayment for Dynamics 365 Business Central.
         * @param {CustomerPaymentApiGetCustomerPaymentForCustomerPaymentJournalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerPaymentForCustomerPaymentJournal(requestParameters: CustomerPaymentApiGetCustomerPaymentForCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomerPayment> {
            return localVarFp.getCustomerPaymentForCustomerPaymentJournal(requestParameters.companyId, requestParameters.customerPaymentJournalId, requestParameters.customerPaymentId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of customerPayments
         * @param {CustomerPaymentApiListCustomerPaymentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerPayments(requestParameters: CustomerPaymentApiListCustomerPaymentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListCustomerPaymentsForCustomerPaymentJournal200Response> {
            return localVarFp.listCustomerPayments(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of customerPayments
         * @param {CustomerPaymentApiListCustomerPaymentsForCustomerPaymentJournalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerPaymentsForCustomerPaymentJournal(requestParameters: CustomerPaymentApiListCustomerPaymentsForCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListCustomerPaymentsForCustomerPaymentJournal200Response> {
            return localVarFp.listCustomerPaymentsForCustomerPaymentJournal(requestParameters.companyId, requestParameters.customerPaymentJournalId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type customerPayment in Dynamics 365 Business Central
         * @param {CustomerPaymentApiPatchCustomerPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCustomerPayment(requestParameters: CustomerPaymentApiPatchCustomerPaymentRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomerPayment> {
            return localVarFp.patchCustomerPayment(requestParameters.companyId, requestParameters.customerPaymentId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postCustomerPaymentForCustomerPaymentJournalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type customerPayment in Dynamics 365 Business Central
         * @param {CustomerPaymentApiPatchCustomerPaymentForCustomerPaymentJournalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCustomerPaymentForCustomerPaymentJournal(requestParameters: CustomerPaymentApiPatchCustomerPaymentForCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomerPayment> {
            return localVarFp.patchCustomerPaymentForCustomerPaymentJournal(requestParameters.companyId, requestParameters.customerPaymentJournalId, requestParameters.customerPaymentId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postCustomerPaymentForCustomerPaymentJournalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type customerPayment in Dynamics 365 Business Central
         * @param {CustomerPaymentApiPostCustomerPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCustomerPayment(requestParameters: CustomerPaymentApiPostCustomerPaymentRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomerPayment> {
            return localVarFp.postCustomerPayment(requestParameters.companyId, requestParameters.contentType, requestParameters.postCustomerPaymentForCustomerPaymentJournalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type customerPayment in Dynamics 365 Business Central
         * @param {CustomerPaymentApiPostCustomerPaymentForCustomerPaymentJournalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCustomerPaymentForCustomerPaymentJournal(requestParameters: CustomerPaymentApiPostCustomerPaymentForCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomerPayment> {
            return localVarFp.postCustomerPaymentForCustomerPaymentJournal(requestParameters.companyId, requestParameters.customerPaymentJournalId, requestParameters.contentType, requestParameters.postCustomerPaymentForCustomerPaymentJournalRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteCustomerPayment operation in CustomerPaymentApi.
 * @export
 * @interface CustomerPaymentApiDeleteCustomerPaymentRequest
 */
export interface CustomerPaymentApiDeleteCustomerPaymentRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerPaymentApiDeleteCustomerPayment
     */
    readonly companyId: string

    /**
     * (v1.0) id for customerPayment
     * @type {string}
     * @memberof CustomerPaymentApiDeleteCustomerPayment
     */
    readonly customerPaymentId: string
}

/**
 * Request parameters for deleteCustomerPaymentForCustomerPaymentJournal operation in CustomerPaymentApi.
 * @export
 * @interface CustomerPaymentApiDeleteCustomerPaymentForCustomerPaymentJournalRequest
 */
export interface CustomerPaymentApiDeleteCustomerPaymentForCustomerPaymentJournalRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerPaymentApiDeleteCustomerPaymentForCustomerPaymentJournal
     */
    readonly companyId: string

    /**
     * (v1.0) id for customerPaymentJournal
     * @type {string}
     * @memberof CustomerPaymentApiDeleteCustomerPaymentForCustomerPaymentJournal
     */
    readonly customerPaymentJournalId: string

    /**
     * (v1.0) id for customerPayment
     * @type {string}
     * @memberof CustomerPaymentApiDeleteCustomerPaymentForCustomerPaymentJournal
     */
    readonly customerPaymentId: string
}

/**
 * Request parameters for getCustomerPayment operation in CustomerPaymentApi.
 * @export
 * @interface CustomerPaymentApiGetCustomerPaymentRequest
 */
export interface CustomerPaymentApiGetCustomerPaymentRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerPaymentApiGetCustomerPayment
     */
    readonly companyId: string

    /**
     * (v1.0) id for customerPayment
     * @type {string}
     * @memberof CustomerPaymentApiGetCustomerPayment
     */
    readonly customerPaymentId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'customer'>}
     * @memberof CustomerPaymentApiGetCustomerPayment
     */
    readonly $expand?: Array<GetCustomerPaymentExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'journalDisplayName' | 'lineNumber' | 'customerId' | 'customerNumber' | 'contactId' | 'postingDate' | 'documentNumber' | 'externalDocumentNumber' | 'amount' | 'appliesToInvoiceId' | 'appliesToInvoiceNumber' | 'description' | 'comment' | 'dimensions' | 'lastModifiedDateTime'>}
     * @memberof CustomerPaymentApiGetCustomerPayment
     */
    readonly $select?: Array<GetCustomerPaymentSelectEnum>
}

/**
 * Request parameters for getCustomerPaymentForCustomerPaymentJournal operation in CustomerPaymentApi.
 * @export
 * @interface CustomerPaymentApiGetCustomerPaymentForCustomerPaymentJournalRequest
 */
export interface CustomerPaymentApiGetCustomerPaymentForCustomerPaymentJournalRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerPaymentApiGetCustomerPaymentForCustomerPaymentJournal
     */
    readonly companyId: string

    /**
     * (v1.0) id for customerPaymentJournal
     * @type {string}
     * @memberof CustomerPaymentApiGetCustomerPaymentForCustomerPaymentJournal
     */
    readonly customerPaymentJournalId: string

    /**
     * (v1.0) id for customerPayment
     * @type {string}
     * @memberof CustomerPaymentApiGetCustomerPaymentForCustomerPaymentJournal
     */
    readonly customerPaymentId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'customer'>}
     * @memberof CustomerPaymentApiGetCustomerPaymentForCustomerPaymentJournal
     */
    readonly $expand?: Array<GetCustomerPaymentForCustomerPaymentJournalExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'journalDisplayName' | 'lineNumber' | 'customerId' | 'customerNumber' | 'contactId' | 'postingDate' | 'documentNumber' | 'externalDocumentNumber' | 'amount' | 'appliesToInvoiceId' | 'appliesToInvoiceNumber' | 'description' | 'comment' | 'dimensions' | 'lastModifiedDateTime'>}
     * @memberof CustomerPaymentApiGetCustomerPaymentForCustomerPaymentJournal
     */
    readonly $select?: Array<GetCustomerPaymentForCustomerPaymentJournalSelectEnum>
}

/**
 * Request parameters for listCustomerPayments operation in CustomerPaymentApi.
 * @export
 * @interface CustomerPaymentApiListCustomerPaymentsRequest
 */
export interface CustomerPaymentApiListCustomerPaymentsRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerPaymentApiListCustomerPayments
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof CustomerPaymentApiListCustomerPayments
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof CustomerPaymentApiListCustomerPayments
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof CustomerPaymentApiListCustomerPayments
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof CustomerPaymentApiListCustomerPayments
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'customer'>}
     * @memberof CustomerPaymentApiListCustomerPayments
     */
    readonly $expand?: Array<ListCustomerPaymentsExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'journalDisplayName' | 'lineNumber' | 'customerId' | 'customerNumber' | 'contactId' | 'postingDate' | 'documentNumber' | 'externalDocumentNumber' | 'amount' | 'appliesToInvoiceId' | 'appliesToInvoiceNumber' | 'description' | 'comment' | 'dimensions' | 'lastModifiedDateTime'>}
     * @memberof CustomerPaymentApiListCustomerPayments
     */
    readonly $select?: Array<ListCustomerPaymentsSelectEnum>
}

/**
 * Request parameters for listCustomerPaymentsForCustomerPaymentJournal operation in CustomerPaymentApi.
 * @export
 * @interface CustomerPaymentApiListCustomerPaymentsForCustomerPaymentJournalRequest
 */
export interface CustomerPaymentApiListCustomerPaymentsForCustomerPaymentJournalRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerPaymentApiListCustomerPaymentsForCustomerPaymentJournal
     */
    readonly companyId: string

    /**
     * (v1.0) id for customerPaymentJournal
     * @type {string}
     * @memberof CustomerPaymentApiListCustomerPaymentsForCustomerPaymentJournal
     */
    readonly customerPaymentJournalId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof CustomerPaymentApiListCustomerPaymentsForCustomerPaymentJournal
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof CustomerPaymentApiListCustomerPaymentsForCustomerPaymentJournal
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof CustomerPaymentApiListCustomerPaymentsForCustomerPaymentJournal
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof CustomerPaymentApiListCustomerPaymentsForCustomerPaymentJournal
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'customer'>}
     * @memberof CustomerPaymentApiListCustomerPaymentsForCustomerPaymentJournal
     */
    readonly $expand?: Array<ListCustomerPaymentsForCustomerPaymentJournalExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'journalDisplayName' | 'lineNumber' | 'customerId' | 'customerNumber' | 'contactId' | 'postingDate' | 'documentNumber' | 'externalDocumentNumber' | 'amount' | 'appliesToInvoiceId' | 'appliesToInvoiceNumber' | 'description' | 'comment' | 'dimensions' | 'lastModifiedDateTime'>}
     * @memberof CustomerPaymentApiListCustomerPaymentsForCustomerPaymentJournal
     */
    readonly $select?: Array<ListCustomerPaymentsForCustomerPaymentJournalSelectEnum>
}

/**
 * Request parameters for patchCustomerPayment operation in CustomerPaymentApi.
 * @export
 * @interface CustomerPaymentApiPatchCustomerPaymentRequest
 */
export interface CustomerPaymentApiPatchCustomerPaymentRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerPaymentApiPatchCustomerPayment
     */
    readonly companyId: string

    /**
     * (v1.0) id for customerPayment
     * @type {string}
     * @memberof CustomerPaymentApiPatchCustomerPayment
     */
    readonly customerPaymentId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof CustomerPaymentApiPatchCustomerPayment
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof CustomerPaymentApiPatchCustomerPayment
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostCustomerPaymentForCustomerPaymentJournalRequest}
     * @memberof CustomerPaymentApiPatchCustomerPayment
     */
    readonly postCustomerPaymentForCustomerPaymentJournalRequest: PostCustomerPaymentForCustomerPaymentJournalRequest
}

/**
 * Request parameters for patchCustomerPaymentForCustomerPaymentJournal operation in CustomerPaymentApi.
 * @export
 * @interface CustomerPaymentApiPatchCustomerPaymentForCustomerPaymentJournalRequest
 */
export interface CustomerPaymentApiPatchCustomerPaymentForCustomerPaymentJournalRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerPaymentApiPatchCustomerPaymentForCustomerPaymentJournal
     */
    readonly companyId: string

    /**
     * (v1.0) id for customerPaymentJournal
     * @type {string}
     * @memberof CustomerPaymentApiPatchCustomerPaymentForCustomerPaymentJournal
     */
    readonly customerPaymentJournalId: string

    /**
     * (v1.0) id for customerPayment
     * @type {string}
     * @memberof CustomerPaymentApiPatchCustomerPaymentForCustomerPaymentJournal
     */
    readonly customerPaymentId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof CustomerPaymentApiPatchCustomerPaymentForCustomerPaymentJournal
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof CustomerPaymentApiPatchCustomerPaymentForCustomerPaymentJournal
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostCustomerPaymentForCustomerPaymentJournalRequest}
     * @memberof CustomerPaymentApiPatchCustomerPaymentForCustomerPaymentJournal
     */
    readonly postCustomerPaymentForCustomerPaymentJournalRequest: PostCustomerPaymentForCustomerPaymentJournalRequest
}

/**
 * Request parameters for postCustomerPayment operation in CustomerPaymentApi.
 * @export
 * @interface CustomerPaymentApiPostCustomerPaymentRequest
 */
export interface CustomerPaymentApiPostCustomerPaymentRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerPaymentApiPostCustomerPayment
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof CustomerPaymentApiPostCustomerPayment
     */
    readonly contentType: string

    /**
     * 
     * @type {PostCustomerPaymentForCustomerPaymentJournalRequest}
     * @memberof CustomerPaymentApiPostCustomerPayment
     */
    readonly postCustomerPaymentForCustomerPaymentJournalRequest: PostCustomerPaymentForCustomerPaymentJournalRequest
}

/**
 * Request parameters for postCustomerPaymentForCustomerPaymentJournal operation in CustomerPaymentApi.
 * @export
 * @interface CustomerPaymentApiPostCustomerPaymentForCustomerPaymentJournalRequest
 */
export interface CustomerPaymentApiPostCustomerPaymentForCustomerPaymentJournalRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerPaymentApiPostCustomerPaymentForCustomerPaymentJournal
     */
    readonly companyId: string

    /**
     * (v1.0) id for customerPaymentJournal
     * @type {string}
     * @memberof CustomerPaymentApiPostCustomerPaymentForCustomerPaymentJournal
     */
    readonly customerPaymentJournalId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof CustomerPaymentApiPostCustomerPaymentForCustomerPaymentJournal
     */
    readonly contentType: string

    /**
     * 
     * @type {PostCustomerPaymentForCustomerPaymentJournalRequest}
     * @memberof CustomerPaymentApiPostCustomerPaymentForCustomerPaymentJournal
     */
    readonly postCustomerPaymentForCustomerPaymentJournalRequest: PostCustomerPaymentForCustomerPaymentJournalRequest
}

/**
 * CustomerPaymentApi - object-oriented interface
 * @export
 * @class CustomerPaymentApi
 * @extends {BaseAPI}
 */
export class CustomerPaymentApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type customerPayment in Dynamics 365 Business Central
     * @param {CustomerPaymentApiDeleteCustomerPaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerPaymentApi
     */
    public deleteCustomerPayment(requestParameters: CustomerPaymentApiDeleteCustomerPaymentRequest, options?: RawAxiosRequestConfig) {
        return CustomerPaymentApiFp(this.configuration).deleteCustomerPayment(requestParameters.companyId, requestParameters.customerPaymentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an object of type customerPayment in Dynamics 365 Business Central
     * @param {CustomerPaymentApiDeleteCustomerPaymentForCustomerPaymentJournalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerPaymentApi
     */
    public deleteCustomerPaymentForCustomerPaymentJournal(requestParameters: CustomerPaymentApiDeleteCustomerPaymentForCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig) {
        return CustomerPaymentApiFp(this.configuration).deleteCustomerPaymentForCustomerPaymentJournal(requestParameters.companyId, requestParameters.customerPaymentJournalId, requestParameters.customerPaymentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type customerPayment for Dynamics 365 Business Central.
     * @param {CustomerPaymentApiGetCustomerPaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerPaymentApi
     */
    public getCustomerPayment(requestParameters: CustomerPaymentApiGetCustomerPaymentRequest, options?: RawAxiosRequestConfig) {
        return CustomerPaymentApiFp(this.configuration).getCustomerPayment(requestParameters.companyId, requestParameters.customerPaymentId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type customerPayment for Dynamics 365 Business Central.
     * @param {CustomerPaymentApiGetCustomerPaymentForCustomerPaymentJournalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerPaymentApi
     */
    public getCustomerPaymentForCustomerPaymentJournal(requestParameters: CustomerPaymentApiGetCustomerPaymentForCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig) {
        return CustomerPaymentApiFp(this.configuration).getCustomerPaymentForCustomerPaymentJournal(requestParameters.companyId, requestParameters.customerPaymentJournalId, requestParameters.customerPaymentId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of customerPayments
     * @param {CustomerPaymentApiListCustomerPaymentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerPaymentApi
     */
    public listCustomerPayments(requestParameters: CustomerPaymentApiListCustomerPaymentsRequest, options?: RawAxiosRequestConfig) {
        return CustomerPaymentApiFp(this.configuration).listCustomerPayments(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of customerPayments
     * @param {CustomerPaymentApiListCustomerPaymentsForCustomerPaymentJournalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerPaymentApi
     */
    public listCustomerPaymentsForCustomerPaymentJournal(requestParameters: CustomerPaymentApiListCustomerPaymentsForCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig) {
        return CustomerPaymentApiFp(this.configuration).listCustomerPaymentsForCustomerPaymentJournal(requestParameters.companyId, requestParameters.customerPaymentJournalId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type customerPayment in Dynamics 365 Business Central
     * @param {CustomerPaymentApiPatchCustomerPaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerPaymentApi
     */
    public patchCustomerPayment(requestParameters: CustomerPaymentApiPatchCustomerPaymentRequest, options?: RawAxiosRequestConfig) {
        return CustomerPaymentApiFp(this.configuration).patchCustomerPayment(requestParameters.companyId, requestParameters.customerPaymentId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postCustomerPaymentForCustomerPaymentJournalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type customerPayment in Dynamics 365 Business Central
     * @param {CustomerPaymentApiPatchCustomerPaymentForCustomerPaymentJournalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerPaymentApi
     */
    public patchCustomerPaymentForCustomerPaymentJournal(requestParameters: CustomerPaymentApiPatchCustomerPaymentForCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig) {
        return CustomerPaymentApiFp(this.configuration).patchCustomerPaymentForCustomerPaymentJournal(requestParameters.companyId, requestParameters.customerPaymentJournalId, requestParameters.customerPaymentId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postCustomerPaymentForCustomerPaymentJournalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type customerPayment in Dynamics 365 Business Central
     * @param {CustomerPaymentApiPostCustomerPaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerPaymentApi
     */
    public postCustomerPayment(requestParameters: CustomerPaymentApiPostCustomerPaymentRequest, options?: RawAxiosRequestConfig) {
        return CustomerPaymentApiFp(this.configuration).postCustomerPayment(requestParameters.companyId, requestParameters.contentType, requestParameters.postCustomerPaymentForCustomerPaymentJournalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type customerPayment in Dynamics 365 Business Central
     * @param {CustomerPaymentApiPostCustomerPaymentForCustomerPaymentJournalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerPaymentApi
     */
    public postCustomerPaymentForCustomerPaymentJournal(requestParameters: CustomerPaymentApiPostCustomerPaymentForCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig) {
        return CustomerPaymentApiFp(this.configuration).postCustomerPaymentForCustomerPaymentJournal(requestParameters.companyId, requestParameters.customerPaymentJournalId, requestParameters.contentType, requestParameters.postCustomerPaymentForCustomerPaymentJournalRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetCustomerPaymentExpandEnum = {
    Customer: 'customer'
} as const;
export type GetCustomerPaymentExpandEnum = typeof GetCustomerPaymentExpandEnum[keyof typeof GetCustomerPaymentExpandEnum];
/**
 * @export
 */
export const GetCustomerPaymentSelectEnum = {
    Id: 'id',
    JournalDisplayName: 'journalDisplayName',
    LineNumber: 'lineNumber',
    CustomerId: 'customerId',
    CustomerNumber: 'customerNumber',
    ContactId: 'contactId',
    PostingDate: 'postingDate',
    DocumentNumber: 'documentNumber',
    ExternalDocumentNumber: 'externalDocumentNumber',
    Amount: 'amount',
    AppliesToInvoiceId: 'appliesToInvoiceId',
    AppliesToInvoiceNumber: 'appliesToInvoiceNumber',
    Description: 'description',
    Comment: 'comment',
    Dimensions: 'dimensions',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type GetCustomerPaymentSelectEnum = typeof GetCustomerPaymentSelectEnum[keyof typeof GetCustomerPaymentSelectEnum];
/**
 * @export
 */
export const GetCustomerPaymentForCustomerPaymentJournalExpandEnum = {
    Customer: 'customer'
} as const;
export type GetCustomerPaymentForCustomerPaymentJournalExpandEnum = typeof GetCustomerPaymentForCustomerPaymentJournalExpandEnum[keyof typeof GetCustomerPaymentForCustomerPaymentJournalExpandEnum];
/**
 * @export
 */
export const GetCustomerPaymentForCustomerPaymentJournalSelectEnum = {
    Id: 'id',
    JournalDisplayName: 'journalDisplayName',
    LineNumber: 'lineNumber',
    CustomerId: 'customerId',
    CustomerNumber: 'customerNumber',
    ContactId: 'contactId',
    PostingDate: 'postingDate',
    DocumentNumber: 'documentNumber',
    ExternalDocumentNumber: 'externalDocumentNumber',
    Amount: 'amount',
    AppliesToInvoiceId: 'appliesToInvoiceId',
    AppliesToInvoiceNumber: 'appliesToInvoiceNumber',
    Description: 'description',
    Comment: 'comment',
    Dimensions: 'dimensions',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type GetCustomerPaymentForCustomerPaymentJournalSelectEnum = typeof GetCustomerPaymentForCustomerPaymentJournalSelectEnum[keyof typeof GetCustomerPaymentForCustomerPaymentJournalSelectEnum];
/**
 * @export
 */
export const ListCustomerPaymentsExpandEnum = {
    Customer: 'customer'
} as const;
export type ListCustomerPaymentsExpandEnum = typeof ListCustomerPaymentsExpandEnum[keyof typeof ListCustomerPaymentsExpandEnum];
/**
 * @export
 */
export const ListCustomerPaymentsSelectEnum = {
    Id: 'id',
    JournalDisplayName: 'journalDisplayName',
    LineNumber: 'lineNumber',
    CustomerId: 'customerId',
    CustomerNumber: 'customerNumber',
    ContactId: 'contactId',
    PostingDate: 'postingDate',
    DocumentNumber: 'documentNumber',
    ExternalDocumentNumber: 'externalDocumentNumber',
    Amount: 'amount',
    AppliesToInvoiceId: 'appliesToInvoiceId',
    AppliesToInvoiceNumber: 'appliesToInvoiceNumber',
    Description: 'description',
    Comment: 'comment',
    Dimensions: 'dimensions',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type ListCustomerPaymentsSelectEnum = typeof ListCustomerPaymentsSelectEnum[keyof typeof ListCustomerPaymentsSelectEnum];
/**
 * @export
 */
export const ListCustomerPaymentsForCustomerPaymentJournalExpandEnum = {
    Customer: 'customer'
} as const;
export type ListCustomerPaymentsForCustomerPaymentJournalExpandEnum = typeof ListCustomerPaymentsForCustomerPaymentJournalExpandEnum[keyof typeof ListCustomerPaymentsForCustomerPaymentJournalExpandEnum];
/**
 * @export
 */
export const ListCustomerPaymentsForCustomerPaymentJournalSelectEnum = {
    Id: 'id',
    JournalDisplayName: 'journalDisplayName',
    LineNumber: 'lineNumber',
    CustomerId: 'customerId',
    CustomerNumber: 'customerNumber',
    ContactId: 'contactId',
    PostingDate: 'postingDate',
    DocumentNumber: 'documentNumber',
    ExternalDocumentNumber: 'externalDocumentNumber',
    Amount: 'amount',
    AppliesToInvoiceId: 'appliesToInvoiceId',
    AppliesToInvoiceNumber: 'appliesToInvoiceNumber',
    Description: 'description',
    Comment: 'comment',
    Dimensions: 'dimensions',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type ListCustomerPaymentsForCustomerPaymentJournalSelectEnum = typeof ListCustomerPaymentsForCustomerPaymentJournalSelectEnum[keyof typeof ListCustomerPaymentsForCustomerPaymentJournalSelectEnum];
