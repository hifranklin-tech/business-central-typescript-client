/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ListSalesQuotes200Response } from '../model';
// @ts-ignore
import type { PostSalesQuoteRequest } from '../model';
// @ts-ignore
import type { SalesQuote } from '../model';
/**
 * SalesQuoteApi - axios parameter creator
 * @export
 */
export const SalesQuoteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type salesQuote in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesQuote: async (companyId: string, salesQuoteId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteSalesQuote', 'companyId', companyId)
            // verify required parameter 'salesQuoteId' is not null or undefined
            assertParamExists('deleteSalesQuote', 'salesQuoteId', salesQuoteId)
            const localVarPath = `/companies({company_id})/salesQuotes({salesQuote_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesQuote_id"}}`, encodeURIComponent(String(salesQuoteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesQuote for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {Array<GetSalesQuoteExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesQuoteSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesQuote: async (companyId: string, salesQuoteId: string, $expand?: Array<GetSalesQuoteExpandEnum>, $select?: Array<GetSalesQuoteSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSalesQuote', 'companyId', companyId)
            // verify required parameter 'salesQuoteId' is not null or undefined
            assertParamExists('getSalesQuote', 'salesQuoteId', salesQuoteId)
            const localVarPath = `/companies({company_id})/salesQuotes({salesQuote_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesQuote_id"}}`, encodeURIComponent(String(salesQuoteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of salesQuotes
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesQuotesExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesQuotesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesQuotes: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesQuotesExpandEnum>, $select?: Array<ListSalesQuotesSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listSalesQuotes', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/salesQuotes`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Performs the makeInvoice action for salesQuotes entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeInvoiceActionSalesQuotes: async (companyId: string, salesQuoteId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('makeInvoiceActionSalesQuotes', 'companyId', companyId)
            // verify required parameter 'salesQuoteId' is not null or undefined
            assertParamExists('makeInvoiceActionSalesQuotes', 'salesQuoteId', salesQuoteId)
            const localVarPath = `/companies({company_id})/salesQuotes({salesQuote_id})/Microsoft.NAV.makeInvoice`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesQuote_id"}}`, encodeURIComponent(String(salesQuoteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Performs the makeOrder action for salesQuotes entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeOrderActionSalesQuotes: async (companyId: string, salesQuoteId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('makeOrderActionSalesQuotes', 'companyId', companyId)
            // verify required parameter 'salesQuoteId' is not null or undefined
            assertParamExists('makeOrderActionSalesQuotes', 'salesQuoteId', salesQuoteId)
            const localVarPath = `/companies({company_id})/salesQuotes({salesQuote_id})/Microsoft.NAV.makeOrder`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesQuote_id"}}`, encodeURIComponent(String(salesQuoteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type salesQuote in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesQuoteRequest} postSalesQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesQuote: async (companyId: string, salesQuoteId: string, contentType: string, ifMatch: string, postSalesQuoteRequest: PostSalesQuoteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchSalesQuote', 'companyId', companyId)
            // verify required parameter 'salesQuoteId' is not null or undefined
            assertParamExists('patchSalesQuote', 'salesQuoteId', salesQuoteId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchSalesQuote', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchSalesQuote', 'ifMatch', ifMatch)
            // verify required parameter 'postSalesQuoteRequest' is not null or undefined
            assertParamExists('patchSalesQuote', 'postSalesQuoteRequest', postSalesQuoteRequest)
            const localVarPath = `/companies({company_id})/salesQuotes({salesQuote_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesQuote_id"}}`, encodeURIComponent(String(salesQuoteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesQuoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type salesQuote in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesQuoteRequest} postSalesQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesQuote: async (companyId: string, contentType: string, postSalesQuoteRequest: PostSalesQuoteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postSalesQuote', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postSalesQuote', 'contentType', contentType)
            // verify required parameter 'postSalesQuoteRequest' is not null or undefined
            assertParamExists('postSalesQuote', 'postSalesQuoteRequest', postSalesQuoteRequest)
            const localVarPath = `/companies({company_id})/salesQuotes`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesQuoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Performs the send action for salesQuotes entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendActionSalesQuotes: async (companyId: string, salesQuoteId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('sendActionSalesQuotes', 'companyId', companyId)
            // verify required parameter 'salesQuoteId' is not null or undefined
            assertParamExists('sendActionSalesQuotes', 'salesQuoteId', salesQuoteId)
            const localVarPath = `/companies({company_id})/salesQuotes({salesQuote_id})/Microsoft.NAV.send`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesQuote_id"}}`, encodeURIComponent(String(salesQuoteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalesQuoteApi - functional programming interface
 * @export
 */
export const SalesQuoteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalesQuoteApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type salesQuote in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalesQuote(companyId: string, salesQuoteId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalesQuote(companyId, salesQuoteId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesQuoteApi.deleteSalesQuote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesQuote for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {Array<GetSalesQuoteExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesQuoteSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesQuote(companyId: string, salesQuoteId: string, $expand?: Array<GetSalesQuoteExpandEnum>, $select?: Array<GetSalesQuoteSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesQuote>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesQuote(companyId, salesQuoteId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesQuoteApi.getSalesQuote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of salesQuotes
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesQuotesExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesQuotesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSalesQuotes(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesQuotesExpandEnum>, $select?: Array<ListSalesQuotesSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListSalesQuotes200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSalesQuotes(companyId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesQuoteApi.listSalesQuotes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Performs the makeInvoice action for salesQuotes entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async makeInvoiceActionSalesQuotes(companyId: string, salesQuoteId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.makeInvoiceActionSalesQuotes(companyId, salesQuoteId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesQuoteApi.makeInvoiceActionSalesQuotes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Performs the makeOrder action for salesQuotes entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async makeOrderActionSalesQuotes(companyId: string, salesQuoteId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.makeOrderActionSalesQuotes(companyId, salesQuoteId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesQuoteApi.makeOrderActionSalesQuotes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type salesQuote in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesQuoteRequest} postSalesQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSalesQuote(companyId: string, salesQuoteId: string, contentType: string, ifMatch: string, postSalesQuoteRequest: PostSalesQuoteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesQuote>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSalesQuote(companyId, salesQuoteId, contentType, ifMatch, postSalesQuoteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesQuoteApi.patchSalesQuote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type salesQuote in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesQuoteRequest} postSalesQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSalesQuote(companyId: string, contentType: string, postSalesQuoteRequest: PostSalesQuoteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesQuote>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSalesQuote(companyId, contentType, postSalesQuoteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesQuoteApi.postSalesQuote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Performs the send action for salesQuotes entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendActionSalesQuotes(companyId: string, salesQuoteId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendActionSalesQuotes(companyId, salesQuoteId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesQuoteApi.sendActionSalesQuotes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SalesQuoteApi - factory interface
 * @export
 */
export const SalesQuoteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalesQuoteApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type salesQuote in Dynamics 365 Business Central
         * @param {SalesQuoteApiDeleteSalesQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesQuote(requestParameters: SalesQuoteApiDeleteSalesQuoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSalesQuote(requestParameters.companyId, requestParameters.salesQuoteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesQuote for Dynamics 365 Business Central.
         * @param {SalesQuoteApiGetSalesQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesQuote(requestParameters: SalesQuoteApiGetSalesQuoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesQuote> {
            return localVarFp.getSalesQuote(requestParameters.companyId, requestParameters.salesQuoteId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of salesQuotes
         * @param {SalesQuoteApiListSalesQuotesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesQuotes(requestParameters: SalesQuoteApiListSalesQuotesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListSalesQuotes200Response> {
            return localVarFp.listSalesQuotes(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Performs the makeInvoice action for salesQuotes entity
         * @param {SalesQuoteApiMakeInvoiceActionSalesQuotesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeInvoiceActionSalesQuotes(requestParameters: SalesQuoteApiMakeInvoiceActionSalesQuotesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.makeInvoiceActionSalesQuotes(requestParameters.companyId, requestParameters.salesQuoteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Performs the makeOrder action for salesQuotes entity
         * @param {SalesQuoteApiMakeOrderActionSalesQuotesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeOrderActionSalesQuotes(requestParameters: SalesQuoteApiMakeOrderActionSalesQuotesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.makeOrderActionSalesQuotes(requestParameters.companyId, requestParameters.salesQuoteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type salesQuote in Dynamics 365 Business Central
         * @param {SalesQuoteApiPatchSalesQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesQuote(requestParameters: SalesQuoteApiPatchSalesQuoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesQuote> {
            return localVarFp.patchSalesQuote(requestParameters.companyId, requestParameters.salesQuoteId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesQuoteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type salesQuote in Dynamics 365 Business Central
         * @param {SalesQuoteApiPostSalesQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesQuote(requestParameters: SalesQuoteApiPostSalesQuoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesQuote> {
            return localVarFp.postSalesQuote(requestParameters.companyId, requestParameters.contentType, requestParameters.postSalesQuoteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Performs the send action for salesQuotes entity
         * @param {SalesQuoteApiSendActionSalesQuotesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendActionSalesQuotes(requestParameters: SalesQuoteApiSendActionSalesQuotesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendActionSalesQuotes(requestParameters.companyId, requestParameters.salesQuoteId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteSalesQuote operation in SalesQuoteApi.
 * @export
 * @interface SalesQuoteApiDeleteSalesQuoteRequest
 */
export interface SalesQuoteApiDeleteSalesQuoteRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesQuoteApiDeleteSalesQuote
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesQuote
     * @type {string}
     * @memberof SalesQuoteApiDeleteSalesQuote
     */
    readonly salesQuoteId: string
}

/**
 * Request parameters for getSalesQuote operation in SalesQuoteApi.
 * @export
 * @interface SalesQuoteApiGetSalesQuoteRequest
 */
export interface SalesQuoteApiGetSalesQuoteRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesQuoteApiGetSalesQuote
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesQuote
     * @type {string}
     * @memberof SalesQuoteApiGetSalesQuote
     */
    readonly salesQuoteId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'salesQuoteLines' | 'pdfDocument' | 'customer' | 'currency' | 'paymentTerm' | 'shipmentMethod'>}
     * @memberof SalesQuoteApiGetSalesQuote
     */
    readonly $expand?: Array<GetSalesQuoteExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'externalDocumentNumber' | 'documentDate' | 'dueDate' | 'customerId' | 'contactId' | 'customerNumber' | 'customerName' | 'billToName' | 'billToCustomerId' | 'billToCustomerNumber' | 'shipToName' | 'shipToContact' | 'sellingPostalAddress' | 'billingPostalAddress' | 'shippingPostalAddress' | 'currencyId' | 'currencyCode' | 'paymentTermsId' | 'shipmentMethodId' | 'salesperson' | 'discountAmount' | 'totalAmountExcludingTax' | 'totalTaxAmount' | 'totalAmountIncludingTax' | 'status' | 'sentDate' | 'validUntilDate' | 'acceptedDate' | 'lastModifiedDateTime' | 'phoneNumber' | 'email'>}
     * @memberof SalesQuoteApiGetSalesQuote
     */
    readonly $select?: Array<GetSalesQuoteSelectEnum>
}

/**
 * Request parameters for listSalesQuotes operation in SalesQuoteApi.
 * @export
 * @interface SalesQuoteApiListSalesQuotesRequest
 */
export interface SalesQuoteApiListSalesQuotesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesQuoteApiListSalesQuotes
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof SalesQuoteApiListSalesQuotes
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof SalesQuoteApiListSalesQuotes
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof SalesQuoteApiListSalesQuotes
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof SalesQuoteApiListSalesQuotes
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'salesQuoteLines' | 'pdfDocument' | 'customer' | 'currency' | 'paymentTerm' | 'shipmentMethod'>}
     * @memberof SalesQuoteApiListSalesQuotes
     */
    readonly $expand?: Array<ListSalesQuotesExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'externalDocumentNumber' | 'documentDate' | 'dueDate' | 'customerId' | 'contactId' | 'customerNumber' | 'customerName' | 'billToName' | 'billToCustomerId' | 'billToCustomerNumber' | 'shipToName' | 'shipToContact' | 'sellingPostalAddress' | 'billingPostalAddress' | 'shippingPostalAddress' | 'currencyId' | 'currencyCode' | 'paymentTermsId' | 'shipmentMethodId' | 'salesperson' | 'discountAmount' | 'totalAmountExcludingTax' | 'totalTaxAmount' | 'totalAmountIncludingTax' | 'status' | 'sentDate' | 'validUntilDate' | 'acceptedDate' | 'lastModifiedDateTime' | 'phoneNumber' | 'email'>}
     * @memberof SalesQuoteApiListSalesQuotes
     */
    readonly $select?: Array<ListSalesQuotesSelectEnum>
}

/**
 * Request parameters for makeInvoiceActionSalesQuotes operation in SalesQuoteApi.
 * @export
 * @interface SalesQuoteApiMakeInvoiceActionSalesQuotesRequest
 */
export interface SalesQuoteApiMakeInvoiceActionSalesQuotesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesQuoteApiMakeInvoiceActionSalesQuotes
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesQuote
     * @type {string}
     * @memberof SalesQuoteApiMakeInvoiceActionSalesQuotes
     */
    readonly salesQuoteId: string
}

/**
 * Request parameters for makeOrderActionSalesQuotes operation in SalesQuoteApi.
 * @export
 * @interface SalesQuoteApiMakeOrderActionSalesQuotesRequest
 */
export interface SalesQuoteApiMakeOrderActionSalesQuotesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesQuoteApiMakeOrderActionSalesQuotes
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesQuote
     * @type {string}
     * @memberof SalesQuoteApiMakeOrderActionSalesQuotes
     */
    readonly salesQuoteId: string
}

/**
 * Request parameters for patchSalesQuote operation in SalesQuoteApi.
 * @export
 * @interface SalesQuoteApiPatchSalesQuoteRequest
 */
export interface SalesQuoteApiPatchSalesQuoteRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesQuoteApiPatchSalesQuote
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesQuote
     * @type {string}
     * @memberof SalesQuoteApiPatchSalesQuote
     */
    readonly salesQuoteId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesQuoteApiPatchSalesQuote
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof SalesQuoteApiPatchSalesQuote
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostSalesQuoteRequest}
     * @memberof SalesQuoteApiPatchSalesQuote
     */
    readonly postSalesQuoteRequest: PostSalesQuoteRequest
}

/**
 * Request parameters for postSalesQuote operation in SalesQuoteApi.
 * @export
 * @interface SalesQuoteApiPostSalesQuoteRequest
 */
export interface SalesQuoteApiPostSalesQuoteRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesQuoteApiPostSalesQuote
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesQuoteApiPostSalesQuote
     */
    readonly contentType: string

    /**
     * 
     * @type {PostSalesQuoteRequest}
     * @memberof SalesQuoteApiPostSalesQuote
     */
    readonly postSalesQuoteRequest: PostSalesQuoteRequest
}

/**
 * Request parameters for sendActionSalesQuotes operation in SalesQuoteApi.
 * @export
 * @interface SalesQuoteApiSendActionSalesQuotesRequest
 */
export interface SalesQuoteApiSendActionSalesQuotesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesQuoteApiSendActionSalesQuotes
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesQuote
     * @type {string}
     * @memberof SalesQuoteApiSendActionSalesQuotes
     */
    readonly salesQuoteId: string
}

/**
 * SalesQuoteApi - object-oriented interface
 * @export
 * @class SalesQuoteApi
 * @extends {BaseAPI}
 */
export class SalesQuoteApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type salesQuote in Dynamics 365 Business Central
     * @param {SalesQuoteApiDeleteSalesQuoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesQuoteApi
     */
    public deleteSalesQuote(requestParameters: SalesQuoteApiDeleteSalesQuoteRequest, options?: RawAxiosRequestConfig) {
        return SalesQuoteApiFp(this.configuration).deleteSalesQuote(requestParameters.companyId, requestParameters.salesQuoteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type salesQuote for Dynamics 365 Business Central.
     * @param {SalesQuoteApiGetSalesQuoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesQuoteApi
     */
    public getSalesQuote(requestParameters: SalesQuoteApiGetSalesQuoteRequest, options?: RawAxiosRequestConfig) {
        return SalesQuoteApiFp(this.configuration).getSalesQuote(requestParameters.companyId, requestParameters.salesQuoteId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of salesQuotes
     * @param {SalesQuoteApiListSalesQuotesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesQuoteApi
     */
    public listSalesQuotes(requestParameters: SalesQuoteApiListSalesQuotesRequest, options?: RawAxiosRequestConfig) {
        return SalesQuoteApiFp(this.configuration).listSalesQuotes(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Performs the makeInvoice action for salesQuotes entity
     * @param {SalesQuoteApiMakeInvoiceActionSalesQuotesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesQuoteApi
     */
    public makeInvoiceActionSalesQuotes(requestParameters: SalesQuoteApiMakeInvoiceActionSalesQuotesRequest, options?: RawAxiosRequestConfig) {
        return SalesQuoteApiFp(this.configuration).makeInvoiceActionSalesQuotes(requestParameters.companyId, requestParameters.salesQuoteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Performs the makeOrder action for salesQuotes entity
     * @param {SalesQuoteApiMakeOrderActionSalesQuotesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesQuoteApi
     */
    public makeOrderActionSalesQuotes(requestParameters: SalesQuoteApiMakeOrderActionSalesQuotesRequest, options?: RawAxiosRequestConfig) {
        return SalesQuoteApiFp(this.configuration).makeOrderActionSalesQuotes(requestParameters.companyId, requestParameters.salesQuoteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type salesQuote in Dynamics 365 Business Central
     * @param {SalesQuoteApiPatchSalesQuoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesQuoteApi
     */
    public patchSalesQuote(requestParameters: SalesQuoteApiPatchSalesQuoteRequest, options?: RawAxiosRequestConfig) {
        return SalesQuoteApiFp(this.configuration).patchSalesQuote(requestParameters.companyId, requestParameters.salesQuoteId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesQuoteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type salesQuote in Dynamics 365 Business Central
     * @param {SalesQuoteApiPostSalesQuoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesQuoteApi
     */
    public postSalesQuote(requestParameters: SalesQuoteApiPostSalesQuoteRequest, options?: RawAxiosRequestConfig) {
        return SalesQuoteApiFp(this.configuration).postSalesQuote(requestParameters.companyId, requestParameters.contentType, requestParameters.postSalesQuoteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Performs the send action for salesQuotes entity
     * @param {SalesQuoteApiSendActionSalesQuotesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesQuoteApi
     */
    public sendActionSalesQuotes(requestParameters: SalesQuoteApiSendActionSalesQuotesRequest, options?: RawAxiosRequestConfig) {
        return SalesQuoteApiFp(this.configuration).sendActionSalesQuotes(requestParameters.companyId, requestParameters.salesQuoteId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetSalesQuoteExpandEnum = {
    SalesQuoteLines: 'salesQuoteLines',
    PdfDocument: 'pdfDocument',
    Customer: 'customer',
    Currency: 'currency',
    PaymentTerm: 'paymentTerm',
    ShipmentMethod: 'shipmentMethod'
} as const;
export type GetSalesQuoteExpandEnum = typeof GetSalesQuoteExpandEnum[keyof typeof GetSalesQuoteExpandEnum];
/**
 * @export
 */
export const GetSalesQuoteSelectEnum = {
    Id: 'id',
    Number: 'number',
    ExternalDocumentNumber: 'externalDocumentNumber',
    DocumentDate: 'documentDate',
    DueDate: 'dueDate',
    CustomerId: 'customerId',
    ContactId: 'contactId',
    CustomerNumber: 'customerNumber',
    CustomerName: 'customerName',
    BillToName: 'billToName',
    BillToCustomerId: 'billToCustomerId',
    BillToCustomerNumber: 'billToCustomerNumber',
    ShipToName: 'shipToName',
    ShipToContact: 'shipToContact',
    SellingPostalAddress: 'sellingPostalAddress',
    BillingPostalAddress: 'billingPostalAddress',
    ShippingPostalAddress: 'shippingPostalAddress',
    CurrencyId: 'currencyId',
    CurrencyCode: 'currencyCode',
    PaymentTermsId: 'paymentTermsId',
    ShipmentMethodId: 'shipmentMethodId',
    Salesperson: 'salesperson',
    DiscountAmount: 'discountAmount',
    TotalAmountExcludingTax: 'totalAmountExcludingTax',
    TotalTaxAmount: 'totalTaxAmount',
    TotalAmountIncludingTax: 'totalAmountIncludingTax',
    Status: 'status',
    SentDate: 'sentDate',
    ValidUntilDate: 'validUntilDate',
    AcceptedDate: 'acceptedDate',
    LastModifiedDateTime: 'lastModifiedDateTime',
    PhoneNumber: 'phoneNumber',
    Email: 'email'
} as const;
export type GetSalesQuoteSelectEnum = typeof GetSalesQuoteSelectEnum[keyof typeof GetSalesQuoteSelectEnum];
/**
 * @export
 */
export const ListSalesQuotesExpandEnum = {
    SalesQuoteLines: 'salesQuoteLines',
    PdfDocument: 'pdfDocument',
    Customer: 'customer',
    Currency: 'currency',
    PaymentTerm: 'paymentTerm',
    ShipmentMethod: 'shipmentMethod'
} as const;
export type ListSalesQuotesExpandEnum = typeof ListSalesQuotesExpandEnum[keyof typeof ListSalesQuotesExpandEnum];
/**
 * @export
 */
export const ListSalesQuotesSelectEnum = {
    Id: 'id',
    Number: 'number',
    ExternalDocumentNumber: 'externalDocumentNumber',
    DocumentDate: 'documentDate',
    DueDate: 'dueDate',
    CustomerId: 'customerId',
    ContactId: 'contactId',
    CustomerNumber: 'customerNumber',
    CustomerName: 'customerName',
    BillToName: 'billToName',
    BillToCustomerId: 'billToCustomerId',
    BillToCustomerNumber: 'billToCustomerNumber',
    ShipToName: 'shipToName',
    ShipToContact: 'shipToContact',
    SellingPostalAddress: 'sellingPostalAddress',
    BillingPostalAddress: 'billingPostalAddress',
    ShippingPostalAddress: 'shippingPostalAddress',
    CurrencyId: 'currencyId',
    CurrencyCode: 'currencyCode',
    PaymentTermsId: 'paymentTermsId',
    ShipmentMethodId: 'shipmentMethodId',
    Salesperson: 'salesperson',
    DiscountAmount: 'discountAmount',
    TotalAmountExcludingTax: 'totalAmountExcludingTax',
    TotalTaxAmount: 'totalTaxAmount',
    TotalAmountIncludingTax: 'totalAmountIncludingTax',
    Status: 'status',
    SentDate: 'sentDate',
    ValidUntilDate: 'validUntilDate',
    AcceptedDate: 'acceptedDate',
    LastModifiedDateTime: 'lastModifiedDateTime',
    PhoneNumber: 'phoneNumber',
    Email: 'email'
} as const;
export type ListSalesQuotesSelectEnum = typeof ListSalesQuotesSelectEnum[keyof typeof ListSalesQuotesSelectEnum];
