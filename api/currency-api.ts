/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Currency } from '../model';
// @ts-ignore
import type { ListCurrencies200Response } from '../model';
// @ts-ignore
import type { PostCurrencyRequest } from '../model';
/**
 * CurrencyApi - axios parameter creator
 * @export
 */
export const CurrencyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type currency in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} currencyId (v1.0) id for currency
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCurrency: async (companyId: string, currencyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteCurrency', 'companyId', companyId)
            // verify required parameter 'currencyId' is not null or undefined
            assertParamExists('deleteCurrency', 'currencyId', currencyId)
            const localVarPath = `/companies({company_id})/currencies({currency_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"currency_id"}}`, encodeURIComponent(String(currencyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type currency for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} currencyId (v1.0) id for currency
         * @param {Array<GetCurrencySelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrency: async (companyId: string, currencyId: string, $select?: Array<GetCurrencySelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCurrency', 'companyId', companyId)
            // verify required parameter 'currencyId' is not null or undefined
            assertParamExists('getCurrency', 'currencyId', currencyId)
            const localVarPath = `/companies({company_id})/currencies({currency_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"currency_id"}}`, encodeURIComponent(String(currencyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of currencies
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListCurrenciesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCurrencies: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListCurrenciesSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listCurrencies', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/currencies`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type currency in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} currencyId (v1.0) id for currency
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostCurrencyRequest} postCurrencyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCurrency: async (companyId: string, currencyId: string, contentType: string, ifMatch: string, postCurrencyRequest: PostCurrencyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchCurrency', 'companyId', companyId)
            // verify required parameter 'currencyId' is not null or undefined
            assertParamExists('patchCurrency', 'currencyId', currencyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchCurrency', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchCurrency', 'ifMatch', ifMatch)
            // verify required parameter 'postCurrencyRequest' is not null or undefined
            assertParamExists('patchCurrency', 'postCurrencyRequest', postCurrencyRequest)
            const localVarPath = `/companies({company_id})/currencies({currency_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"currency_id"}}`, encodeURIComponent(String(currencyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCurrencyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type currency in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostCurrencyRequest} postCurrencyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCurrency: async (companyId: string, contentType: string, postCurrencyRequest: PostCurrencyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postCurrency', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postCurrency', 'contentType', contentType)
            // verify required parameter 'postCurrencyRequest' is not null or undefined
            assertParamExists('postCurrency', 'postCurrencyRequest', postCurrencyRequest)
            const localVarPath = `/companies({company_id})/currencies`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCurrencyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CurrencyApi - functional programming interface
 * @export
 */
export const CurrencyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CurrencyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type currency in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} currencyId (v1.0) id for currency
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCurrency(companyId: string, currencyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCurrency(companyId, currencyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CurrencyApi.deleteCurrency']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type currency for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} currencyId (v1.0) id for currency
         * @param {Array<GetCurrencySelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrency(companyId: string, currencyId: string, $select?: Array<GetCurrencySelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Currency>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrency(companyId, currencyId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CurrencyApi.getCurrency']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of currencies
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListCurrenciesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCurrencies(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListCurrenciesSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCurrencies200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCurrencies(companyId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CurrencyApi.listCurrencies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type currency in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} currencyId (v1.0) id for currency
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostCurrencyRequest} postCurrencyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCurrency(companyId: string, currencyId: string, contentType: string, ifMatch: string, postCurrencyRequest: PostCurrencyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Currency>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCurrency(companyId, currencyId, contentType, ifMatch, postCurrencyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CurrencyApi.patchCurrency']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type currency in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostCurrencyRequest} postCurrencyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCurrency(companyId: string, contentType: string, postCurrencyRequest: PostCurrencyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Currency>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCurrency(companyId, contentType, postCurrencyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CurrencyApi.postCurrency']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CurrencyApi - factory interface
 * @export
 */
export const CurrencyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CurrencyApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type currency in Dynamics 365 Business Central
         * @param {CurrencyApiDeleteCurrencyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCurrency(requestParameters: CurrencyApiDeleteCurrencyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCurrency(requestParameters.companyId, requestParameters.currencyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type currency for Dynamics 365 Business Central.
         * @param {CurrencyApiGetCurrencyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrency(requestParameters: CurrencyApiGetCurrencyRequest, options?: RawAxiosRequestConfig): AxiosPromise<Currency> {
            return localVarFp.getCurrency(requestParameters.companyId, requestParameters.currencyId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of currencies
         * @param {CurrencyApiListCurrenciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCurrencies(requestParameters: CurrencyApiListCurrenciesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListCurrencies200Response> {
            return localVarFp.listCurrencies(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type currency in Dynamics 365 Business Central
         * @param {CurrencyApiPatchCurrencyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCurrency(requestParameters: CurrencyApiPatchCurrencyRequest, options?: RawAxiosRequestConfig): AxiosPromise<Currency> {
            return localVarFp.patchCurrency(requestParameters.companyId, requestParameters.currencyId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postCurrencyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type currency in Dynamics 365 Business Central
         * @param {CurrencyApiPostCurrencyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCurrency(requestParameters: CurrencyApiPostCurrencyRequest, options?: RawAxiosRequestConfig): AxiosPromise<Currency> {
            return localVarFp.postCurrency(requestParameters.companyId, requestParameters.contentType, requestParameters.postCurrencyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteCurrency operation in CurrencyApi.
 * @export
 * @interface CurrencyApiDeleteCurrencyRequest
 */
export interface CurrencyApiDeleteCurrencyRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CurrencyApiDeleteCurrency
     */
    readonly companyId: string

    /**
     * (v1.0) id for currency
     * @type {string}
     * @memberof CurrencyApiDeleteCurrency
     */
    readonly currencyId: string
}

/**
 * Request parameters for getCurrency operation in CurrencyApi.
 * @export
 * @interface CurrencyApiGetCurrencyRequest
 */
export interface CurrencyApiGetCurrencyRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CurrencyApiGetCurrency
     */
    readonly companyId: string

    /**
     * (v1.0) id for currency
     * @type {string}
     * @memberof CurrencyApiGetCurrency
     */
    readonly currencyId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'code' | 'displayName' | 'symbol' | 'amountDecimalPlaces' | 'amountRoundingPrecision' | 'lastModifiedDateTime'>}
     * @memberof CurrencyApiGetCurrency
     */
    readonly $select?: Array<GetCurrencySelectEnum>
}

/**
 * Request parameters for listCurrencies operation in CurrencyApi.
 * @export
 * @interface CurrencyApiListCurrenciesRequest
 */
export interface CurrencyApiListCurrenciesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CurrencyApiListCurrencies
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof CurrencyApiListCurrencies
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof CurrencyApiListCurrencies
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof CurrencyApiListCurrencies
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof CurrencyApiListCurrencies
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'code' | 'displayName' | 'symbol' | 'amountDecimalPlaces' | 'amountRoundingPrecision' | 'lastModifiedDateTime'>}
     * @memberof CurrencyApiListCurrencies
     */
    readonly $select?: Array<ListCurrenciesSelectEnum>
}

/**
 * Request parameters for patchCurrency operation in CurrencyApi.
 * @export
 * @interface CurrencyApiPatchCurrencyRequest
 */
export interface CurrencyApiPatchCurrencyRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CurrencyApiPatchCurrency
     */
    readonly companyId: string

    /**
     * (v1.0) id for currency
     * @type {string}
     * @memberof CurrencyApiPatchCurrency
     */
    readonly currencyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof CurrencyApiPatchCurrency
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof CurrencyApiPatchCurrency
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostCurrencyRequest}
     * @memberof CurrencyApiPatchCurrency
     */
    readonly postCurrencyRequest: PostCurrencyRequest
}

/**
 * Request parameters for postCurrency operation in CurrencyApi.
 * @export
 * @interface CurrencyApiPostCurrencyRequest
 */
export interface CurrencyApiPostCurrencyRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CurrencyApiPostCurrency
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof CurrencyApiPostCurrency
     */
    readonly contentType: string

    /**
     * 
     * @type {PostCurrencyRequest}
     * @memberof CurrencyApiPostCurrency
     */
    readonly postCurrencyRequest: PostCurrencyRequest
}

/**
 * CurrencyApi - object-oriented interface
 * @export
 * @class CurrencyApi
 * @extends {BaseAPI}
 */
export class CurrencyApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type currency in Dynamics 365 Business Central
     * @param {CurrencyApiDeleteCurrencyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApi
     */
    public deleteCurrency(requestParameters: CurrencyApiDeleteCurrencyRequest, options?: RawAxiosRequestConfig) {
        return CurrencyApiFp(this.configuration).deleteCurrency(requestParameters.companyId, requestParameters.currencyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type currency for Dynamics 365 Business Central.
     * @param {CurrencyApiGetCurrencyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApi
     */
    public getCurrency(requestParameters: CurrencyApiGetCurrencyRequest, options?: RawAxiosRequestConfig) {
        return CurrencyApiFp(this.configuration).getCurrency(requestParameters.companyId, requestParameters.currencyId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of currencies
     * @param {CurrencyApiListCurrenciesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApi
     */
    public listCurrencies(requestParameters: CurrencyApiListCurrenciesRequest, options?: RawAxiosRequestConfig) {
        return CurrencyApiFp(this.configuration).listCurrencies(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type currency in Dynamics 365 Business Central
     * @param {CurrencyApiPatchCurrencyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApi
     */
    public patchCurrency(requestParameters: CurrencyApiPatchCurrencyRequest, options?: RawAxiosRequestConfig) {
        return CurrencyApiFp(this.configuration).patchCurrency(requestParameters.companyId, requestParameters.currencyId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postCurrencyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type currency in Dynamics 365 Business Central
     * @param {CurrencyApiPostCurrencyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApi
     */
    public postCurrency(requestParameters: CurrencyApiPostCurrencyRequest, options?: RawAxiosRequestConfig) {
        return CurrencyApiFp(this.configuration).postCurrency(requestParameters.companyId, requestParameters.contentType, requestParameters.postCurrencyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetCurrencySelectEnum = {
    Id: 'id',
    Code: 'code',
    DisplayName: 'displayName',
    Symbol: 'symbol',
    AmountDecimalPlaces: 'amountDecimalPlaces',
    AmountRoundingPrecision: 'amountRoundingPrecision',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type GetCurrencySelectEnum = typeof GetCurrencySelectEnum[keyof typeof GetCurrencySelectEnum];
/**
 * @export
 */
export const ListCurrenciesSelectEnum = {
    Id: 'id',
    Code: 'code',
    DisplayName: 'displayName',
    Symbol: 'symbol',
    AmountDecimalPlaces: 'amountDecimalPlaces',
    AmountRoundingPrecision: 'amountRoundingPrecision',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type ListCurrenciesSelectEnum = typeof ListCurrenciesSelectEnum[keyof typeof ListCurrenciesSelectEnum];
