/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ListPurchaseInvoiceLinesForPurchaseInvoice200Response } from '../model';
// @ts-ignore
import type { PostPurchaseInvoiceLineForPurchaseInvoiceRequest } from '../model';
// @ts-ignore
import type { PurchaseInvoiceLine } from '../model';
/**
 * PurchaseInvoiceLineApi - axios parameter creator
 * @export
 */
export const PurchaseInvoiceLineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type purchaseInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceLineId (v1.0) id for purchaseInvoiceLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePurchaseInvoiceLine: async (companyId: string, purchaseInvoiceLineId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deletePurchaseInvoiceLine', 'companyId', companyId)
            // verify required parameter 'purchaseInvoiceLineId' is not null or undefined
            assertParamExists('deletePurchaseInvoiceLine', 'purchaseInvoiceLineId', purchaseInvoiceLineId)
            const localVarPath = `/companies({company_id})/purchaseInvoiceLines('{purchaseInvoiceLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"purchaseInvoiceLine_id"}}`, encodeURIComponent(String(purchaseInvoiceLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an object of type purchaseInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceId (v1.0) id for purchaseInvoice
         * @param {string} purchaseInvoiceLineId (v1.0) id for purchaseInvoiceLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePurchaseInvoiceLineForPurchaseInvoice: async (companyId: string, purchaseInvoiceId: string, purchaseInvoiceLineId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deletePurchaseInvoiceLineForPurchaseInvoice', 'companyId', companyId)
            // verify required parameter 'purchaseInvoiceId' is not null or undefined
            assertParamExists('deletePurchaseInvoiceLineForPurchaseInvoice', 'purchaseInvoiceId', purchaseInvoiceId)
            // verify required parameter 'purchaseInvoiceLineId' is not null or undefined
            assertParamExists('deletePurchaseInvoiceLineForPurchaseInvoice', 'purchaseInvoiceLineId', purchaseInvoiceLineId)
            const localVarPath = `/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/purchaseInvoiceLines('{purchaseInvoiceLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"purchaseInvoice_id"}}`, encodeURIComponent(String(purchaseInvoiceId)))
                .replace(`{${"purchaseInvoiceLine_id"}}`, encodeURIComponent(String(purchaseInvoiceLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type purchaseInvoiceLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceLineId (v1.0) id for purchaseInvoiceLine
         * @param {Array<GetPurchaseInvoiceLineExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetPurchaseInvoiceLineSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseInvoiceLine: async (companyId: string, purchaseInvoiceLineId: string, $expand?: Array<GetPurchaseInvoiceLineExpandEnum>, $select?: Array<GetPurchaseInvoiceLineSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPurchaseInvoiceLine', 'companyId', companyId)
            // verify required parameter 'purchaseInvoiceLineId' is not null or undefined
            assertParamExists('getPurchaseInvoiceLine', 'purchaseInvoiceLineId', purchaseInvoiceLineId)
            const localVarPath = `/companies({company_id})/purchaseInvoiceLines('{purchaseInvoiceLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"purchaseInvoiceLine_id"}}`, encodeURIComponent(String(purchaseInvoiceLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type purchaseInvoiceLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceId (v1.0) id for purchaseInvoice
         * @param {string} purchaseInvoiceLineId (v1.0) id for purchaseInvoiceLine
         * @param {Array<GetPurchaseInvoiceLineForPurchaseInvoiceExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetPurchaseInvoiceLineForPurchaseInvoiceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseInvoiceLineForPurchaseInvoice: async (companyId: string, purchaseInvoiceId: string, purchaseInvoiceLineId: string, $expand?: Array<GetPurchaseInvoiceLineForPurchaseInvoiceExpandEnum>, $select?: Array<GetPurchaseInvoiceLineForPurchaseInvoiceSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPurchaseInvoiceLineForPurchaseInvoice', 'companyId', companyId)
            // verify required parameter 'purchaseInvoiceId' is not null or undefined
            assertParamExists('getPurchaseInvoiceLineForPurchaseInvoice', 'purchaseInvoiceId', purchaseInvoiceId)
            // verify required parameter 'purchaseInvoiceLineId' is not null or undefined
            assertParamExists('getPurchaseInvoiceLineForPurchaseInvoice', 'purchaseInvoiceLineId', purchaseInvoiceLineId)
            const localVarPath = `/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/purchaseInvoiceLines('{purchaseInvoiceLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"purchaseInvoice_id"}}`, encodeURIComponent(String(purchaseInvoiceId)))
                .replace(`{${"purchaseInvoiceLine_id"}}`, encodeURIComponent(String(purchaseInvoiceLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of purchaseInvoiceLines
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPurchaseInvoiceLinesExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListPurchaseInvoiceLinesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPurchaseInvoiceLines: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListPurchaseInvoiceLinesExpandEnum>, $select?: Array<ListPurchaseInvoiceLinesSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listPurchaseInvoiceLines', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/purchaseInvoiceLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of purchaseInvoiceLines
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceId (v1.0) id for purchaseInvoice
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPurchaseInvoiceLinesForPurchaseInvoiceExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListPurchaseInvoiceLinesForPurchaseInvoiceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPurchaseInvoiceLinesForPurchaseInvoice: async (companyId: string, purchaseInvoiceId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListPurchaseInvoiceLinesForPurchaseInvoiceExpandEnum>, $select?: Array<ListPurchaseInvoiceLinesForPurchaseInvoiceSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listPurchaseInvoiceLinesForPurchaseInvoice', 'companyId', companyId)
            // verify required parameter 'purchaseInvoiceId' is not null or undefined
            assertParamExists('listPurchaseInvoiceLinesForPurchaseInvoice', 'purchaseInvoiceId', purchaseInvoiceId)
            const localVarPath = `/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/purchaseInvoiceLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"purchaseInvoice_id"}}`, encodeURIComponent(String(purchaseInvoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type purchaseInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceLineId (v1.0) id for purchaseInvoiceLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostPurchaseInvoiceLineForPurchaseInvoiceRequest} postPurchaseInvoiceLineForPurchaseInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPurchaseInvoiceLine: async (companyId: string, purchaseInvoiceLineId: string, contentType: string, ifMatch: string, postPurchaseInvoiceLineForPurchaseInvoiceRequest: PostPurchaseInvoiceLineForPurchaseInvoiceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchPurchaseInvoiceLine', 'companyId', companyId)
            // verify required parameter 'purchaseInvoiceLineId' is not null or undefined
            assertParamExists('patchPurchaseInvoiceLine', 'purchaseInvoiceLineId', purchaseInvoiceLineId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchPurchaseInvoiceLine', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchPurchaseInvoiceLine', 'ifMatch', ifMatch)
            // verify required parameter 'postPurchaseInvoiceLineForPurchaseInvoiceRequest' is not null or undefined
            assertParamExists('patchPurchaseInvoiceLine', 'postPurchaseInvoiceLineForPurchaseInvoiceRequest', postPurchaseInvoiceLineForPurchaseInvoiceRequest)
            const localVarPath = `/companies({company_id})/purchaseInvoiceLines('{purchaseInvoiceLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"purchaseInvoiceLine_id"}}`, encodeURIComponent(String(purchaseInvoiceLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postPurchaseInvoiceLineForPurchaseInvoiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type purchaseInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceId (v1.0) id for purchaseInvoice
         * @param {string} purchaseInvoiceLineId (v1.0) id for purchaseInvoiceLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostPurchaseInvoiceLineForPurchaseInvoiceRequest} postPurchaseInvoiceLineForPurchaseInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPurchaseInvoiceLineForPurchaseInvoice: async (companyId: string, purchaseInvoiceId: string, purchaseInvoiceLineId: string, contentType: string, ifMatch: string, postPurchaseInvoiceLineForPurchaseInvoiceRequest: PostPurchaseInvoiceLineForPurchaseInvoiceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchPurchaseInvoiceLineForPurchaseInvoice', 'companyId', companyId)
            // verify required parameter 'purchaseInvoiceId' is not null or undefined
            assertParamExists('patchPurchaseInvoiceLineForPurchaseInvoice', 'purchaseInvoiceId', purchaseInvoiceId)
            // verify required parameter 'purchaseInvoiceLineId' is not null or undefined
            assertParamExists('patchPurchaseInvoiceLineForPurchaseInvoice', 'purchaseInvoiceLineId', purchaseInvoiceLineId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchPurchaseInvoiceLineForPurchaseInvoice', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchPurchaseInvoiceLineForPurchaseInvoice', 'ifMatch', ifMatch)
            // verify required parameter 'postPurchaseInvoiceLineForPurchaseInvoiceRequest' is not null or undefined
            assertParamExists('patchPurchaseInvoiceLineForPurchaseInvoice', 'postPurchaseInvoiceLineForPurchaseInvoiceRequest', postPurchaseInvoiceLineForPurchaseInvoiceRequest)
            const localVarPath = `/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/purchaseInvoiceLines('{purchaseInvoiceLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"purchaseInvoice_id"}}`, encodeURIComponent(String(purchaseInvoiceId)))
                .replace(`{${"purchaseInvoiceLine_id"}}`, encodeURIComponent(String(purchaseInvoiceLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postPurchaseInvoiceLineForPurchaseInvoiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type purchaseInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostPurchaseInvoiceLineForPurchaseInvoiceRequest} postPurchaseInvoiceLineForPurchaseInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPurchaseInvoiceLine: async (companyId: string, contentType: string, postPurchaseInvoiceLineForPurchaseInvoiceRequest: PostPurchaseInvoiceLineForPurchaseInvoiceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postPurchaseInvoiceLine', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postPurchaseInvoiceLine', 'contentType', contentType)
            // verify required parameter 'postPurchaseInvoiceLineForPurchaseInvoiceRequest' is not null or undefined
            assertParamExists('postPurchaseInvoiceLine', 'postPurchaseInvoiceLineForPurchaseInvoiceRequest', postPurchaseInvoiceLineForPurchaseInvoiceRequest)
            const localVarPath = `/companies({company_id})/purchaseInvoiceLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postPurchaseInvoiceLineForPurchaseInvoiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type purchaseInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceId (v1.0) id for purchaseInvoice
         * @param {string} contentType (v1.0) application/json
         * @param {PostPurchaseInvoiceLineForPurchaseInvoiceRequest} postPurchaseInvoiceLineForPurchaseInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPurchaseInvoiceLineForPurchaseInvoice: async (companyId: string, purchaseInvoiceId: string, contentType: string, postPurchaseInvoiceLineForPurchaseInvoiceRequest: PostPurchaseInvoiceLineForPurchaseInvoiceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postPurchaseInvoiceLineForPurchaseInvoice', 'companyId', companyId)
            // verify required parameter 'purchaseInvoiceId' is not null or undefined
            assertParamExists('postPurchaseInvoiceLineForPurchaseInvoice', 'purchaseInvoiceId', purchaseInvoiceId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postPurchaseInvoiceLineForPurchaseInvoice', 'contentType', contentType)
            // verify required parameter 'postPurchaseInvoiceLineForPurchaseInvoiceRequest' is not null or undefined
            assertParamExists('postPurchaseInvoiceLineForPurchaseInvoice', 'postPurchaseInvoiceLineForPurchaseInvoiceRequest', postPurchaseInvoiceLineForPurchaseInvoiceRequest)
            const localVarPath = `/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/purchaseInvoiceLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"purchaseInvoice_id"}}`, encodeURIComponent(String(purchaseInvoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postPurchaseInvoiceLineForPurchaseInvoiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PurchaseInvoiceLineApi - functional programming interface
 * @export
 */
export const PurchaseInvoiceLineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PurchaseInvoiceLineApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type purchaseInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceLineId (v1.0) id for purchaseInvoiceLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePurchaseInvoiceLine(companyId: string, purchaseInvoiceLineId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePurchaseInvoiceLine(companyId, purchaseInvoiceLineId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseInvoiceLineApi.deletePurchaseInvoiceLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes an object of type purchaseInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceId (v1.0) id for purchaseInvoice
         * @param {string} purchaseInvoiceLineId (v1.0) id for purchaseInvoiceLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePurchaseInvoiceLineForPurchaseInvoice(companyId: string, purchaseInvoiceId: string, purchaseInvoiceLineId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePurchaseInvoiceLineForPurchaseInvoice(companyId, purchaseInvoiceId, purchaseInvoiceLineId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseInvoiceLineApi.deletePurchaseInvoiceLineForPurchaseInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type purchaseInvoiceLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceLineId (v1.0) id for purchaseInvoiceLine
         * @param {Array<GetPurchaseInvoiceLineExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetPurchaseInvoiceLineSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPurchaseInvoiceLine(companyId: string, purchaseInvoiceLineId: string, $expand?: Array<GetPurchaseInvoiceLineExpandEnum>, $select?: Array<GetPurchaseInvoiceLineSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseInvoiceLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPurchaseInvoiceLine(companyId, purchaseInvoiceLineId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseInvoiceLineApi.getPurchaseInvoiceLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type purchaseInvoiceLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceId (v1.0) id for purchaseInvoice
         * @param {string} purchaseInvoiceLineId (v1.0) id for purchaseInvoiceLine
         * @param {Array<GetPurchaseInvoiceLineForPurchaseInvoiceExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetPurchaseInvoiceLineForPurchaseInvoiceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPurchaseInvoiceLineForPurchaseInvoice(companyId: string, purchaseInvoiceId: string, purchaseInvoiceLineId: string, $expand?: Array<GetPurchaseInvoiceLineForPurchaseInvoiceExpandEnum>, $select?: Array<GetPurchaseInvoiceLineForPurchaseInvoiceSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseInvoiceLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPurchaseInvoiceLineForPurchaseInvoice(companyId, purchaseInvoiceId, purchaseInvoiceLineId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseInvoiceLineApi.getPurchaseInvoiceLineForPurchaseInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of purchaseInvoiceLines
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPurchaseInvoiceLinesExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListPurchaseInvoiceLinesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPurchaseInvoiceLines(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListPurchaseInvoiceLinesExpandEnum>, $select?: Array<ListPurchaseInvoiceLinesSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPurchaseInvoiceLinesForPurchaseInvoice200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPurchaseInvoiceLines(companyId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseInvoiceLineApi.listPurchaseInvoiceLines']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of purchaseInvoiceLines
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceId (v1.0) id for purchaseInvoice
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPurchaseInvoiceLinesForPurchaseInvoiceExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListPurchaseInvoiceLinesForPurchaseInvoiceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPurchaseInvoiceLinesForPurchaseInvoice(companyId: string, purchaseInvoiceId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListPurchaseInvoiceLinesForPurchaseInvoiceExpandEnum>, $select?: Array<ListPurchaseInvoiceLinesForPurchaseInvoiceSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPurchaseInvoiceLinesForPurchaseInvoice200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPurchaseInvoiceLinesForPurchaseInvoice(companyId, purchaseInvoiceId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseInvoiceLineApi.listPurchaseInvoiceLinesForPurchaseInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type purchaseInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceLineId (v1.0) id for purchaseInvoiceLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostPurchaseInvoiceLineForPurchaseInvoiceRequest} postPurchaseInvoiceLineForPurchaseInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPurchaseInvoiceLine(companyId: string, purchaseInvoiceLineId: string, contentType: string, ifMatch: string, postPurchaseInvoiceLineForPurchaseInvoiceRequest: PostPurchaseInvoiceLineForPurchaseInvoiceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseInvoiceLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPurchaseInvoiceLine(companyId, purchaseInvoiceLineId, contentType, ifMatch, postPurchaseInvoiceLineForPurchaseInvoiceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseInvoiceLineApi.patchPurchaseInvoiceLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type purchaseInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceId (v1.0) id for purchaseInvoice
         * @param {string} purchaseInvoiceLineId (v1.0) id for purchaseInvoiceLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostPurchaseInvoiceLineForPurchaseInvoiceRequest} postPurchaseInvoiceLineForPurchaseInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPurchaseInvoiceLineForPurchaseInvoice(companyId: string, purchaseInvoiceId: string, purchaseInvoiceLineId: string, contentType: string, ifMatch: string, postPurchaseInvoiceLineForPurchaseInvoiceRequest: PostPurchaseInvoiceLineForPurchaseInvoiceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseInvoiceLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPurchaseInvoiceLineForPurchaseInvoice(companyId, purchaseInvoiceId, purchaseInvoiceLineId, contentType, ifMatch, postPurchaseInvoiceLineForPurchaseInvoiceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseInvoiceLineApi.patchPurchaseInvoiceLineForPurchaseInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type purchaseInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostPurchaseInvoiceLineForPurchaseInvoiceRequest} postPurchaseInvoiceLineForPurchaseInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPurchaseInvoiceLine(companyId: string, contentType: string, postPurchaseInvoiceLineForPurchaseInvoiceRequest: PostPurchaseInvoiceLineForPurchaseInvoiceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseInvoiceLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPurchaseInvoiceLine(companyId, contentType, postPurchaseInvoiceLineForPurchaseInvoiceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseInvoiceLineApi.postPurchaseInvoiceLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type purchaseInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceId (v1.0) id for purchaseInvoice
         * @param {string} contentType (v1.0) application/json
         * @param {PostPurchaseInvoiceLineForPurchaseInvoiceRequest} postPurchaseInvoiceLineForPurchaseInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPurchaseInvoiceLineForPurchaseInvoice(companyId: string, purchaseInvoiceId: string, contentType: string, postPurchaseInvoiceLineForPurchaseInvoiceRequest: PostPurchaseInvoiceLineForPurchaseInvoiceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseInvoiceLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPurchaseInvoiceLineForPurchaseInvoice(companyId, purchaseInvoiceId, contentType, postPurchaseInvoiceLineForPurchaseInvoiceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseInvoiceLineApi.postPurchaseInvoiceLineForPurchaseInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PurchaseInvoiceLineApi - factory interface
 * @export
 */
export const PurchaseInvoiceLineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PurchaseInvoiceLineApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type purchaseInvoiceLine in Dynamics 365 Business Central
         * @param {PurchaseInvoiceLineApiDeletePurchaseInvoiceLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePurchaseInvoiceLine(requestParameters: PurchaseInvoiceLineApiDeletePurchaseInvoiceLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePurchaseInvoiceLine(requestParameters.companyId, requestParameters.purchaseInvoiceLineId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an object of type purchaseInvoiceLine in Dynamics 365 Business Central
         * @param {PurchaseInvoiceLineApiDeletePurchaseInvoiceLineForPurchaseInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePurchaseInvoiceLineForPurchaseInvoice(requestParameters: PurchaseInvoiceLineApiDeletePurchaseInvoiceLineForPurchaseInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePurchaseInvoiceLineForPurchaseInvoice(requestParameters.companyId, requestParameters.purchaseInvoiceId, requestParameters.purchaseInvoiceLineId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type purchaseInvoiceLine for Dynamics 365 Business Central.
         * @param {PurchaseInvoiceLineApiGetPurchaseInvoiceLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseInvoiceLine(requestParameters: PurchaseInvoiceLineApiGetPurchaseInvoiceLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseInvoiceLine> {
            return localVarFp.getPurchaseInvoiceLine(requestParameters.companyId, requestParameters.purchaseInvoiceLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type purchaseInvoiceLine for Dynamics 365 Business Central.
         * @param {PurchaseInvoiceLineApiGetPurchaseInvoiceLineForPurchaseInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseInvoiceLineForPurchaseInvoice(requestParameters: PurchaseInvoiceLineApiGetPurchaseInvoiceLineForPurchaseInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseInvoiceLine> {
            return localVarFp.getPurchaseInvoiceLineForPurchaseInvoice(requestParameters.companyId, requestParameters.purchaseInvoiceId, requestParameters.purchaseInvoiceLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of purchaseInvoiceLines
         * @param {PurchaseInvoiceLineApiListPurchaseInvoiceLinesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPurchaseInvoiceLines(requestParameters: PurchaseInvoiceLineApiListPurchaseInvoiceLinesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPurchaseInvoiceLinesForPurchaseInvoice200Response> {
            return localVarFp.listPurchaseInvoiceLines(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of purchaseInvoiceLines
         * @param {PurchaseInvoiceLineApiListPurchaseInvoiceLinesForPurchaseInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPurchaseInvoiceLinesForPurchaseInvoice(requestParameters: PurchaseInvoiceLineApiListPurchaseInvoiceLinesForPurchaseInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPurchaseInvoiceLinesForPurchaseInvoice200Response> {
            return localVarFp.listPurchaseInvoiceLinesForPurchaseInvoice(requestParameters.companyId, requestParameters.purchaseInvoiceId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type purchaseInvoiceLine in Dynamics 365 Business Central
         * @param {PurchaseInvoiceLineApiPatchPurchaseInvoiceLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPurchaseInvoiceLine(requestParameters: PurchaseInvoiceLineApiPatchPurchaseInvoiceLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseInvoiceLine> {
            return localVarFp.patchPurchaseInvoiceLine(requestParameters.companyId, requestParameters.purchaseInvoiceLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postPurchaseInvoiceLineForPurchaseInvoiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type purchaseInvoiceLine in Dynamics 365 Business Central
         * @param {PurchaseInvoiceLineApiPatchPurchaseInvoiceLineForPurchaseInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPurchaseInvoiceLineForPurchaseInvoice(requestParameters: PurchaseInvoiceLineApiPatchPurchaseInvoiceLineForPurchaseInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseInvoiceLine> {
            return localVarFp.patchPurchaseInvoiceLineForPurchaseInvoice(requestParameters.companyId, requestParameters.purchaseInvoiceId, requestParameters.purchaseInvoiceLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postPurchaseInvoiceLineForPurchaseInvoiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type purchaseInvoiceLine in Dynamics 365 Business Central
         * @param {PurchaseInvoiceLineApiPostPurchaseInvoiceLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPurchaseInvoiceLine(requestParameters: PurchaseInvoiceLineApiPostPurchaseInvoiceLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseInvoiceLine> {
            return localVarFp.postPurchaseInvoiceLine(requestParameters.companyId, requestParameters.contentType, requestParameters.postPurchaseInvoiceLineForPurchaseInvoiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type purchaseInvoiceLine in Dynamics 365 Business Central
         * @param {PurchaseInvoiceLineApiPostPurchaseInvoiceLineForPurchaseInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPurchaseInvoiceLineForPurchaseInvoice(requestParameters: PurchaseInvoiceLineApiPostPurchaseInvoiceLineForPurchaseInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseInvoiceLine> {
            return localVarFp.postPurchaseInvoiceLineForPurchaseInvoice(requestParameters.companyId, requestParameters.purchaseInvoiceId, requestParameters.contentType, requestParameters.postPurchaseInvoiceLineForPurchaseInvoiceRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deletePurchaseInvoiceLine operation in PurchaseInvoiceLineApi.
 * @export
 * @interface PurchaseInvoiceLineApiDeletePurchaseInvoiceLineRequest
 */
export interface PurchaseInvoiceLineApiDeletePurchaseInvoiceLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PurchaseInvoiceLineApiDeletePurchaseInvoiceLine
     */
    readonly companyId: string

    /**
     * (v1.0) id for purchaseInvoiceLine
     * @type {string}
     * @memberof PurchaseInvoiceLineApiDeletePurchaseInvoiceLine
     */
    readonly purchaseInvoiceLineId: string
}

/**
 * Request parameters for deletePurchaseInvoiceLineForPurchaseInvoice operation in PurchaseInvoiceLineApi.
 * @export
 * @interface PurchaseInvoiceLineApiDeletePurchaseInvoiceLineForPurchaseInvoiceRequest
 */
export interface PurchaseInvoiceLineApiDeletePurchaseInvoiceLineForPurchaseInvoiceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PurchaseInvoiceLineApiDeletePurchaseInvoiceLineForPurchaseInvoice
     */
    readonly companyId: string

    /**
     * (v1.0) id for purchaseInvoice
     * @type {string}
     * @memberof PurchaseInvoiceLineApiDeletePurchaseInvoiceLineForPurchaseInvoice
     */
    readonly purchaseInvoiceId: string

    /**
     * (v1.0) id for purchaseInvoiceLine
     * @type {string}
     * @memberof PurchaseInvoiceLineApiDeletePurchaseInvoiceLineForPurchaseInvoice
     */
    readonly purchaseInvoiceLineId: string
}

/**
 * Request parameters for getPurchaseInvoiceLine operation in PurchaseInvoiceLineApi.
 * @export
 * @interface PurchaseInvoiceLineApiGetPurchaseInvoiceLineRequest
 */
export interface PurchaseInvoiceLineApiGetPurchaseInvoiceLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PurchaseInvoiceLineApiGetPurchaseInvoiceLine
     */
    readonly companyId: string

    /**
     * (v1.0) id for purchaseInvoiceLine
     * @type {string}
     * @memberof PurchaseInvoiceLineApiGetPurchaseInvoiceLine
     */
    readonly purchaseInvoiceLineId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'item' | 'account'>}
     * @memberof PurchaseInvoiceLineApiGetPurchaseInvoiceLine
     */
    readonly $expand?: Array<GetPurchaseInvoiceLineExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'documentId' | 'sequence' | 'itemId' | 'accountId' | 'lineType' | 'lineDetails' | 'description' | 'unitOfMeasure' | 'unitCost' | 'quantity' | 'discountAmount' | 'discountPercent' | 'discountAppliedBeforeTax' | 'amountExcludingTax' | 'taxCode' | 'taxPercent' | 'totalTaxAmount' | 'amountIncludingTax' | 'invoiceDiscountAllocation' | 'netAmount' | 'netTaxAmount' | 'netAmountIncludingTax' | 'expectedReceiptDate'>}
     * @memberof PurchaseInvoiceLineApiGetPurchaseInvoiceLine
     */
    readonly $select?: Array<GetPurchaseInvoiceLineSelectEnum>
}

/**
 * Request parameters for getPurchaseInvoiceLineForPurchaseInvoice operation in PurchaseInvoiceLineApi.
 * @export
 * @interface PurchaseInvoiceLineApiGetPurchaseInvoiceLineForPurchaseInvoiceRequest
 */
export interface PurchaseInvoiceLineApiGetPurchaseInvoiceLineForPurchaseInvoiceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PurchaseInvoiceLineApiGetPurchaseInvoiceLineForPurchaseInvoice
     */
    readonly companyId: string

    /**
     * (v1.0) id for purchaseInvoice
     * @type {string}
     * @memberof PurchaseInvoiceLineApiGetPurchaseInvoiceLineForPurchaseInvoice
     */
    readonly purchaseInvoiceId: string

    /**
     * (v1.0) id for purchaseInvoiceLine
     * @type {string}
     * @memberof PurchaseInvoiceLineApiGetPurchaseInvoiceLineForPurchaseInvoice
     */
    readonly purchaseInvoiceLineId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'item' | 'account'>}
     * @memberof PurchaseInvoiceLineApiGetPurchaseInvoiceLineForPurchaseInvoice
     */
    readonly $expand?: Array<GetPurchaseInvoiceLineForPurchaseInvoiceExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'documentId' | 'sequence' | 'itemId' | 'accountId' | 'lineType' | 'lineDetails' | 'description' | 'unitOfMeasure' | 'unitCost' | 'quantity' | 'discountAmount' | 'discountPercent' | 'discountAppliedBeforeTax' | 'amountExcludingTax' | 'taxCode' | 'taxPercent' | 'totalTaxAmount' | 'amountIncludingTax' | 'invoiceDiscountAllocation' | 'netAmount' | 'netTaxAmount' | 'netAmountIncludingTax' | 'expectedReceiptDate'>}
     * @memberof PurchaseInvoiceLineApiGetPurchaseInvoiceLineForPurchaseInvoice
     */
    readonly $select?: Array<GetPurchaseInvoiceLineForPurchaseInvoiceSelectEnum>
}

/**
 * Request parameters for listPurchaseInvoiceLines operation in PurchaseInvoiceLineApi.
 * @export
 * @interface PurchaseInvoiceLineApiListPurchaseInvoiceLinesRequest
 */
export interface PurchaseInvoiceLineApiListPurchaseInvoiceLinesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PurchaseInvoiceLineApiListPurchaseInvoiceLines
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof PurchaseInvoiceLineApiListPurchaseInvoiceLines
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof PurchaseInvoiceLineApiListPurchaseInvoiceLines
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof PurchaseInvoiceLineApiListPurchaseInvoiceLines
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof PurchaseInvoiceLineApiListPurchaseInvoiceLines
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'item' | 'account'>}
     * @memberof PurchaseInvoiceLineApiListPurchaseInvoiceLines
     */
    readonly $expand?: Array<ListPurchaseInvoiceLinesExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'documentId' | 'sequence' | 'itemId' | 'accountId' | 'lineType' | 'lineDetails' | 'description' | 'unitOfMeasure' | 'unitCost' | 'quantity' | 'discountAmount' | 'discountPercent' | 'discountAppliedBeforeTax' | 'amountExcludingTax' | 'taxCode' | 'taxPercent' | 'totalTaxAmount' | 'amountIncludingTax' | 'invoiceDiscountAllocation' | 'netAmount' | 'netTaxAmount' | 'netAmountIncludingTax' | 'expectedReceiptDate'>}
     * @memberof PurchaseInvoiceLineApiListPurchaseInvoiceLines
     */
    readonly $select?: Array<ListPurchaseInvoiceLinesSelectEnum>
}

/**
 * Request parameters for listPurchaseInvoiceLinesForPurchaseInvoice operation in PurchaseInvoiceLineApi.
 * @export
 * @interface PurchaseInvoiceLineApiListPurchaseInvoiceLinesForPurchaseInvoiceRequest
 */
export interface PurchaseInvoiceLineApiListPurchaseInvoiceLinesForPurchaseInvoiceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PurchaseInvoiceLineApiListPurchaseInvoiceLinesForPurchaseInvoice
     */
    readonly companyId: string

    /**
     * (v1.0) id for purchaseInvoice
     * @type {string}
     * @memberof PurchaseInvoiceLineApiListPurchaseInvoiceLinesForPurchaseInvoice
     */
    readonly purchaseInvoiceId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof PurchaseInvoiceLineApiListPurchaseInvoiceLinesForPurchaseInvoice
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof PurchaseInvoiceLineApiListPurchaseInvoiceLinesForPurchaseInvoice
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof PurchaseInvoiceLineApiListPurchaseInvoiceLinesForPurchaseInvoice
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof PurchaseInvoiceLineApiListPurchaseInvoiceLinesForPurchaseInvoice
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'item' | 'account'>}
     * @memberof PurchaseInvoiceLineApiListPurchaseInvoiceLinesForPurchaseInvoice
     */
    readonly $expand?: Array<ListPurchaseInvoiceLinesForPurchaseInvoiceExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'documentId' | 'sequence' | 'itemId' | 'accountId' | 'lineType' | 'lineDetails' | 'description' | 'unitOfMeasure' | 'unitCost' | 'quantity' | 'discountAmount' | 'discountPercent' | 'discountAppliedBeforeTax' | 'amountExcludingTax' | 'taxCode' | 'taxPercent' | 'totalTaxAmount' | 'amountIncludingTax' | 'invoiceDiscountAllocation' | 'netAmount' | 'netTaxAmount' | 'netAmountIncludingTax' | 'expectedReceiptDate'>}
     * @memberof PurchaseInvoiceLineApiListPurchaseInvoiceLinesForPurchaseInvoice
     */
    readonly $select?: Array<ListPurchaseInvoiceLinesForPurchaseInvoiceSelectEnum>
}

/**
 * Request parameters for patchPurchaseInvoiceLine operation in PurchaseInvoiceLineApi.
 * @export
 * @interface PurchaseInvoiceLineApiPatchPurchaseInvoiceLineRequest
 */
export interface PurchaseInvoiceLineApiPatchPurchaseInvoiceLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PurchaseInvoiceLineApiPatchPurchaseInvoiceLine
     */
    readonly companyId: string

    /**
     * (v1.0) id for purchaseInvoiceLine
     * @type {string}
     * @memberof PurchaseInvoiceLineApiPatchPurchaseInvoiceLine
     */
    readonly purchaseInvoiceLineId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof PurchaseInvoiceLineApiPatchPurchaseInvoiceLine
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof PurchaseInvoiceLineApiPatchPurchaseInvoiceLine
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostPurchaseInvoiceLineForPurchaseInvoiceRequest}
     * @memberof PurchaseInvoiceLineApiPatchPurchaseInvoiceLine
     */
    readonly postPurchaseInvoiceLineForPurchaseInvoiceRequest: PostPurchaseInvoiceLineForPurchaseInvoiceRequest
}

/**
 * Request parameters for patchPurchaseInvoiceLineForPurchaseInvoice operation in PurchaseInvoiceLineApi.
 * @export
 * @interface PurchaseInvoiceLineApiPatchPurchaseInvoiceLineForPurchaseInvoiceRequest
 */
export interface PurchaseInvoiceLineApiPatchPurchaseInvoiceLineForPurchaseInvoiceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PurchaseInvoiceLineApiPatchPurchaseInvoiceLineForPurchaseInvoice
     */
    readonly companyId: string

    /**
     * (v1.0) id for purchaseInvoice
     * @type {string}
     * @memberof PurchaseInvoiceLineApiPatchPurchaseInvoiceLineForPurchaseInvoice
     */
    readonly purchaseInvoiceId: string

    /**
     * (v1.0) id for purchaseInvoiceLine
     * @type {string}
     * @memberof PurchaseInvoiceLineApiPatchPurchaseInvoiceLineForPurchaseInvoice
     */
    readonly purchaseInvoiceLineId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof PurchaseInvoiceLineApiPatchPurchaseInvoiceLineForPurchaseInvoice
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof PurchaseInvoiceLineApiPatchPurchaseInvoiceLineForPurchaseInvoice
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostPurchaseInvoiceLineForPurchaseInvoiceRequest}
     * @memberof PurchaseInvoiceLineApiPatchPurchaseInvoiceLineForPurchaseInvoice
     */
    readonly postPurchaseInvoiceLineForPurchaseInvoiceRequest: PostPurchaseInvoiceLineForPurchaseInvoiceRequest
}

/**
 * Request parameters for postPurchaseInvoiceLine operation in PurchaseInvoiceLineApi.
 * @export
 * @interface PurchaseInvoiceLineApiPostPurchaseInvoiceLineRequest
 */
export interface PurchaseInvoiceLineApiPostPurchaseInvoiceLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PurchaseInvoiceLineApiPostPurchaseInvoiceLine
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof PurchaseInvoiceLineApiPostPurchaseInvoiceLine
     */
    readonly contentType: string

    /**
     * 
     * @type {PostPurchaseInvoiceLineForPurchaseInvoiceRequest}
     * @memberof PurchaseInvoiceLineApiPostPurchaseInvoiceLine
     */
    readonly postPurchaseInvoiceLineForPurchaseInvoiceRequest: PostPurchaseInvoiceLineForPurchaseInvoiceRequest
}

/**
 * Request parameters for postPurchaseInvoiceLineForPurchaseInvoice operation in PurchaseInvoiceLineApi.
 * @export
 * @interface PurchaseInvoiceLineApiPostPurchaseInvoiceLineForPurchaseInvoiceRequest
 */
export interface PurchaseInvoiceLineApiPostPurchaseInvoiceLineForPurchaseInvoiceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PurchaseInvoiceLineApiPostPurchaseInvoiceLineForPurchaseInvoice
     */
    readonly companyId: string

    /**
     * (v1.0) id for purchaseInvoice
     * @type {string}
     * @memberof PurchaseInvoiceLineApiPostPurchaseInvoiceLineForPurchaseInvoice
     */
    readonly purchaseInvoiceId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof PurchaseInvoiceLineApiPostPurchaseInvoiceLineForPurchaseInvoice
     */
    readonly contentType: string

    /**
     * 
     * @type {PostPurchaseInvoiceLineForPurchaseInvoiceRequest}
     * @memberof PurchaseInvoiceLineApiPostPurchaseInvoiceLineForPurchaseInvoice
     */
    readonly postPurchaseInvoiceLineForPurchaseInvoiceRequest: PostPurchaseInvoiceLineForPurchaseInvoiceRequest
}

/**
 * PurchaseInvoiceLineApi - object-oriented interface
 * @export
 * @class PurchaseInvoiceLineApi
 * @extends {BaseAPI}
 */
export class PurchaseInvoiceLineApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type purchaseInvoiceLine in Dynamics 365 Business Central
     * @param {PurchaseInvoiceLineApiDeletePurchaseInvoiceLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseInvoiceLineApi
     */
    public deletePurchaseInvoiceLine(requestParameters: PurchaseInvoiceLineApiDeletePurchaseInvoiceLineRequest, options?: RawAxiosRequestConfig) {
        return PurchaseInvoiceLineApiFp(this.configuration).deletePurchaseInvoiceLine(requestParameters.companyId, requestParameters.purchaseInvoiceLineId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an object of type purchaseInvoiceLine in Dynamics 365 Business Central
     * @param {PurchaseInvoiceLineApiDeletePurchaseInvoiceLineForPurchaseInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseInvoiceLineApi
     */
    public deletePurchaseInvoiceLineForPurchaseInvoice(requestParameters: PurchaseInvoiceLineApiDeletePurchaseInvoiceLineForPurchaseInvoiceRequest, options?: RawAxiosRequestConfig) {
        return PurchaseInvoiceLineApiFp(this.configuration).deletePurchaseInvoiceLineForPurchaseInvoice(requestParameters.companyId, requestParameters.purchaseInvoiceId, requestParameters.purchaseInvoiceLineId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type purchaseInvoiceLine for Dynamics 365 Business Central.
     * @param {PurchaseInvoiceLineApiGetPurchaseInvoiceLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseInvoiceLineApi
     */
    public getPurchaseInvoiceLine(requestParameters: PurchaseInvoiceLineApiGetPurchaseInvoiceLineRequest, options?: RawAxiosRequestConfig) {
        return PurchaseInvoiceLineApiFp(this.configuration).getPurchaseInvoiceLine(requestParameters.companyId, requestParameters.purchaseInvoiceLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type purchaseInvoiceLine for Dynamics 365 Business Central.
     * @param {PurchaseInvoiceLineApiGetPurchaseInvoiceLineForPurchaseInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseInvoiceLineApi
     */
    public getPurchaseInvoiceLineForPurchaseInvoice(requestParameters: PurchaseInvoiceLineApiGetPurchaseInvoiceLineForPurchaseInvoiceRequest, options?: RawAxiosRequestConfig) {
        return PurchaseInvoiceLineApiFp(this.configuration).getPurchaseInvoiceLineForPurchaseInvoice(requestParameters.companyId, requestParameters.purchaseInvoiceId, requestParameters.purchaseInvoiceLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of purchaseInvoiceLines
     * @param {PurchaseInvoiceLineApiListPurchaseInvoiceLinesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseInvoiceLineApi
     */
    public listPurchaseInvoiceLines(requestParameters: PurchaseInvoiceLineApiListPurchaseInvoiceLinesRequest, options?: RawAxiosRequestConfig) {
        return PurchaseInvoiceLineApiFp(this.configuration).listPurchaseInvoiceLines(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of purchaseInvoiceLines
     * @param {PurchaseInvoiceLineApiListPurchaseInvoiceLinesForPurchaseInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseInvoiceLineApi
     */
    public listPurchaseInvoiceLinesForPurchaseInvoice(requestParameters: PurchaseInvoiceLineApiListPurchaseInvoiceLinesForPurchaseInvoiceRequest, options?: RawAxiosRequestConfig) {
        return PurchaseInvoiceLineApiFp(this.configuration).listPurchaseInvoiceLinesForPurchaseInvoice(requestParameters.companyId, requestParameters.purchaseInvoiceId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type purchaseInvoiceLine in Dynamics 365 Business Central
     * @param {PurchaseInvoiceLineApiPatchPurchaseInvoiceLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseInvoiceLineApi
     */
    public patchPurchaseInvoiceLine(requestParameters: PurchaseInvoiceLineApiPatchPurchaseInvoiceLineRequest, options?: RawAxiosRequestConfig) {
        return PurchaseInvoiceLineApiFp(this.configuration).patchPurchaseInvoiceLine(requestParameters.companyId, requestParameters.purchaseInvoiceLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postPurchaseInvoiceLineForPurchaseInvoiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type purchaseInvoiceLine in Dynamics 365 Business Central
     * @param {PurchaseInvoiceLineApiPatchPurchaseInvoiceLineForPurchaseInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseInvoiceLineApi
     */
    public patchPurchaseInvoiceLineForPurchaseInvoice(requestParameters: PurchaseInvoiceLineApiPatchPurchaseInvoiceLineForPurchaseInvoiceRequest, options?: RawAxiosRequestConfig) {
        return PurchaseInvoiceLineApiFp(this.configuration).patchPurchaseInvoiceLineForPurchaseInvoice(requestParameters.companyId, requestParameters.purchaseInvoiceId, requestParameters.purchaseInvoiceLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postPurchaseInvoiceLineForPurchaseInvoiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type purchaseInvoiceLine in Dynamics 365 Business Central
     * @param {PurchaseInvoiceLineApiPostPurchaseInvoiceLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseInvoiceLineApi
     */
    public postPurchaseInvoiceLine(requestParameters: PurchaseInvoiceLineApiPostPurchaseInvoiceLineRequest, options?: RawAxiosRequestConfig) {
        return PurchaseInvoiceLineApiFp(this.configuration).postPurchaseInvoiceLine(requestParameters.companyId, requestParameters.contentType, requestParameters.postPurchaseInvoiceLineForPurchaseInvoiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type purchaseInvoiceLine in Dynamics 365 Business Central
     * @param {PurchaseInvoiceLineApiPostPurchaseInvoiceLineForPurchaseInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseInvoiceLineApi
     */
    public postPurchaseInvoiceLineForPurchaseInvoice(requestParameters: PurchaseInvoiceLineApiPostPurchaseInvoiceLineForPurchaseInvoiceRequest, options?: RawAxiosRequestConfig) {
        return PurchaseInvoiceLineApiFp(this.configuration).postPurchaseInvoiceLineForPurchaseInvoice(requestParameters.companyId, requestParameters.purchaseInvoiceId, requestParameters.contentType, requestParameters.postPurchaseInvoiceLineForPurchaseInvoiceRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetPurchaseInvoiceLineExpandEnum = {
    Item: 'item',
    Account: 'account'
} as const;
export type GetPurchaseInvoiceLineExpandEnum = typeof GetPurchaseInvoiceLineExpandEnum[keyof typeof GetPurchaseInvoiceLineExpandEnum];
/**
 * @export
 */
export const GetPurchaseInvoiceLineSelectEnum = {
    Id: 'id',
    DocumentId: 'documentId',
    Sequence: 'sequence',
    ItemId: 'itemId',
    AccountId: 'accountId',
    LineType: 'lineType',
    LineDetails: 'lineDetails',
    Description: 'description',
    UnitOfMeasure: 'unitOfMeasure',
    UnitCost: 'unitCost',
    Quantity: 'quantity',
    DiscountAmount: 'discountAmount',
    DiscountPercent: 'discountPercent',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    AmountExcludingTax: 'amountExcludingTax',
    TaxCode: 'taxCode',
    TaxPercent: 'taxPercent',
    TotalTaxAmount: 'totalTaxAmount',
    AmountIncludingTax: 'amountIncludingTax',
    InvoiceDiscountAllocation: 'invoiceDiscountAllocation',
    NetAmount: 'netAmount',
    NetTaxAmount: 'netTaxAmount',
    NetAmountIncludingTax: 'netAmountIncludingTax',
    ExpectedReceiptDate: 'expectedReceiptDate'
} as const;
export type GetPurchaseInvoiceLineSelectEnum = typeof GetPurchaseInvoiceLineSelectEnum[keyof typeof GetPurchaseInvoiceLineSelectEnum];
/**
 * @export
 */
export const GetPurchaseInvoiceLineForPurchaseInvoiceExpandEnum = {
    Item: 'item',
    Account: 'account'
} as const;
export type GetPurchaseInvoiceLineForPurchaseInvoiceExpandEnum = typeof GetPurchaseInvoiceLineForPurchaseInvoiceExpandEnum[keyof typeof GetPurchaseInvoiceLineForPurchaseInvoiceExpandEnum];
/**
 * @export
 */
export const GetPurchaseInvoiceLineForPurchaseInvoiceSelectEnum = {
    Id: 'id',
    DocumentId: 'documentId',
    Sequence: 'sequence',
    ItemId: 'itemId',
    AccountId: 'accountId',
    LineType: 'lineType',
    LineDetails: 'lineDetails',
    Description: 'description',
    UnitOfMeasure: 'unitOfMeasure',
    UnitCost: 'unitCost',
    Quantity: 'quantity',
    DiscountAmount: 'discountAmount',
    DiscountPercent: 'discountPercent',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    AmountExcludingTax: 'amountExcludingTax',
    TaxCode: 'taxCode',
    TaxPercent: 'taxPercent',
    TotalTaxAmount: 'totalTaxAmount',
    AmountIncludingTax: 'amountIncludingTax',
    InvoiceDiscountAllocation: 'invoiceDiscountAllocation',
    NetAmount: 'netAmount',
    NetTaxAmount: 'netTaxAmount',
    NetAmountIncludingTax: 'netAmountIncludingTax',
    ExpectedReceiptDate: 'expectedReceiptDate'
} as const;
export type GetPurchaseInvoiceLineForPurchaseInvoiceSelectEnum = typeof GetPurchaseInvoiceLineForPurchaseInvoiceSelectEnum[keyof typeof GetPurchaseInvoiceLineForPurchaseInvoiceSelectEnum];
/**
 * @export
 */
export const ListPurchaseInvoiceLinesExpandEnum = {
    Item: 'item',
    Account: 'account'
} as const;
export type ListPurchaseInvoiceLinesExpandEnum = typeof ListPurchaseInvoiceLinesExpandEnum[keyof typeof ListPurchaseInvoiceLinesExpandEnum];
/**
 * @export
 */
export const ListPurchaseInvoiceLinesSelectEnum = {
    Id: 'id',
    DocumentId: 'documentId',
    Sequence: 'sequence',
    ItemId: 'itemId',
    AccountId: 'accountId',
    LineType: 'lineType',
    LineDetails: 'lineDetails',
    Description: 'description',
    UnitOfMeasure: 'unitOfMeasure',
    UnitCost: 'unitCost',
    Quantity: 'quantity',
    DiscountAmount: 'discountAmount',
    DiscountPercent: 'discountPercent',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    AmountExcludingTax: 'amountExcludingTax',
    TaxCode: 'taxCode',
    TaxPercent: 'taxPercent',
    TotalTaxAmount: 'totalTaxAmount',
    AmountIncludingTax: 'amountIncludingTax',
    InvoiceDiscountAllocation: 'invoiceDiscountAllocation',
    NetAmount: 'netAmount',
    NetTaxAmount: 'netTaxAmount',
    NetAmountIncludingTax: 'netAmountIncludingTax',
    ExpectedReceiptDate: 'expectedReceiptDate'
} as const;
export type ListPurchaseInvoiceLinesSelectEnum = typeof ListPurchaseInvoiceLinesSelectEnum[keyof typeof ListPurchaseInvoiceLinesSelectEnum];
/**
 * @export
 */
export const ListPurchaseInvoiceLinesForPurchaseInvoiceExpandEnum = {
    Item: 'item',
    Account: 'account'
} as const;
export type ListPurchaseInvoiceLinesForPurchaseInvoiceExpandEnum = typeof ListPurchaseInvoiceLinesForPurchaseInvoiceExpandEnum[keyof typeof ListPurchaseInvoiceLinesForPurchaseInvoiceExpandEnum];
/**
 * @export
 */
export const ListPurchaseInvoiceLinesForPurchaseInvoiceSelectEnum = {
    Id: 'id',
    DocumentId: 'documentId',
    Sequence: 'sequence',
    ItemId: 'itemId',
    AccountId: 'accountId',
    LineType: 'lineType',
    LineDetails: 'lineDetails',
    Description: 'description',
    UnitOfMeasure: 'unitOfMeasure',
    UnitCost: 'unitCost',
    Quantity: 'quantity',
    DiscountAmount: 'discountAmount',
    DiscountPercent: 'discountPercent',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    AmountExcludingTax: 'amountExcludingTax',
    TaxCode: 'taxCode',
    TaxPercent: 'taxPercent',
    TotalTaxAmount: 'totalTaxAmount',
    AmountIncludingTax: 'amountIncludingTax',
    InvoiceDiscountAllocation: 'invoiceDiscountAllocation',
    NetAmount: 'netAmount',
    NetTaxAmount: 'netTaxAmount',
    NetAmountIncludingTax: 'netAmountIncludingTax',
    ExpectedReceiptDate: 'expectedReceiptDate'
} as const;
export type ListPurchaseInvoiceLinesForPurchaseInvoiceSelectEnum = typeof ListPurchaseInvoiceLinesForPurchaseInvoiceSelectEnum[keyof typeof ListPurchaseInvoiceLinesForPurchaseInvoiceSelectEnum];
