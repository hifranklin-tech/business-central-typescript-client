/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ListSalesCreditMemos200Response } from '../model';
// @ts-ignore
import type { PostSalesCreditMemoRequest } from '../model';
// @ts-ignore
import type { SalesCreditMemo } from '../model';
/**
 * SalesCreditMemoApi - axios parameter creator
 * @export
 */
export const SalesCreditMemoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Performs the cancel action for salesCreditMemos entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelActionSalesCreditMemos: async (companyId: string, salesCreditMemoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('cancelActionSalesCreditMemos', 'companyId', companyId)
            // verify required parameter 'salesCreditMemoId' is not null or undefined
            assertParamExists('cancelActionSalesCreditMemos', 'salesCreditMemoId', salesCreditMemoId)
            const localVarPath = `/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/Microsoft.NAV.cancel`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesCreditMemo_id"}}`, encodeURIComponent(String(salesCreditMemoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Performs the cancelAndSend action for salesCreditMemos entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAndSendActionSalesCreditMemos: async (companyId: string, salesCreditMemoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('cancelAndSendActionSalesCreditMemos', 'companyId', companyId)
            // verify required parameter 'salesCreditMemoId' is not null or undefined
            assertParamExists('cancelAndSendActionSalesCreditMemos', 'salesCreditMemoId', salesCreditMemoId)
            const localVarPath = `/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/Microsoft.NAV.cancelAndSend`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesCreditMemo_id"}}`, encodeURIComponent(String(salesCreditMemoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an object of type salesCreditMemo in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesCreditMemo: async (companyId: string, salesCreditMemoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteSalesCreditMemo', 'companyId', companyId)
            // verify required parameter 'salesCreditMemoId' is not null or undefined
            assertParamExists('deleteSalesCreditMemo', 'salesCreditMemoId', salesCreditMemoId)
            const localVarPath = `/companies({company_id})/salesCreditMemos({salesCreditMemo_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesCreditMemo_id"}}`, encodeURIComponent(String(salesCreditMemoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesCreditMemo for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {Array<GetSalesCreditMemoExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesCreditMemoSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesCreditMemo: async (companyId: string, salesCreditMemoId: string, $expand?: Array<GetSalesCreditMemoExpandEnum>, $select?: Array<GetSalesCreditMemoSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSalesCreditMemo', 'companyId', companyId)
            // verify required parameter 'salesCreditMemoId' is not null or undefined
            assertParamExists('getSalesCreditMemo', 'salesCreditMemoId', salesCreditMemoId)
            const localVarPath = `/companies({company_id})/salesCreditMemos({salesCreditMemo_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesCreditMemo_id"}}`, encodeURIComponent(String(salesCreditMemoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of salesCreditMemos
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesCreditMemosExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesCreditMemosSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesCreditMemos: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesCreditMemosExpandEnum>, $select?: Array<ListSalesCreditMemosSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listSalesCreditMemos', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/salesCreditMemos`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type salesCreditMemo in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesCreditMemoRequest} postSalesCreditMemoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesCreditMemo: async (companyId: string, salesCreditMemoId: string, contentType: string, ifMatch: string, postSalesCreditMemoRequest: PostSalesCreditMemoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchSalesCreditMemo', 'companyId', companyId)
            // verify required parameter 'salesCreditMemoId' is not null or undefined
            assertParamExists('patchSalesCreditMemo', 'salesCreditMemoId', salesCreditMemoId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchSalesCreditMemo', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchSalesCreditMemo', 'ifMatch', ifMatch)
            // verify required parameter 'postSalesCreditMemoRequest' is not null or undefined
            assertParamExists('patchSalesCreditMemo', 'postSalesCreditMemoRequest', postSalesCreditMemoRequest)
            const localVarPath = `/companies({company_id})/salesCreditMemos({salesCreditMemo_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesCreditMemo_id"}}`, encodeURIComponent(String(salesCreditMemoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesCreditMemoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Performs the post action for salesCreditMemos entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postActionSalesCreditMemos: async (companyId: string, salesCreditMemoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postActionSalesCreditMemos', 'companyId', companyId)
            // verify required parameter 'salesCreditMemoId' is not null or undefined
            assertParamExists('postActionSalesCreditMemos', 'salesCreditMemoId', salesCreditMemoId)
            const localVarPath = `/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/Microsoft.NAV.post`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesCreditMemo_id"}}`, encodeURIComponent(String(salesCreditMemoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Performs the postAndSend action for salesCreditMemos entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAndSendActionSalesCreditMemos: async (companyId: string, salesCreditMemoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postAndSendActionSalesCreditMemos', 'companyId', companyId)
            // verify required parameter 'salesCreditMemoId' is not null or undefined
            assertParamExists('postAndSendActionSalesCreditMemos', 'salesCreditMemoId', salesCreditMemoId)
            const localVarPath = `/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/Microsoft.NAV.postAndSend`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesCreditMemo_id"}}`, encodeURIComponent(String(salesCreditMemoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type salesCreditMemo in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesCreditMemoRequest} postSalesCreditMemoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesCreditMemo: async (companyId: string, contentType: string, postSalesCreditMemoRequest: PostSalesCreditMemoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postSalesCreditMemo', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postSalesCreditMemo', 'contentType', contentType)
            // verify required parameter 'postSalesCreditMemoRequest' is not null or undefined
            assertParamExists('postSalesCreditMemo', 'postSalesCreditMemoRequest', postSalesCreditMemoRequest)
            const localVarPath = `/companies({company_id})/salesCreditMemos`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesCreditMemoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Performs the send action for salesCreditMemos entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendActionSalesCreditMemos: async (companyId: string, salesCreditMemoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('sendActionSalesCreditMemos', 'companyId', companyId)
            // verify required parameter 'salesCreditMemoId' is not null or undefined
            assertParamExists('sendActionSalesCreditMemos', 'salesCreditMemoId', salesCreditMemoId)
            const localVarPath = `/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/Microsoft.NAV.send`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesCreditMemo_id"}}`, encodeURIComponent(String(salesCreditMemoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalesCreditMemoApi - functional programming interface
 * @export
 */
export const SalesCreditMemoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalesCreditMemoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Performs the cancel action for salesCreditMemos entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelActionSalesCreditMemos(companyId: string, salesCreditMemoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelActionSalesCreditMemos(companyId, salesCreditMemoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditMemoApi.cancelActionSalesCreditMemos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Performs the cancelAndSend action for salesCreditMemos entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelAndSendActionSalesCreditMemos(companyId: string, salesCreditMemoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelAndSendActionSalesCreditMemos(companyId, salesCreditMemoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditMemoApi.cancelAndSendActionSalesCreditMemos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes an object of type salesCreditMemo in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalesCreditMemo(companyId: string, salesCreditMemoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalesCreditMemo(companyId, salesCreditMemoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditMemoApi.deleteSalesCreditMemo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesCreditMemo for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {Array<GetSalesCreditMemoExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesCreditMemoSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesCreditMemo(companyId: string, salesCreditMemoId: string, $expand?: Array<GetSalesCreditMemoExpandEnum>, $select?: Array<GetSalesCreditMemoSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesCreditMemo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesCreditMemo(companyId, salesCreditMemoId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditMemoApi.getSalesCreditMemo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of salesCreditMemos
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesCreditMemosExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesCreditMemosSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSalesCreditMemos(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesCreditMemosExpandEnum>, $select?: Array<ListSalesCreditMemosSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListSalesCreditMemos200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSalesCreditMemos(companyId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditMemoApi.listSalesCreditMemos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type salesCreditMemo in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesCreditMemoRequest} postSalesCreditMemoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSalesCreditMemo(companyId: string, salesCreditMemoId: string, contentType: string, ifMatch: string, postSalesCreditMemoRequest: PostSalesCreditMemoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesCreditMemo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSalesCreditMemo(companyId, salesCreditMemoId, contentType, ifMatch, postSalesCreditMemoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditMemoApi.patchSalesCreditMemo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Performs the post action for salesCreditMemos entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postActionSalesCreditMemos(companyId: string, salesCreditMemoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postActionSalesCreditMemos(companyId, salesCreditMemoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditMemoApi.postActionSalesCreditMemos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Performs the postAndSend action for salesCreditMemos entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAndSendActionSalesCreditMemos(companyId: string, salesCreditMemoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAndSendActionSalesCreditMemos(companyId, salesCreditMemoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditMemoApi.postAndSendActionSalesCreditMemos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type salesCreditMemo in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesCreditMemoRequest} postSalesCreditMemoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSalesCreditMemo(companyId: string, contentType: string, postSalesCreditMemoRequest: PostSalesCreditMemoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesCreditMemo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSalesCreditMemo(companyId, contentType, postSalesCreditMemoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditMemoApi.postSalesCreditMemo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Performs the send action for salesCreditMemos entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendActionSalesCreditMemos(companyId: string, salesCreditMemoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendActionSalesCreditMemos(companyId, salesCreditMemoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditMemoApi.sendActionSalesCreditMemos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SalesCreditMemoApi - factory interface
 * @export
 */
export const SalesCreditMemoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalesCreditMemoApiFp(configuration)
    return {
        /**
         * 
         * @summary Performs the cancel action for salesCreditMemos entity
         * @param {SalesCreditMemoApiCancelActionSalesCreditMemosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelActionSalesCreditMemos(requestParameters: SalesCreditMemoApiCancelActionSalesCreditMemosRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cancelActionSalesCreditMemos(requestParameters.companyId, requestParameters.salesCreditMemoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Performs the cancelAndSend action for salesCreditMemos entity
         * @param {SalesCreditMemoApiCancelAndSendActionSalesCreditMemosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAndSendActionSalesCreditMemos(requestParameters: SalesCreditMemoApiCancelAndSendActionSalesCreditMemosRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cancelAndSendActionSalesCreditMemos(requestParameters.companyId, requestParameters.salesCreditMemoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an object of type salesCreditMemo in Dynamics 365 Business Central
         * @param {SalesCreditMemoApiDeleteSalesCreditMemoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesCreditMemo(requestParameters: SalesCreditMemoApiDeleteSalesCreditMemoRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSalesCreditMemo(requestParameters.companyId, requestParameters.salesCreditMemoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesCreditMemo for Dynamics 365 Business Central.
         * @param {SalesCreditMemoApiGetSalesCreditMemoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesCreditMemo(requestParameters: SalesCreditMemoApiGetSalesCreditMemoRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesCreditMemo> {
            return localVarFp.getSalesCreditMemo(requestParameters.companyId, requestParameters.salesCreditMemoId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of salesCreditMemos
         * @param {SalesCreditMemoApiListSalesCreditMemosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesCreditMemos(requestParameters: SalesCreditMemoApiListSalesCreditMemosRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListSalesCreditMemos200Response> {
            return localVarFp.listSalesCreditMemos(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type salesCreditMemo in Dynamics 365 Business Central
         * @param {SalesCreditMemoApiPatchSalesCreditMemoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesCreditMemo(requestParameters: SalesCreditMemoApiPatchSalesCreditMemoRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesCreditMemo> {
            return localVarFp.patchSalesCreditMemo(requestParameters.companyId, requestParameters.salesCreditMemoId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesCreditMemoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Performs the post action for salesCreditMemos entity
         * @param {SalesCreditMemoApiPostActionSalesCreditMemosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postActionSalesCreditMemos(requestParameters: SalesCreditMemoApiPostActionSalesCreditMemosRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postActionSalesCreditMemos(requestParameters.companyId, requestParameters.salesCreditMemoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Performs the postAndSend action for salesCreditMemos entity
         * @param {SalesCreditMemoApiPostAndSendActionSalesCreditMemosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAndSendActionSalesCreditMemos(requestParameters: SalesCreditMemoApiPostAndSendActionSalesCreditMemosRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postAndSendActionSalesCreditMemos(requestParameters.companyId, requestParameters.salesCreditMemoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type salesCreditMemo in Dynamics 365 Business Central
         * @param {SalesCreditMemoApiPostSalesCreditMemoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesCreditMemo(requestParameters: SalesCreditMemoApiPostSalesCreditMemoRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesCreditMemo> {
            return localVarFp.postSalesCreditMemo(requestParameters.companyId, requestParameters.contentType, requestParameters.postSalesCreditMemoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Performs the send action for salesCreditMemos entity
         * @param {SalesCreditMemoApiSendActionSalesCreditMemosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendActionSalesCreditMemos(requestParameters: SalesCreditMemoApiSendActionSalesCreditMemosRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendActionSalesCreditMemos(requestParameters.companyId, requestParameters.salesCreditMemoId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelActionSalesCreditMemos operation in SalesCreditMemoApi.
 * @export
 * @interface SalesCreditMemoApiCancelActionSalesCreditMemosRequest
 */
export interface SalesCreditMemoApiCancelActionSalesCreditMemosRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesCreditMemoApiCancelActionSalesCreditMemos
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesCreditMemo
     * @type {string}
     * @memberof SalesCreditMemoApiCancelActionSalesCreditMemos
     */
    readonly salesCreditMemoId: string
}

/**
 * Request parameters for cancelAndSendActionSalesCreditMemos operation in SalesCreditMemoApi.
 * @export
 * @interface SalesCreditMemoApiCancelAndSendActionSalesCreditMemosRequest
 */
export interface SalesCreditMemoApiCancelAndSendActionSalesCreditMemosRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesCreditMemoApiCancelAndSendActionSalesCreditMemos
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesCreditMemo
     * @type {string}
     * @memberof SalesCreditMemoApiCancelAndSendActionSalesCreditMemos
     */
    readonly salesCreditMemoId: string
}

/**
 * Request parameters for deleteSalesCreditMemo operation in SalesCreditMemoApi.
 * @export
 * @interface SalesCreditMemoApiDeleteSalesCreditMemoRequest
 */
export interface SalesCreditMemoApiDeleteSalesCreditMemoRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesCreditMemoApiDeleteSalesCreditMemo
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesCreditMemo
     * @type {string}
     * @memberof SalesCreditMemoApiDeleteSalesCreditMemo
     */
    readonly salesCreditMemoId: string
}

/**
 * Request parameters for getSalesCreditMemo operation in SalesCreditMemoApi.
 * @export
 * @interface SalesCreditMemoApiGetSalesCreditMemoRequest
 */
export interface SalesCreditMemoApiGetSalesCreditMemoRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesCreditMemoApiGetSalesCreditMemo
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesCreditMemo
     * @type {string}
     * @memberof SalesCreditMemoApiGetSalesCreditMemo
     */
    readonly salesCreditMemoId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'salesCreditMemoLines' | 'pdfDocument' | 'customer' | 'currency' | 'paymentTerm' | 'shipmentMethod'>}
     * @memberof SalesCreditMemoApiGetSalesCreditMemo
     */
    readonly $expand?: Array<GetSalesCreditMemoExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'externalDocumentNumber' | 'creditMemoDate' | 'dueDate' | 'customerId' | 'contactId' | 'customerNumber' | 'customerName' | 'billToName' | 'billToCustomerId' | 'billToCustomerNumber' | 'sellingPostalAddress' | 'billingPostalAddress' | 'currencyId' | 'currencyCode' | 'paymentTermsId' | 'shipmentMethodId' | 'salesperson' | 'pricesIncludeTax' | 'discountAmount' | 'discountAppliedBeforeTax' | 'totalAmountExcludingTax' | 'totalTaxAmount' | 'totalAmountIncludingTax' | 'status' | 'lastModifiedDateTime' | 'invoiceId' | 'invoiceNumber' | 'phoneNumber' | 'email'>}
     * @memberof SalesCreditMemoApiGetSalesCreditMemo
     */
    readonly $select?: Array<GetSalesCreditMemoSelectEnum>
}

/**
 * Request parameters for listSalesCreditMemos operation in SalesCreditMemoApi.
 * @export
 * @interface SalesCreditMemoApiListSalesCreditMemosRequest
 */
export interface SalesCreditMemoApiListSalesCreditMemosRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesCreditMemoApiListSalesCreditMemos
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof SalesCreditMemoApiListSalesCreditMemos
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof SalesCreditMemoApiListSalesCreditMemos
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof SalesCreditMemoApiListSalesCreditMemos
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof SalesCreditMemoApiListSalesCreditMemos
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'salesCreditMemoLines' | 'pdfDocument' | 'customer' | 'currency' | 'paymentTerm' | 'shipmentMethod'>}
     * @memberof SalesCreditMemoApiListSalesCreditMemos
     */
    readonly $expand?: Array<ListSalesCreditMemosExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'externalDocumentNumber' | 'creditMemoDate' | 'dueDate' | 'customerId' | 'contactId' | 'customerNumber' | 'customerName' | 'billToName' | 'billToCustomerId' | 'billToCustomerNumber' | 'sellingPostalAddress' | 'billingPostalAddress' | 'currencyId' | 'currencyCode' | 'paymentTermsId' | 'shipmentMethodId' | 'salesperson' | 'pricesIncludeTax' | 'discountAmount' | 'discountAppliedBeforeTax' | 'totalAmountExcludingTax' | 'totalTaxAmount' | 'totalAmountIncludingTax' | 'status' | 'lastModifiedDateTime' | 'invoiceId' | 'invoiceNumber' | 'phoneNumber' | 'email'>}
     * @memberof SalesCreditMemoApiListSalesCreditMemos
     */
    readonly $select?: Array<ListSalesCreditMemosSelectEnum>
}

/**
 * Request parameters for patchSalesCreditMemo operation in SalesCreditMemoApi.
 * @export
 * @interface SalesCreditMemoApiPatchSalesCreditMemoRequest
 */
export interface SalesCreditMemoApiPatchSalesCreditMemoRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesCreditMemoApiPatchSalesCreditMemo
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesCreditMemo
     * @type {string}
     * @memberof SalesCreditMemoApiPatchSalesCreditMemo
     */
    readonly salesCreditMemoId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesCreditMemoApiPatchSalesCreditMemo
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof SalesCreditMemoApiPatchSalesCreditMemo
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostSalesCreditMemoRequest}
     * @memberof SalesCreditMemoApiPatchSalesCreditMemo
     */
    readonly postSalesCreditMemoRequest: PostSalesCreditMemoRequest
}

/**
 * Request parameters for postActionSalesCreditMemos operation in SalesCreditMemoApi.
 * @export
 * @interface SalesCreditMemoApiPostActionSalesCreditMemosRequest
 */
export interface SalesCreditMemoApiPostActionSalesCreditMemosRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesCreditMemoApiPostActionSalesCreditMemos
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesCreditMemo
     * @type {string}
     * @memberof SalesCreditMemoApiPostActionSalesCreditMemos
     */
    readonly salesCreditMemoId: string
}

/**
 * Request parameters for postAndSendActionSalesCreditMemos operation in SalesCreditMemoApi.
 * @export
 * @interface SalesCreditMemoApiPostAndSendActionSalesCreditMemosRequest
 */
export interface SalesCreditMemoApiPostAndSendActionSalesCreditMemosRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesCreditMemoApiPostAndSendActionSalesCreditMemos
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesCreditMemo
     * @type {string}
     * @memberof SalesCreditMemoApiPostAndSendActionSalesCreditMemos
     */
    readonly salesCreditMemoId: string
}

/**
 * Request parameters for postSalesCreditMemo operation in SalesCreditMemoApi.
 * @export
 * @interface SalesCreditMemoApiPostSalesCreditMemoRequest
 */
export interface SalesCreditMemoApiPostSalesCreditMemoRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesCreditMemoApiPostSalesCreditMemo
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesCreditMemoApiPostSalesCreditMemo
     */
    readonly contentType: string

    /**
     * 
     * @type {PostSalesCreditMemoRequest}
     * @memberof SalesCreditMemoApiPostSalesCreditMemo
     */
    readonly postSalesCreditMemoRequest: PostSalesCreditMemoRequest
}

/**
 * Request parameters for sendActionSalesCreditMemos operation in SalesCreditMemoApi.
 * @export
 * @interface SalesCreditMemoApiSendActionSalesCreditMemosRequest
 */
export interface SalesCreditMemoApiSendActionSalesCreditMemosRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesCreditMemoApiSendActionSalesCreditMemos
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesCreditMemo
     * @type {string}
     * @memberof SalesCreditMemoApiSendActionSalesCreditMemos
     */
    readonly salesCreditMemoId: string
}

/**
 * SalesCreditMemoApi - object-oriented interface
 * @export
 * @class SalesCreditMemoApi
 * @extends {BaseAPI}
 */
export class SalesCreditMemoApi extends BaseAPI {
    /**
     * 
     * @summary Performs the cancel action for salesCreditMemos entity
     * @param {SalesCreditMemoApiCancelActionSalesCreditMemosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditMemoApi
     */
    public cancelActionSalesCreditMemos(requestParameters: SalesCreditMemoApiCancelActionSalesCreditMemosRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditMemoApiFp(this.configuration).cancelActionSalesCreditMemos(requestParameters.companyId, requestParameters.salesCreditMemoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Performs the cancelAndSend action for salesCreditMemos entity
     * @param {SalesCreditMemoApiCancelAndSendActionSalesCreditMemosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditMemoApi
     */
    public cancelAndSendActionSalesCreditMemos(requestParameters: SalesCreditMemoApiCancelAndSendActionSalesCreditMemosRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditMemoApiFp(this.configuration).cancelAndSendActionSalesCreditMemos(requestParameters.companyId, requestParameters.salesCreditMemoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an object of type salesCreditMemo in Dynamics 365 Business Central
     * @param {SalesCreditMemoApiDeleteSalesCreditMemoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditMemoApi
     */
    public deleteSalesCreditMemo(requestParameters: SalesCreditMemoApiDeleteSalesCreditMemoRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditMemoApiFp(this.configuration).deleteSalesCreditMemo(requestParameters.companyId, requestParameters.salesCreditMemoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type salesCreditMemo for Dynamics 365 Business Central.
     * @param {SalesCreditMemoApiGetSalesCreditMemoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditMemoApi
     */
    public getSalesCreditMemo(requestParameters: SalesCreditMemoApiGetSalesCreditMemoRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditMemoApiFp(this.configuration).getSalesCreditMemo(requestParameters.companyId, requestParameters.salesCreditMemoId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of salesCreditMemos
     * @param {SalesCreditMemoApiListSalesCreditMemosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditMemoApi
     */
    public listSalesCreditMemos(requestParameters: SalesCreditMemoApiListSalesCreditMemosRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditMemoApiFp(this.configuration).listSalesCreditMemos(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type salesCreditMemo in Dynamics 365 Business Central
     * @param {SalesCreditMemoApiPatchSalesCreditMemoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditMemoApi
     */
    public patchSalesCreditMemo(requestParameters: SalesCreditMemoApiPatchSalesCreditMemoRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditMemoApiFp(this.configuration).patchSalesCreditMemo(requestParameters.companyId, requestParameters.salesCreditMemoId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesCreditMemoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Performs the post action for salesCreditMemos entity
     * @param {SalesCreditMemoApiPostActionSalesCreditMemosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditMemoApi
     */
    public postActionSalesCreditMemos(requestParameters: SalesCreditMemoApiPostActionSalesCreditMemosRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditMemoApiFp(this.configuration).postActionSalesCreditMemos(requestParameters.companyId, requestParameters.salesCreditMemoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Performs the postAndSend action for salesCreditMemos entity
     * @param {SalesCreditMemoApiPostAndSendActionSalesCreditMemosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditMemoApi
     */
    public postAndSendActionSalesCreditMemos(requestParameters: SalesCreditMemoApiPostAndSendActionSalesCreditMemosRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditMemoApiFp(this.configuration).postAndSendActionSalesCreditMemos(requestParameters.companyId, requestParameters.salesCreditMemoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type salesCreditMemo in Dynamics 365 Business Central
     * @param {SalesCreditMemoApiPostSalesCreditMemoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditMemoApi
     */
    public postSalesCreditMemo(requestParameters: SalesCreditMemoApiPostSalesCreditMemoRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditMemoApiFp(this.configuration).postSalesCreditMemo(requestParameters.companyId, requestParameters.contentType, requestParameters.postSalesCreditMemoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Performs the send action for salesCreditMemos entity
     * @param {SalesCreditMemoApiSendActionSalesCreditMemosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditMemoApi
     */
    public sendActionSalesCreditMemos(requestParameters: SalesCreditMemoApiSendActionSalesCreditMemosRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditMemoApiFp(this.configuration).sendActionSalesCreditMemos(requestParameters.companyId, requestParameters.salesCreditMemoId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetSalesCreditMemoExpandEnum = {
    SalesCreditMemoLines: 'salesCreditMemoLines',
    PdfDocument: 'pdfDocument',
    Customer: 'customer',
    Currency: 'currency',
    PaymentTerm: 'paymentTerm',
    ShipmentMethod: 'shipmentMethod'
} as const;
export type GetSalesCreditMemoExpandEnum = typeof GetSalesCreditMemoExpandEnum[keyof typeof GetSalesCreditMemoExpandEnum];
/**
 * @export
 */
export const GetSalesCreditMemoSelectEnum = {
    Id: 'id',
    Number: 'number',
    ExternalDocumentNumber: 'externalDocumentNumber',
    CreditMemoDate: 'creditMemoDate',
    DueDate: 'dueDate',
    CustomerId: 'customerId',
    ContactId: 'contactId',
    CustomerNumber: 'customerNumber',
    CustomerName: 'customerName',
    BillToName: 'billToName',
    BillToCustomerId: 'billToCustomerId',
    BillToCustomerNumber: 'billToCustomerNumber',
    SellingPostalAddress: 'sellingPostalAddress',
    BillingPostalAddress: 'billingPostalAddress',
    CurrencyId: 'currencyId',
    CurrencyCode: 'currencyCode',
    PaymentTermsId: 'paymentTermsId',
    ShipmentMethodId: 'shipmentMethodId',
    Salesperson: 'salesperson',
    PricesIncludeTax: 'pricesIncludeTax',
    DiscountAmount: 'discountAmount',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    TotalAmountExcludingTax: 'totalAmountExcludingTax',
    TotalTaxAmount: 'totalTaxAmount',
    TotalAmountIncludingTax: 'totalAmountIncludingTax',
    Status: 'status',
    LastModifiedDateTime: 'lastModifiedDateTime',
    InvoiceId: 'invoiceId',
    InvoiceNumber: 'invoiceNumber',
    PhoneNumber: 'phoneNumber',
    Email: 'email'
} as const;
export type GetSalesCreditMemoSelectEnum = typeof GetSalesCreditMemoSelectEnum[keyof typeof GetSalesCreditMemoSelectEnum];
/**
 * @export
 */
export const ListSalesCreditMemosExpandEnum = {
    SalesCreditMemoLines: 'salesCreditMemoLines',
    PdfDocument: 'pdfDocument',
    Customer: 'customer',
    Currency: 'currency',
    PaymentTerm: 'paymentTerm',
    ShipmentMethod: 'shipmentMethod'
} as const;
export type ListSalesCreditMemosExpandEnum = typeof ListSalesCreditMemosExpandEnum[keyof typeof ListSalesCreditMemosExpandEnum];
/**
 * @export
 */
export const ListSalesCreditMemosSelectEnum = {
    Id: 'id',
    Number: 'number',
    ExternalDocumentNumber: 'externalDocumentNumber',
    CreditMemoDate: 'creditMemoDate',
    DueDate: 'dueDate',
    CustomerId: 'customerId',
    ContactId: 'contactId',
    CustomerNumber: 'customerNumber',
    CustomerName: 'customerName',
    BillToName: 'billToName',
    BillToCustomerId: 'billToCustomerId',
    BillToCustomerNumber: 'billToCustomerNumber',
    SellingPostalAddress: 'sellingPostalAddress',
    BillingPostalAddress: 'billingPostalAddress',
    CurrencyId: 'currencyId',
    CurrencyCode: 'currencyCode',
    PaymentTermsId: 'paymentTermsId',
    ShipmentMethodId: 'shipmentMethodId',
    Salesperson: 'salesperson',
    PricesIncludeTax: 'pricesIncludeTax',
    DiscountAmount: 'discountAmount',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    TotalAmountExcludingTax: 'totalAmountExcludingTax',
    TotalTaxAmount: 'totalTaxAmount',
    TotalAmountIncludingTax: 'totalAmountIncludingTax',
    Status: 'status',
    LastModifiedDateTime: 'lastModifiedDateTime',
    InvoiceId: 'invoiceId',
    InvoiceNumber: 'invoiceNumber',
    PhoneNumber: 'phoneNumber',
    Email: 'email'
} as const;
export type ListSalesCreditMemosSelectEnum = typeof ListSalesCreditMemosSelectEnum[keyof typeof ListSalesCreditMemosSelectEnum];
