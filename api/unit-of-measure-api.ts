/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ListUnitsOfMeasure200Response } from '../model';
// @ts-ignore
import type { PostUnitOfMeasureRequest } from '../model';
// @ts-ignore
import type { UnitOfMeasure } from '../model';
/**
 * UnitOfMeasureApi - axios parameter creator
 * @export
 */
export const UnitOfMeasureApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type unitOfMeasure in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} unitOfMeasureId (v1.0) id for unitOfMeasure
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUnitOfMeasure: async (companyId: string, unitOfMeasureId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteUnitOfMeasure', 'companyId', companyId)
            // verify required parameter 'unitOfMeasureId' is not null or undefined
            assertParamExists('deleteUnitOfMeasure', 'unitOfMeasureId', unitOfMeasureId)
            const localVarPath = `/companies({company_id})/unitsOfMeasure({unitOfMeasure_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"unitOfMeasure_id"}}`, encodeURIComponent(String(unitOfMeasureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type unitOfMeasure for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} unitOfMeasureId (v1.0) id for unitOfMeasure
         * @param {Array<GetUnitOfMeasureSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnitOfMeasure: async (companyId: string, unitOfMeasureId: string, $select?: Array<GetUnitOfMeasureSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getUnitOfMeasure', 'companyId', companyId)
            // verify required parameter 'unitOfMeasureId' is not null or undefined
            assertParamExists('getUnitOfMeasure', 'unitOfMeasureId', unitOfMeasureId)
            const localVarPath = `/companies({company_id})/unitsOfMeasure({unitOfMeasure_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"unitOfMeasure_id"}}`, encodeURIComponent(String(unitOfMeasureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of unitsOfMeasure
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListUnitsOfMeasureSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUnitsOfMeasure: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListUnitsOfMeasureSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listUnitsOfMeasure', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/unitsOfMeasure`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type unitOfMeasure in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} unitOfMeasureId (v1.0) id for unitOfMeasure
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostUnitOfMeasureRequest} postUnitOfMeasureRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUnitOfMeasure: async (companyId: string, unitOfMeasureId: string, contentType: string, ifMatch: string, postUnitOfMeasureRequest: PostUnitOfMeasureRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchUnitOfMeasure', 'companyId', companyId)
            // verify required parameter 'unitOfMeasureId' is not null or undefined
            assertParamExists('patchUnitOfMeasure', 'unitOfMeasureId', unitOfMeasureId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchUnitOfMeasure', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchUnitOfMeasure', 'ifMatch', ifMatch)
            // verify required parameter 'postUnitOfMeasureRequest' is not null or undefined
            assertParamExists('patchUnitOfMeasure', 'postUnitOfMeasureRequest', postUnitOfMeasureRequest)
            const localVarPath = `/companies({company_id})/unitsOfMeasure({unitOfMeasure_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"unitOfMeasure_id"}}`, encodeURIComponent(String(unitOfMeasureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUnitOfMeasureRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type unitOfMeasure in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostUnitOfMeasureRequest} postUnitOfMeasureRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUnitOfMeasure: async (companyId: string, contentType: string, postUnitOfMeasureRequest: PostUnitOfMeasureRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postUnitOfMeasure', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postUnitOfMeasure', 'contentType', contentType)
            // verify required parameter 'postUnitOfMeasureRequest' is not null or undefined
            assertParamExists('postUnitOfMeasure', 'postUnitOfMeasureRequest', postUnitOfMeasureRequest)
            const localVarPath = `/companies({company_id})/unitsOfMeasure`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUnitOfMeasureRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UnitOfMeasureApi - functional programming interface
 * @export
 */
export const UnitOfMeasureApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UnitOfMeasureApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type unitOfMeasure in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} unitOfMeasureId (v1.0) id for unitOfMeasure
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUnitOfMeasure(companyId: string, unitOfMeasureId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUnitOfMeasure(companyId, unitOfMeasureId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UnitOfMeasureApi.deleteUnitOfMeasure']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type unitOfMeasure for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} unitOfMeasureId (v1.0) id for unitOfMeasure
         * @param {Array<GetUnitOfMeasureSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnitOfMeasure(companyId: string, unitOfMeasureId: string, $select?: Array<GetUnitOfMeasureSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnitOfMeasure>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnitOfMeasure(companyId, unitOfMeasureId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UnitOfMeasureApi.getUnitOfMeasure']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of unitsOfMeasure
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListUnitsOfMeasureSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUnitsOfMeasure(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListUnitsOfMeasureSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUnitsOfMeasure200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUnitsOfMeasure(companyId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UnitOfMeasureApi.listUnitsOfMeasure']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type unitOfMeasure in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} unitOfMeasureId (v1.0) id for unitOfMeasure
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostUnitOfMeasureRequest} postUnitOfMeasureRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchUnitOfMeasure(companyId: string, unitOfMeasureId: string, contentType: string, ifMatch: string, postUnitOfMeasureRequest: PostUnitOfMeasureRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnitOfMeasure>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchUnitOfMeasure(companyId, unitOfMeasureId, contentType, ifMatch, postUnitOfMeasureRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UnitOfMeasureApi.patchUnitOfMeasure']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type unitOfMeasure in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostUnitOfMeasureRequest} postUnitOfMeasureRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUnitOfMeasure(companyId: string, contentType: string, postUnitOfMeasureRequest: PostUnitOfMeasureRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnitOfMeasure>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUnitOfMeasure(companyId, contentType, postUnitOfMeasureRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UnitOfMeasureApi.postUnitOfMeasure']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UnitOfMeasureApi - factory interface
 * @export
 */
export const UnitOfMeasureApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UnitOfMeasureApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type unitOfMeasure in Dynamics 365 Business Central
         * @param {UnitOfMeasureApiDeleteUnitOfMeasureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUnitOfMeasure(requestParameters: UnitOfMeasureApiDeleteUnitOfMeasureRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUnitOfMeasure(requestParameters.companyId, requestParameters.unitOfMeasureId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type unitOfMeasure for Dynamics 365 Business Central.
         * @param {UnitOfMeasureApiGetUnitOfMeasureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnitOfMeasure(requestParameters: UnitOfMeasureApiGetUnitOfMeasureRequest, options?: RawAxiosRequestConfig): AxiosPromise<UnitOfMeasure> {
            return localVarFp.getUnitOfMeasure(requestParameters.companyId, requestParameters.unitOfMeasureId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of unitsOfMeasure
         * @param {UnitOfMeasureApiListUnitsOfMeasureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUnitsOfMeasure(requestParameters: UnitOfMeasureApiListUnitsOfMeasureRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListUnitsOfMeasure200Response> {
            return localVarFp.listUnitsOfMeasure(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type unitOfMeasure in Dynamics 365 Business Central
         * @param {UnitOfMeasureApiPatchUnitOfMeasureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUnitOfMeasure(requestParameters: UnitOfMeasureApiPatchUnitOfMeasureRequest, options?: RawAxiosRequestConfig): AxiosPromise<UnitOfMeasure> {
            return localVarFp.patchUnitOfMeasure(requestParameters.companyId, requestParameters.unitOfMeasureId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postUnitOfMeasureRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type unitOfMeasure in Dynamics 365 Business Central
         * @param {UnitOfMeasureApiPostUnitOfMeasureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUnitOfMeasure(requestParameters: UnitOfMeasureApiPostUnitOfMeasureRequest, options?: RawAxiosRequestConfig): AxiosPromise<UnitOfMeasure> {
            return localVarFp.postUnitOfMeasure(requestParameters.companyId, requestParameters.contentType, requestParameters.postUnitOfMeasureRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteUnitOfMeasure operation in UnitOfMeasureApi.
 * @export
 * @interface UnitOfMeasureApiDeleteUnitOfMeasureRequest
 */
export interface UnitOfMeasureApiDeleteUnitOfMeasureRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof UnitOfMeasureApiDeleteUnitOfMeasure
     */
    readonly companyId: string

    /**
     * (v1.0) id for unitOfMeasure
     * @type {string}
     * @memberof UnitOfMeasureApiDeleteUnitOfMeasure
     */
    readonly unitOfMeasureId: string
}

/**
 * Request parameters for getUnitOfMeasure operation in UnitOfMeasureApi.
 * @export
 * @interface UnitOfMeasureApiGetUnitOfMeasureRequest
 */
export interface UnitOfMeasureApiGetUnitOfMeasureRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof UnitOfMeasureApiGetUnitOfMeasure
     */
    readonly companyId: string

    /**
     * (v1.0) id for unitOfMeasure
     * @type {string}
     * @memberof UnitOfMeasureApiGetUnitOfMeasure
     */
    readonly unitOfMeasureId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'code' | 'displayName' | 'internationalStandardCode' | 'lastModifiedDateTime'>}
     * @memberof UnitOfMeasureApiGetUnitOfMeasure
     */
    readonly $select?: Array<GetUnitOfMeasureSelectEnum>
}

/**
 * Request parameters for listUnitsOfMeasure operation in UnitOfMeasureApi.
 * @export
 * @interface UnitOfMeasureApiListUnitsOfMeasureRequest
 */
export interface UnitOfMeasureApiListUnitsOfMeasureRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof UnitOfMeasureApiListUnitsOfMeasure
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof UnitOfMeasureApiListUnitsOfMeasure
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof UnitOfMeasureApiListUnitsOfMeasure
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof UnitOfMeasureApiListUnitsOfMeasure
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof UnitOfMeasureApiListUnitsOfMeasure
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'code' | 'displayName' | 'internationalStandardCode' | 'lastModifiedDateTime'>}
     * @memberof UnitOfMeasureApiListUnitsOfMeasure
     */
    readonly $select?: Array<ListUnitsOfMeasureSelectEnum>
}

/**
 * Request parameters for patchUnitOfMeasure operation in UnitOfMeasureApi.
 * @export
 * @interface UnitOfMeasureApiPatchUnitOfMeasureRequest
 */
export interface UnitOfMeasureApiPatchUnitOfMeasureRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof UnitOfMeasureApiPatchUnitOfMeasure
     */
    readonly companyId: string

    /**
     * (v1.0) id for unitOfMeasure
     * @type {string}
     * @memberof UnitOfMeasureApiPatchUnitOfMeasure
     */
    readonly unitOfMeasureId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof UnitOfMeasureApiPatchUnitOfMeasure
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof UnitOfMeasureApiPatchUnitOfMeasure
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostUnitOfMeasureRequest}
     * @memberof UnitOfMeasureApiPatchUnitOfMeasure
     */
    readonly postUnitOfMeasureRequest: PostUnitOfMeasureRequest
}

/**
 * Request parameters for postUnitOfMeasure operation in UnitOfMeasureApi.
 * @export
 * @interface UnitOfMeasureApiPostUnitOfMeasureRequest
 */
export interface UnitOfMeasureApiPostUnitOfMeasureRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof UnitOfMeasureApiPostUnitOfMeasure
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof UnitOfMeasureApiPostUnitOfMeasure
     */
    readonly contentType: string

    /**
     * 
     * @type {PostUnitOfMeasureRequest}
     * @memberof UnitOfMeasureApiPostUnitOfMeasure
     */
    readonly postUnitOfMeasureRequest: PostUnitOfMeasureRequest
}

/**
 * UnitOfMeasureApi - object-oriented interface
 * @export
 * @class UnitOfMeasureApi
 * @extends {BaseAPI}
 */
export class UnitOfMeasureApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type unitOfMeasure in Dynamics 365 Business Central
     * @param {UnitOfMeasureApiDeleteUnitOfMeasureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitOfMeasureApi
     */
    public deleteUnitOfMeasure(requestParameters: UnitOfMeasureApiDeleteUnitOfMeasureRequest, options?: RawAxiosRequestConfig) {
        return UnitOfMeasureApiFp(this.configuration).deleteUnitOfMeasure(requestParameters.companyId, requestParameters.unitOfMeasureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type unitOfMeasure for Dynamics 365 Business Central.
     * @param {UnitOfMeasureApiGetUnitOfMeasureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitOfMeasureApi
     */
    public getUnitOfMeasure(requestParameters: UnitOfMeasureApiGetUnitOfMeasureRequest, options?: RawAxiosRequestConfig) {
        return UnitOfMeasureApiFp(this.configuration).getUnitOfMeasure(requestParameters.companyId, requestParameters.unitOfMeasureId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of unitsOfMeasure
     * @param {UnitOfMeasureApiListUnitsOfMeasureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitOfMeasureApi
     */
    public listUnitsOfMeasure(requestParameters: UnitOfMeasureApiListUnitsOfMeasureRequest, options?: RawAxiosRequestConfig) {
        return UnitOfMeasureApiFp(this.configuration).listUnitsOfMeasure(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type unitOfMeasure in Dynamics 365 Business Central
     * @param {UnitOfMeasureApiPatchUnitOfMeasureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitOfMeasureApi
     */
    public patchUnitOfMeasure(requestParameters: UnitOfMeasureApiPatchUnitOfMeasureRequest, options?: RawAxiosRequestConfig) {
        return UnitOfMeasureApiFp(this.configuration).patchUnitOfMeasure(requestParameters.companyId, requestParameters.unitOfMeasureId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postUnitOfMeasureRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type unitOfMeasure in Dynamics 365 Business Central
     * @param {UnitOfMeasureApiPostUnitOfMeasureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitOfMeasureApi
     */
    public postUnitOfMeasure(requestParameters: UnitOfMeasureApiPostUnitOfMeasureRequest, options?: RawAxiosRequestConfig) {
        return UnitOfMeasureApiFp(this.configuration).postUnitOfMeasure(requestParameters.companyId, requestParameters.contentType, requestParameters.postUnitOfMeasureRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetUnitOfMeasureSelectEnum = {
    Id: 'id',
    Code: 'code',
    DisplayName: 'displayName',
    InternationalStandardCode: 'internationalStandardCode',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type GetUnitOfMeasureSelectEnum = typeof GetUnitOfMeasureSelectEnum[keyof typeof GetUnitOfMeasureSelectEnum];
/**
 * @export
 */
export const ListUnitsOfMeasureSelectEnum = {
    Id: 'id',
    Code: 'code',
    DisplayName: 'displayName',
    InternationalStandardCode: 'internationalStandardCode',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type ListUnitsOfMeasureSelectEnum = typeof ListUnitsOfMeasureSelectEnum[keyof typeof ListUnitsOfMeasureSelectEnum];
