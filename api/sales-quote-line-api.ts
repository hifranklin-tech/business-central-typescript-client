/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ListSalesQuoteLinesForSalesQuote200Response } from '../model';
// @ts-ignore
import type { PostSalesQuoteLineForSalesQuoteRequest } from '../model';
// @ts-ignore
import type { SalesQuoteLine } from '../model';
/**
 * SalesQuoteLineApi - axios parameter creator
 * @export
 */
export const SalesQuoteLineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type salesQuoteLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteLineId (v1.0) id for salesQuoteLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesQuoteLine: async (companyId: string, salesQuoteLineId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteSalesQuoteLine', 'companyId', companyId)
            // verify required parameter 'salesQuoteLineId' is not null or undefined
            assertParamExists('deleteSalesQuoteLine', 'salesQuoteLineId', salesQuoteLineId)
            const localVarPath = `/companies({company_id})/salesQuoteLines('{salesQuoteLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesQuoteLine_id"}}`, encodeURIComponent(String(salesQuoteLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an object of type salesQuoteLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {string} salesQuoteLineId (v1.0) id for salesQuoteLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesQuoteLineForSalesQuote: async (companyId: string, salesQuoteId: string, salesQuoteLineId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteSalesQuoteLineForSalesQuote', 'companyId', companyId)
            // verify required parameter 'salesQuoteId' is not null or undefined
            assertParamExists('deleteSalesQuoteLineForSalesQuote', 'salesQuoteId', salesQuoteId)
            // verify required parameter 'salesQuoteLineId' is not null or undefined
            assertParamExists('deleteSalesQuoteLineForSalesQuote', 'salesQuoteLineId', salesQuoteLineId)
            const localVarPath = `/companies({company_id})/salesQuotes({salesQuote_id})/salesQuoteLines('{salesQuoteLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesQuote_id"}}`, encodeURIComponent(String(salesQuoteId)))
                .replace(`{${"salesQuoteLine_id"}}`, encodeURIComponent(String(salesQuoteLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesQuoteLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteLineId (v1.0) id for salesQuoteLine
         * @param {Array<GetSalesQuoteLineExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesQuoteLineSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesQuoteLine: async (companyId: string, salesQuoteLineId: string, $expand?: Array<GetSalesQuoteLineExpandEnum>, $select?: Array<GetSalesQuoteLineSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSalesQuoteLine', 'companyId', companyId)
            // verify required parameter 'salesQuoteLineId' is not null or undefined
            assertParamExists('getSalesQuoteLine', 'salesQuoteLineId', salesQuoteLineId)
            const localVarPath = `/companies({company_id})/salesQuoteLines('{salesQuoteLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesQuoteLine_id"}}`, encodeURIComponent(String(salesQuoteLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesQuoteLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {string} salesQuoteLineId (v1.0) id for salesQuoteLine
         * @param {Array<GetSalesQuoteLineForSalesQuoteExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesQuoteLineForSalesQuoteSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesQuoteLineForSalesQuote: async (companyId: string, salesQuoteId: string, salesQuoteLineId: string, $expand?: Array<GetSalesQuoteLineForSalesQuoteExpandEnum>, $select?: Array<GetSalesQuoteLineForSalesQuoteSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSalesQuoteLineForSalesQuote', 'companyId', companyId)
            // verify required parameter 'salesQuoteId' is not null or undefined
            assertParamExists('getSalesQuoteLineForSalesQuote', 'salesQuoteId', salesQuoteId)
            // verify required parameter 'salesQuoteLineId' is not null or undefined
            assertParamExists('getSalesQuoteLineForSalesQuote', 'salesQuoteLineId', salesQuoteLineId)
            const localVarPath = `/companies({company_id})/salesQuotes({salesQuote_id})/salesQuoteLines('{salesQuoteLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesQuote_id"}}`, encodeURIComponent(String(salesQuoteId)))
                .replace(`{${"salesQuoteLine_id"}}`, encodeURIComponent(String(salesQuoteLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of salesQuoteLines
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesQuoteLinesExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesQuoteLinesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesQuoteLines: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesQuoteLinesExpandEnum>, $select?: Array<ListSalesQuoteLinesSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listSalesQuoteLines', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/salesQuoteLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of salesQuoteLines
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesQuoteLinesForSalesQuoteExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesQuoteLinesForSalesQuoteSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesQuoteLinesForSalesQuote: async (companyId: string, salesQuoteId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesQuoteLinesForSalesQuoteExpandEnum>, $select?: Array<ListSalesQuoteLinesForSalesQuoteSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listSalesQuoteLinesForSalesQuote', 'companyId', companyId)
            // verify required parameter 'salesQuoteId' is not null or undefined
            assertParamExists('listSalesQuoteLinesForSalesQuote', 'salesQuoteId', salesQuoteId)
            const localVarPath = `/companies({company_id})/salesQuotes({salesQuote_id})/salesQuoteLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesQuote_id"}}`, encodeURIComponent(String(salesQuoteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type salesQuoteLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteLineId (v1.0) id for salesQuoteLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesQuoteLineForSalesQuoteRequest} postSalesQuoteLineForSalesQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesQuoteLine: async (companyId: string, salesQuoteLineId: string, contentType: string, ifMatch: string, postSalesQuoteLineForSalesQuoteRequest: PostSalesQuoteLineForSalesQuoteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchSalesQuoteLine', 'companyId', companyId)
            // verify required parameter 'salesQuoteLineId' is not null or undefined
            assertParamExists('patchSalesQuoteLine', 'salesQuoteLineId', salesQuoteLineId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchSalesQuoteLine', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchSalesQuoteLine', 'ifMatch', ifMatch)
            // verify required parameter 'postSalesQuoteLineForSalesQuoteRequest' is not null or undefined
            assertParamExists('patchSalesQuoteLine', 'postSalesQuoteLineForSalesQuoteRequest', postSalesQuoteLineForSalesQuoteRequest)
            const localVarPath = `/companies({company_id})/salesQuoteLines('{salesQuoteLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesQuoteLine_id"}}`, encodeURIComponent(String(salesQuoteLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesQuoteLineForSalesQuoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type salesQuoteLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {string} salesQuoteLineId (v1.0) id for salesQuoteLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesQuoteLineForSalesQuoteRequest} postSalesQuoteLineForSalesQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesQuoteLineForSalesQuote: async (companyId: string, salesQuoteId: string, salesQuoteLineId: string, contentType: string, ifMatch: string, postSalesQuoteLineForSalesQuoteRequest: PostSalesQuoteLineForSalesQuoteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchSalesQuoteLineForSalesQuote', 'companyId', companyId)
            // verify required parameter 'salesQuoteId' is not null or undefined
            assertParamExists('patchSalesQuoteLineForSalesQuote', 'salesQuoteId', salesQuoteId)
            // verify required parameter 'salesQuoteLineId' is not null or undefined
            assertParamExists('patchSalesQuoteLineForSalesQuote', 'salesQuoteLineId', salesQuoteLineId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchSalesQuoteLineForSalesQuote', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchSalesQuoteLineForSalesQuote', 'ifMatch', ifMatch)
            // verify required parameter 'postSalesQuoteLineForSalesQuoteRequest' is not null or undefined
            assertParamExists('patchSalesQuoteLineForSalesQuote', 'postSalesQuoteLineForSalesQuoteRequest', postSalesQuoteLineForSalesQuoteRequest)
            const localVarPath = `/companies({company_id})/salesQuotes({salesQuote_id})/salesQuoteLines('{salesQuoteLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesQuote_id"}}`, encodeURIComponent(String(salesQuoteId)))
                .replace(`{${"salesQuoteLine_id"}}`, encodeURIComponent(String(salesQuoteLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesQuoteLineForSalesQuoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type salesQuoteLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesQuoteLineForSalesQuoteRequest} postSalesQuoteLineForSalesQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesQuoteLine: async (companyId: string, contentType: string, postSalesQuoteLineForSalesQuoteRequest: PostSalesQuoteLineForSalesQuoteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postSalesQuoteLine', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postSalesQuoteLine', 'contentType', contentType)
            // verify required parameter 'postSalesQuoteLineForSalesQuoteRequest' is not null or undefined
            assertParamExists('postSalesQuoteLine', 'postSalesQuoteLineForSalesQuoteRequest', postSalesQuoteLineForSalesQuoteRequest)
            const localVarPath = `/companies({company_id})/salesQuoteLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesQuoteLineForSalesQuoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type salesQuoteLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesQuoteLineForSalesQuoteRequest} postSalesQuoteLineForSalesQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesQuoteLineForSalesQuote: async (companyId: string, salesQuoteId: string, contentType: string, postSalesQuoteLineForSalesQuoteRequest: PostSalesQuoteLineForSalesQuoteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postSalesQuoteLineForSalesQuote', 'companyId', companyId)
            // verify required parameter 'salesQuoteId' is not null or undefined
            assertParamExists('postSalesQuoteLineForSalesQuote', 'salesQuoteId', salesQuoteId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postSalesQuoteLineForSalesQuote', 'contentType', contentType)
            // verify required parameter 'postSalesQuoteLineForSalesQuoteRequest' is not null or undefined
            assertParamExists('postSalesQuoteLineForSalesQuote', 'postSalesQuoteLineForSalesQuoteRequest', postSalesQuoteLineForSalesQuoteRequest)
            const localVarPath = `/companies({company_id})/salesQuotes({salesQuote_id})/salesQuoteLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesQuote_id"}}`, encodeURIComponent(String(salesQuoteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesQuoteLineForSalesQuoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalesQuoteLineApi - functional programming interface
 * @export
 */
export const SalesQuoteLineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalesQuoteLineApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type salesQuoteLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteLineId (v1.0) id for salesQuoteLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalesQuoteLine(companyId: string, salesQuoteLineId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalesQuoteLine(companyId, salesQuoteLineId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesQuoteLineApi.deleteSalesQuoteLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes an object of type salesQuoteLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {string} salesQuoteLineId (v1.0) id for salesQuoteLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalesQuoteLineForSalesQuote(companyId: string, salesQuoteId: string, salesQuoteLineId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalesQuoteLineForSalesQuote(companyId, salesQuoteId, salesQuoteLineId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesQuoteLineApi.deleteSalesQuoteLineForSalesQuote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesQuoteLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteLineId (v1.0) id for salesQuoteLine
         * @param {Array<GetSalesQuoteLineExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesQuoteLineSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesQuoteLine(companyId: string, salesQuoteLineId: string, $expand?: Array<GetSalesQuoteLineExpandEnum>, $select?: Array<GetSalesQuoteLineSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesQuoteLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesQuoteLine(companyId, salesQuoteLineId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesQuoteLineApi.getSalesQuoteLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesQuoteLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {string} salesQuoteLineId (v1.0) id for salesQuoteLine
         * @param {Array<GetSalesQuoteLineForSalesQuoteExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesQuoteLineForSalesQuoteSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesQuoteLineForSalesQuote(companyId: string, salesQuoteId: string, salesQuoteLineId: string, $expand?: Array<GetSalesQuoteLineForSalesQuoteExpandEnum>, $select?: Array<GetSalesQuoteLineForSalesQuoteSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesQuoteLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesQuoteLineForSalesQuote(companyId, salesQuoteId, salesQuoteLineId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesQuoteLineApi.getSalesQuoteLineForSalesQuote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of salesQuoteLines
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesQuoteLinesExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesQuoteLinesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSalesQuoteLines(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesQuoteLinesExpandEnum>, $select?: Array<ListSalesQuoteLinesSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListSalesQuoteLinesForSalesQuote200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSalesQuoteLines(companyId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesQuoteLineApi.listSalesQuoteLines']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of salesQuoteLines
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesQuoteLinesForSalesQuoteExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesQuoteLinesForSalesQuoteSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSalesQuoteLinesForSalesQuote(companyId: string, salesQuoteId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesQuoteLinesForSalesQuoteExpandEnum>, $select?: Array<ListSalesQuoteLinesForSalesQuoteSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListSalesQuoteLinesForSalesQuote200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSalesQuoteLinesForSalesQuote(companyId, salesQuoteId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesQuoteLineApi.listSalesQuoteLinesForSalesQuote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type salesQuoteLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteLineId (v1.0) id for salesQuoteLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesQuoteLineForSalesQuoteRequest} postSalesQuoteLineForSalesQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSalesQuoteLine(companyId: string, salesQuoteLineId: string, contentType: string, ifMatch: string, postSalesQuoteLineForSalesQuoteRequest: PostSalesQuoteLineForSalesQuoteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesQuoteLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSalesQuoteLine(companyId, salesQuoteLineId, contentType, ifMatch, postSalesQuoteLineForSalesQuoteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesQuoteLineApi.patchSalesQuoteLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type salesQuoteLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {string} salesQuoteLineId (v1.0) id for salesQuoteLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesQuoteLineForSalesQuoteRequest} postSalesQuoteLineForSalesQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSalesQuoteLineForSalesQuote(companyId: string, salesQuoteId: string, salesQuoteLineId: string, contentType: string, ifMatch: string, postSalesQuoteLineForSalesQuoteRequest: PostSalesQuoteLineForSalesQuoteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesQuoteLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSalesQuoteLineForSalesQuote(companyId, salesQuoteId, salesQuoteLineId, contentType, ifMatch, postSalesQuoteLineForSalesQuoteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesQuoteLineApi.patchSalesQuoteLineForSalesQuote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type salesQuoteLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesQuoteLineForSalesQuoteRequest} postSalesQuoteLineForSalesQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSalesQuoteLine(companyId: string, contentType: string, postSalesQuoteLineForSalesQuoteRequest: PostSalesQuoteLineForSalesQuoteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesQuoteLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSalesQuoteLine(companyId, contentType, postSalesQuoteLineForSalesQuoteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesQuoteLineApi.postSalesQuoteLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type salesQuoteLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesQuoteLineForSalesQuoteRequest} postSalesQuoteLineForSalesQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSalesQuoteLineForSalesQuote(companyId: string, salesQuoteId: string, contentType: string, postSalesQuoteLineForSalesQuoteRequest: PostSalesQuoteLineForSalesQuoteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesQuoteLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSalesQuoteLineForSalesQuote(companyId, salesQuoteId, contentType, postSalesQuoteLineForSalesQuoteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesQuoteLineApi.postSalesQuoteLineForSalesQuote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SalesQuoteLineApi - factory interface
 * @export
 */
export const SalesQuoteLineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalesQuoteLineApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type salesQuoteLine in Dynamics 365 Business Central
         * @param {SalesQuoteLineApiDeleteSalesQuoteLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesQuoteLine(requestParameters: SalesQuoteLineApiDeleteSalesQuoteLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSalesQuoteLine(requestParameters.companyId, requestParameters.salesQuoteLineId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an object of type salesQuoteLine in Dynamics 365 Business Central
         * @param {SalesQuoteLineApiDeleteSalesQuoteLineForSalesQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesQuoteLineForSalesQuote(requestParameters: SalesQuoteLineApiDeleteSalesQuoteLineForSalesQuoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSalesQuoteLineForSalesQuote(requestParameters.companyId, requestParameters.salesQuoteId, requestParameters.salesQuoteLineId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesQuoteLine for Dynamics 365 Business Central.
         * @param {SalesQuoteLineApiGetSalesQuoteLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesQuoteLine(requestParameters: SalesQuoteLineApiGetSalesQuoteLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesQuoteLine> {
            return localVarFp.getSalesQuoteLine(requestParameters.companyId, requestParameters.salesQuoteLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesQuoteLine for Dynamics 365 Business Central.
         * @param {SalesQuoteLineApiGetSalesQuoteLineForSalesQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesQuoteLineForSalesQuote(requestParameters: SalesQuoteLineApiGetSalesQuoteLineForSalesQuoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesQuoteLine> {
            return localVarFp.getSalesQuoteLineForSalesQuote(requestParameters.companyId, requestParameters.salesQuoteId, requestParameters.salesQuoteLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of salesQuoteLines
         * @param {SalesQuoteLineApiListSalesQuoteLinesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesQuoteLines(requestParameters: SalesQuoteLineApiListSalesQuoteLinesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListSalesQuoteLinesForSalesQuote200Response> {
            return localVarFp.listSalesQuoteLines(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of salesQuoteLines
         * @param {SalesQuoteLineApiListSalesQuoteLinesForSalesQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesQuoteLinesForSalesQuote(requestParameters: SalesQuoteLineApiListSalesQuoteLinesForSalesQuoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListSalesQuoteLinesForSalesQuote200Response> {
            return localVarFp.listSalesQuoteLinesForSalesQuote(requestParameters.companyId, requestParameters.salesQuoteId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type salesQuoteLine in Dynamics 365 Business Central
         * @param {SalesQuoteLineApiPatchSalesQuoteLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesQuoteLine(requestParameters: SalesQuoteLineApiPatchSalesQuoteLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesQuoteLine> {
            return localVarFp.patchSalesQuoteLine(requestParameters.companyId, requestParameters.salesQuoteLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesQuoteLineForSalesQuoteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type salesQuoteLine in Dynamics 365 Business Central
         * @param {SalesQuoteLineApiPatchSalesQuoteLineForSalesQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesQuoteLineForSalesQuote(requestParameters: SalesQuoteLineApiPatchSalesQuoteLineForSalesQuoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesQuoteLine> {
            return localVarFp.patchSalesQuoteLineForSalesQuote(requestParameters.companyId, requestParameters.salesQuoteId, requestParameters.salesQuoteLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesQuoteLineForSalesQuoteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type salesQuoteLine in Dynamics 365 Business Central
         * @param {SalesQuoteLineApiPostSalesQuoteLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesQuoteLine(requestParameters: SalesQuoteLineApiPostSalesQuoteLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesQuoteLine> {
            return localVarFp.postSalesQuoteLine(requestParameters.companyId, requestParameters.contentType, requestParameters.postSalesQuoteLineForSalesQuoteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type salesQuoteLine in Dynamics 365 Business Central
         * @param {SalesQuoteLineApiPostSalesQuoteLineForSalesQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesQuoteLineForSalesQuote(requestParameters: SalesQuoteLineApiPostSalesQuoteLineForSalesQuoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesQuoteLine> {
            return localVarFp.postSalesQuoteLineForSalesQuote(requestParameters.companyId, requestParameters.salesQuoteId, requestParameters.contentType, requestParameters.postSalesQuoteLineForSalesQuoteRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteSalesQuoteLine operation in SalesQuoteLineApi.
 * @export
 * @interface SalesQuoteLineApiDeleteSalesQuoteLineRequest
 */
export interface SalesQuoteLineApiDeleteSalesQuoteLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesQuoteLineApiDeleteSalesQuoteLine
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesQuoteLine
     * @type {string}
     * @memberof SalesQuoteLineApiDeleteSalesQuoteLine
     */
    readonly salesQuoteLineId: string
}

/**
 * Request parameters for deleteSalesQuoteLineForSalesQuote operation in SalesQuoteLineApi.
 * @export
 * @interface SalesQuoteLineApiDeleteSalesQuoteLineForSalesQuoteRequest
 */
export interface SalesQuoteLineApiDeleteSalesQuoteLineForSalesQuoteRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesQuoteLineApiDeleteSalesQuoteLineForSalesQuote
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesQuote
     * @type {string}
     * @memberof SalesQuoteLineApiDeleteSalesQuoteLineForSalesQuote
     */
    readonly salesQuoteId: string

    /**
     * (v1.0) id for salesQuoteLine
     * @type {string}
     * @memberof SalesQuoteLineApiDeleteSalesQuoteLineForSalesQuote
     */
    readonly salesQuoteLineId: string
}

/**
 * Request parameters for getSalesQuoteLine operation in SalesQuoteLineApi.
 * @export
 * @interface SalesQuoteLineApiGetSalesQuoteLineRequest
 */
export interface SalesQuoteLineApiGetSalesQuoteLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesQuoteLineApiGetSalesQuoteLine
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesQuoteLine
     * @type {string}
     * @memberof SalesQuoteLineApiGetSalesQuoteLine
     */
    readonly salesQuoteLineId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'item' | 'account'>}
     * @memberof SalesQuoteLineApiGetSalesQuoteLine
     */
    readonly $expand?: Array<GetSalesQuoteLineExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'documentId' | 'sequence' | 'itemId' | 'accountId' | 'lineType' | 'lineDetails' | 'description' | 'unitOfMeasureId' | 'unitOfMeasure' | 'unitPrice' | 'quantity' | 'discountAmount' | 'discountPercent' | 'discountAppliedBeforeTax' | 'amountExcludingTax' | 'taxCode' | 'taxPercent' | 'totalTaxAmount' | 'amountIncludingTax' | 'netAmount' | 'netTaxAmount' | 'netAmountIncludingTax'>}
     * @memberof SalesQuoteLineApiGetSalesQuoteLine
     */
    readonly $select?: Array<GetSalesQuoteLineSelectEnum>
}

/**
 * Request parameters for getSalesQuoteLineForSalesQuote operation in SalesQuoteLineApi.
 * @export
 * @interface SalesQuoteLineApiGetSalesQuoteLineForSalesQuoteRequest
 */
export interface SalesQuoteLineApiGetSalesQuoteLineForSalesQuoteRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesQuoteLineApiGetSalesQuoteLineForSalesQuote
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesQuote
     * @type {string}
     * @memberof SalesQuoteLineApiGetSalesQuoteLineForSalesQuote
     */
    readonly salesQuoteId: string

    /**
     * (v1.0) id for salesQuoteLine
     * @type {string}
     * @memberof SalesQuoteLineApiGetSalesQuoteLineForSalesQuote
     */
    readonly salesQuoteLineId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'item' | 'account'>}
     * @memberof SalesQuoteLineApiGetSalesQuoteLineForSalesQuote
     */
    readonly $expand?: Array<GetSalesQuoteLineForSalesQuoteExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'documentId' | 'sequence' | 'itemId' | 'accountId' | 'lineType' | 'lineDetails' | 'description' | 'unitOfMeasureId' | 'unitOfMeasure' | 'unitPrice' | 'quantity' | 'discountAmount' | 'discountPercent' | 'discountAppliedBeforeTax' | 'amountExcludingTax' | 'taxCode' | 'taxPercent' | 'totalTaxAmount' | 'amountIncludingTax' | 'netAmount' | 'netTaxAmount' | 'netAmountIncludingTax'>}
     * @memberof SalesQuoteLineApiGetSalesQuoteLineForSalesQuote
     */
    readonly $select?: Array<GetSalesQuoteLineForSalesQuoteSelectEnum>
}

/**
 * Request parameters for listSalesQuoteLines operation in SalesQuoteLineApi.
 * @export
 * @interface SalesQuoteLineApiListSalesQuoteLinesRequest
 */
export interface SalesQuoteLineApiListSalesQuoteLinesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesQuoteLineApiListSalesQuoteLines
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof SalesQuoteLineApiListSalesQuoteLines
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof SalesQuoteLineApiListSalesQuoteLines
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof SalesQuoteLineApiListSalesQuoteLines
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof SalesQuoteLineApiListSalesQuoteLines
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'item' | 'account'>}
     * @memberof SalesQuoteLineApiListSalesQuoteLines
     */
    readonly $expand?: Array<ListSalesQuoteLinesExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'documentId' | 'sequence' | 'itemId' | 'accountId' | 'lineType' | 'lineDetails' | 'description' | 'unitOfMeasureId' | 'unitOfMeasure' | 'unitPrice' | 'quantity' | 'discountAmount' | 'discountPercent' | 'discountAppliedBeforeTax' | 'amountExcludingTax' | 'taxCode' | 'taxPercent' | 'totalTaxAmount' | 'amountIncludingTax' | 'netAmount' | 'netTaxAmount' | 'netAmountIncludingTax'>}
     * @memberof SalesQuoteLineApiListSalesQuoteLines
     */
    readonly $select?: Array<ListSalesQuoteLinesSelectEnum>
}

/**
 * Request parameters for listSalesQuoteLinesForSalesQuote operation in SalesQuoteLineApi.
 * @export
 * @interface SalesQuoteLineApiListSalesQuoteLinesForSalesQuoteRequest
 */
export interface SalesQuoteLineApiListSalesQuoteLinesForSalesQuoteRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesQuoteLineApiListSalesQuoteLinesForSalesQuote
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesQuote
     * @type {string}
     * @memberof SalesQuoteLineApiListSalesQuoteLinesForSalesQuote
     */
    readonly salesQuoteId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof SalesQuoteLineApiListSalesQuoteLinesForSalesQuote
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof SalesQuoteLineApiListSalesQuoteLinesForSalesQuote
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof SalesQuoteLineApiListSalesQuoteLinesForSalesQuote
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof SalesQuoteLineApiListSalesQuoteLinesForSalesQuote
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'item' | 'account'>}
     * @memberof SalesQuoteLineApiListSalesQuoteLinesForSalesQuote
     */
    readonly $expand?: Array<ListSalesQuoteLinesForSalesQuoteExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'documentId' | 'sequence' | 'itemId' | 'accountId' | 'lineType' | 'lineDetails' | 'description' | 'unitOfMeasureId' | 'unitOfMeasure' | 'unitPrice' | 'quantity' | 'discountAmount' | 'discountPercent' | 'discountAppliedBeforeTax' | 'amountExcludingTax' | 'taxCode' | 'taxPercent' | 'totalTaxAmount' | 'amountIncludingTax' | 'netAmount' | 'netTaxAmount' | 'netAmountIncludingTax'>}
     * @memberof SalesQuoteLineApiListSalesQuoteLinesForSalesQuote
     */
    readonly $select?: Array<ListSalesQuoteLinesForSalesQuoteSelectEnum>
}

/**
 * Request parameters for patchSalesQuoteLine operation in SalesQuoteLineApi.
 * @export
 * @interface SalesQuoteLineApiPatchSalesQuoteLineRequest
 */
export interface SalesQuoteLineApiPatchSalesQuoteLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesQuoteLineApiPatchSalesQuoteLine
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesQuoteLine
     * @type {string}
     * @memberof SalesQuoteLineApiPatchSalesQuoteLine
     */
    readonly salesQuoteLineId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesQuoteLineApiPatchSalesQuoteLine
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof SalesQuoteLineApiPatchSalesQuoteLine
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostSalesQuoteLineForSalesQuoteRequest}
     * @memberof SalesQuoteLineApiPatchSalesQuoteLine
     */
    readonly postSalesQuoteLineForSalesQuoteRequest: PostSalesQuoteLineForSalesQuoteRequest
}

/**
 * Request parameters for patchSalesQuoteLineForSalesQuote operation in SalesQuoteLineApi.
 * @export
 * @interface SalesQuoteLineApiPatchSalesQuoteLineForSalesQuoteRequest
 */
export interface SalesQuoteLineApiPatchSalesQuoteLineForSalesQuoteRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesQuoteLineApiPatchSalesQuoteLineForSalesQuote
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesQuote
     * @type {string}
     * @memberof SalesQuoteLineApiPatchSalesQuoteLineForSalesQuote
     */
    readonly salesQuoteId: string

    /**
     * (v1.0) id for salesQuoteLine
     * @type {string}
     * @memberof SalesQuoteLineApiPatchSalesQuoteLineForSalesQuote
     */
    readonly salesQuoteLineId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesQuoteLineApiPatchSalesQuoteLineForSalesQuote
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof SalesQuoteLineApiPatchSalesQuoteLineForSalesQuote
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostSalesQuoteLineForSalesQuoteRequest}
     * @memberof SalesQuoteLineApiPatchSalesQuoteLineForSalesQuote
     */
    readonly postSalesQuoteLineForSalesQuoteRequest: PostSalesQuoteLineForSalesQuoteRequest
}

/**
 * Request parameters for postSalesQuoteLine operation in SalesQuoteLineApi.
 * @export
 * @interface SalesQuoteLineApiPostSalesQuoteLineRequest
 */
export interface SalesQuoteLineApiPostSalesQuoteLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesQuoteLineApiPostSalesQuoteLine
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesQuoteLineApiPostSalesQuoteLine
     */
    readonly contentType: string

    /**
     * 
     * @type {PostSalesQuoteLineForSalesQuoteRequest}
     * @memberof SalesQuoteLineApiPostSalesQuoteLine
     */
    readonly postSalesQuoteLineForSalesQuoteRequest: PostSalesQuoteLineForSalesQuoteRequest
}

/**
 * Request parameters for postSalesQuoteLineForSalesQuote operation in SalesQuoteLineApi.
 * @export
 * @interface SalesQuoteLineApiPostSalesQuoteLineForSalesQuoteRequest
 */
export interface SalesQuoteLineApiPostSalesQuoteLineForSalesQuoteRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesQuoteLineApiPostSalesQuoteLineForSalesQuote
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesQuote
     * @type {string}
     * @memberof SalesQuoteLineApiPostSalesQuoteLineForSalesQuote
     */
    readonly salesQuoteId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesQuoteLineApiPostSalesQuoteLineForSalesQuote
     */
    readonly contentType: string

    /**
     * 
     * @type {PostSalesQuoteLineForSalesQuoteRequest}
     * @memberof SalesQuoteLineApiPostSalesQuoteLineForSalesQuote
     */
    readonly postSalesQuoteLineForSalesQuoteRequest: PostSalesQuoteLineForSalesQuoteRequest
}

/**
 * SalesQuoteLineApi - object-oriented interface
 * @export
 * @class SalesQuoteLineApi
 * @extends {BaseAPI}
 */
export class SalesQuoteLineApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type salesQuoteLine in Dynamics 365 Business Central
     * @param {SalesQuoteLineApiDeleteSalesQuoteLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesQuoteLineApi
     */
    public deleteSalesQuoteLine(requestParameters: SalesQuoteLineApiDeleteSalesQuoteLineRequest, options?: RawAxiosRequestConfig) {
        return SalesQuoteLineApiFp(this.configuration).deleteSalesQuoteLine(requestParameters.companyId, requestParameters.salesQuoteLineId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an object of type salesQuoteLine in Dynamics 365 Business Central
     * @param {SalesQuoteLineApiDeleteSalesQuoteLineForSalesQuoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesQuoteLineApi
     */
    public deleteSalesQuoteLineForSalesQuote(requestParameters: SalesQuoteLineApiDeleteSalesQuoteLineForSalesQuoteRequest, options?: RawAxiosRequestConfig) {
        return SalesQuoteLineApiFp(this.configuration).deleteSalesQuoteLineForSalesQuote(requestParameters.companyId, requestParameters.salesQuoteId, requestParameters.salesQuoteLineId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type salesQuoteLine for Dynamics 365 Business Central.
     * @param {SalesQuoteLineApiGetSalesQuoteLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesQuoteLineApi
     */
    public getSalesQuoteLine(requestParameters: SalesQuoteLineApiGetSalesQuoteLineRequest, options?: RawAxiosRequestConfig) {
        return SalesQuoteLineApiFp(this.configuration).getSalesQuoteLine(requestParameters.companyId, requestParameters.salesQuoteLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type salesQuoteLine for Dynamics 365 Business Central.
     * @param {SalesQuoteLineApiGetSalesQuoteLineForSalesQuoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesQuoteLineApi
     */
    public getSalesQuoteLineForSalesQuote(requestParameters: SalesQuoteLineApiGetSalesQuoteLineForSalesQuoteRequest, options?: RawAxiosRequestConfig) {
        return SalesQuoteLineApiFp(this.configuration).getSalesQuoteLineForSalesQuote(requestParameters.companyId, requestParameters.salesQuoteId, requestParameters.salesQuoteLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of salesQuoteLines
     * @param {SalesQuoteLineApiListSalesQuoteLinesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesQuoteLineApi
     */
    public listSalesQuoteLines(requestParameters: SalesQuoteLineApiListSalesQuoteLinesRequest, options?: RawAxiosRequestConfig) {
        return SalesQuoteLineApiFp(this.configuration).listSalesQuoteLines(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of salesQuoteLines
     * @param {SalesQuoteLineApiListSalesQuoteLinesForSalesQuoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesQuoteLineApi
     */
    public listSalesQuoteLinesForSalesQuote(requestParameters: SalesQuoteLineApiListSalesQuoteLinesForSalesQuoteRequest, options?: RawAxiosRequestConfig) {
        return SalesQuoteLineApiFp(this.configuration).listSalesQuoteLinesForSalesQuote(requestParameters.companyId, requestParameters.salesQuoteId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type salesQuoteLine in Dynamics 365 Business Central
     * @param {SalesQuoteLineApiPatchSalesQuoteLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesQuoteLineApi
     */
    public patchSalesQuoteLine(requestParameters: SalesQuoteLineApiPatchSalesQuoteLineRequest, options?: RawAxiosRequestConfig) {
        return SalesQuoteLineApiFp(this.configuration).patchSalesQuoteLine(requestParameters.companyId, requestParameters.salesQuoteLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesQuoteLineForSalesQuoteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type salesQuoteLine in Dynamics 365 Business Central
     * @param {SalesQuoteLineApiPatchSalesQuoteLineForSalesQuoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesQuoteLineApi
     */
    public patchSalesQuoteLineForSalesQuote(requestParameters: SalesQuoteLineApiPatchSalesQuoteLineForSalesQuoteRequest, options?: RawAxiosRequestConfig) {
        return SalesQuoteLineApiFp(this.configuration).patchSalesQuoteLineForSalesQuote(requestParameters.companyId, requestParameters.salesQuoteId, requestParameters.salesQuoteLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesQuoteLineForSalesQuoteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type salesQuoteLine in Dynamics 365 Business Central
     * @param {SalesQuoteLineApiPostSalesQuoteLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesQuoteLineApi
     */
    public postSalesQuoteLine(requestParameters: SalesQuoteLineApiPostSalesQuoteLineRequest, options?: RawAxiosRequestConfig) {
        return SalesQuoteLineApiFp(this.configuration).postSalesQuoteLine(requestParameters.companyId, requestParameters.contentType, requestParameters.postSalesQuoteLineForSalesQuoteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type salesQuoteLine in Dynamics 365 Business Central
     * @param {SalesQuoteLineApiPostSalesQuoteLineForSalesQuoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesQuoteLineApi
     */
    public postSalesQuoteLineForSalesQuote(requestParameters: SalesQuoteLineApiPostSalesQuoteLineForSalesQuoteRequest, options?: RawAxiosRequestConfig) {
        return SalesQuoteLineApiFp(this.configuration).postSalesQuoteLineForSalesQuote(requestParameters.companyId, requestParameters.salesQuoteId, requestParameters.contentType, requestParameters.postSalesQuoteLineForSalesQuoteRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetSalesQuoteLineExpandEnum = {
    Item: 'item',
    Account: 'account'
} as const;
export type GetSalesQuoteLineExpandEnum = typeof GetSalesQuoteLineExpandEnum[keyof typeof GetSalesQuoteLineExpandEnum];
/**
 * @export
 */
export const GetSalesQuoteLineSelectEnum = {
    Id: 'id',
    DocumentId: 'documentId',
    Sequence: 'sequence',
    ItemId: 'itemId',
    AccountId: 'accountId',
    LineType: 'lineType',
    LineDetails: 'lineDetails',
    Description: 'description',
    UnitOfMeasureId: 'unitOfMeasureId',
    UnitOfMeasure: 'unitOfMeasure',
    UnitPrice: 'unitPrice',
    Quantity: 'quantity',
    DiscountAmount: 'discountAmount',
    DiscountPercent: 'discountPercent',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    AmountExcludingTax: 'amountExcludingTax',
    TaxCode: 'taxCode',
    TaxPercent: 'taxPercent',
    TotalTaxAmount: 'totalTaxAmount',
    AmountIncludingTax: 'amountIncludingTax',
    NetAmount: 'netAmount',
    NetTaxAmount: 'netTaxAmount',
    NetAmountIncludingTax: 'netAmountIncludingTax'
} as const;
export type GetSalesQuoteLineSelectEnum = typeof GetSalesQuoteLineSelectEnum[keyof typeof GetSalesQuoteLineSelectEnum];
/**
 * @export
 */
export const GetSalesQuoteLineForSalesQuoteExpandEnum = {
    Item: 'item',
    Account: 'account'
} as const;
export type GetSalesQuoteLineForSalesQuoteExpandEnum = typeof GetSalesQuoteLineForSalesQuoteExpandEnum[keyof typeof GetSalesQuoteLineForSalesQuoteExpandEnum];
/**
 * @export
 */
export const GetSalesQuoteLineForSalesQuoteSelectEnum = {
    Id: 'id',
    DocumentId: 'documentId',
    Sequence: 'sequence',
    ItemId: 'itemId',
    AccountId: 'accountId',
    LineType: 'lineType',
    LineDetails: 'lineDetails',
    Description: 'description',
    UnitOfMeasureId: 'unitOfMeasureId',
    UnitOfMeasure: 'unitOfMeasure',
    UnitPrice: 'unitPrice',
    Quantity: 'quantity',
    DiscountAmount: 'discountAmount',
    DiscountPercent: 'discountPercent',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    AmountExcludingTax: 'amountExcludingTax',
    TaxCode: 'taxCode',
    TaxPercent: 'taxPercent',
    TotalTaxAmount: 'totalTaxAmount',
    AmountIncludingTax: 'amountIncludingTax',
    NetAmount: 'netAmount',
    NetTaxAmount: 'netTaxAmount',
    NetAmountIncludingTax: 'netAmountIncludingTax'
} as const;
export type GetSalesQuoteLineForSalesQuoteSelectEnum = typeof GetSalesQuoteLineForSalesQuoteSelectEnum[keyof typeof GetSalesQuoteLineForSalesQuoteSelectEnum];
/**
 * @export
 */
export const ListSalesQuoteLinesExpandEnum = {
    Item: 'item',
    Account: 'account'
} as const;
export type ListSalesQuoteLinesExpandEnum = typeof ListSalesQuoteLinesExpandEnum[keyof typeof ListSalesQuoteLinesExpandEnum];
/**
 * @export
 */
export const ListSalesQuoteLinesSelectEnum = {
    Id: 'id',
    DocumentId: 'documentId',
    Sequence: 'sequence',
    ItemId: 'itemId',
    AccountId: 'accountId',
    LineType: 'lineType',
    LineDetails: 'lineDetails',
    Description: 'description',
    UnitOfMeasureId: 'unitOfMeasureId',
    UnitOfMeasure: 'unitOfMeasure',
    UnitPrice: 'unitPrice',
    Quantity: 'quantity',
    DiscountAmount: 'discountAmount',
    DiscountPercent: 'discountPercent',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    AmountExcludingTax: 'amountExcludingTax',
    TaxCode: 'taxCode',
    TaxPercent: 'taxPercent',
    TotalTaxAmount: 'totalTaxAmount',
    AmountIncludingTax: 'amountIncludingTax',
    NetAmount: 'netAmount',
    NetTaxAmount: 'netTaxAmount',
    NetAmountIncludingTax: 'netAmountIncludingTax'
} as const;
export type ListSalesQuoteLinesSelectEnum = typeof ListSalesQuoteLinesSelectEnum[keyof typeof ListSalesQuoteLinesSelectEnum];
/**
 * @export
 */
export const ListSalesQuoteLinesForSalesQuoteExpandEnum = {
    Item: 'item',
    Account: 'account'
} as const;
export type ListSalesQuoteLinesForSalesQuoteExpandEnum = typeof ListSalesQuoteLinesForSalesQuoteExpandEnum[keyof typeof ListSalesQuoteLinesForSalesQuoteExpandEnum];
/**
 * @export
 */
export const ListSalesQuoteLinesForSalesQuoteSelectEnum = {
    Id: 'id',
    DocumentId: 'documentId',
    Sequence: 'sequence',
    ItemId: 'itemId',
    AccountId: 'accountId',
    LineType: 'lineType',
    LineDetails: 'lineDetails',
    Description: 'description',
    UnitOfMeasureId: 'unitOfMeasureId',
    UnitOfMeasure: 'unitOfMeasure',
    UnitPrice: 'unitPrice',
    Quantity: 'quantity',
    DiscountAmount: 'discountAmount',
    DiscountPercent: 'discountPercent',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    AmountExcludingTax: 'amountExcludingTax',
    TaxCode: 'taxCode',
    TaxPercent: 'taxPercent',
    TotalTaxAmount: 'totalTaxAmount',
    AmountIncludingTax: 'amountIncludingTax',
    NetAmount: 'netAmount',
    NetTaxAmount: 'netTaxAmount',
    NetAmountIncludingTax: 'netAmountIncludingTax'
} as const;
export type ListSalesQuoteLinesForSalesQuoteSelectEnum = typeof ListSalesQuoteLinesForSalesQuoteSelectEnum[keyof typeof ListSalesQuoteLinesForSalesQuoteSelectEnum];
