/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ListPdfDocumentForSalesInvoice200Response } from '../model';
// @ts-ignore
import type { PdfDocument } from '../model';
/**
 * PdfDocumentApi - axios parameter creator
 * @export
 */
export const PdfDocumentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} pdfDocumentId (v1.0) id for pdfDocument
         * @param {Array<GetPdfDocumentSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdfDocument: async (companyId: string, pdfDocumentId: string, $select?: Array<GetPdfDocumentSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPdfDocument', 'companyId', companyId)
            // verify required parameter 'pdfDocumentId' is not null or undefined
            assertParamExists('getPdfDocument', 'pdfDocumentId', pdfDocumentId)
            const localVarPath = `/companies({company_id})/pdfDocument({pdfDocument_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"pdfDocument_id"}}`, encodeURIComponent(String(pdfDocumentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceId (v1.0) id for purchaseInvoice
         * @param {string} pdfDocumentId (v1.0) id for pdfDocument
         * @param {Array<GetPdfDocumentForPurchaseInvoiceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdfDocumentForPurchaseInvoice: async (companyId: string, purchaseInvoiceId: string, pdfDocumentId: string, $select?: Array<GetPdfDocumentForPurchaseInvoiceSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPdfDocumentForPurchaseInvoice', 'companyId', companyId)
            // verify required parameter 'purchaseInvoiceId' is not null or undefined
            assertParamExists('getPdfDocumentForPurchaseInvoice', 'purchaseInvoiceId', purchaseInvoiceId)
            // verify required parameter 'pdfDocumentId' is not null or undefined
            assertParamExists('getPdfDocumentForPurchaseInvoice', 'pdfDocumentId', pdfDocumentId)
            const localVarPath = `/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/pdfDocument({pdfDocument_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"purchaseInvoice_id"}}`, encodeURIComponent(String(purchaseInvoiceId)))
                .replace(`{${"pdfDocument_id"}}`, encodeURIComponent(String(pdfDocumentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {string} pdfDocumentId (v1.0) id for pdfDocument
         * @param {Array<GetPdfDocumentForSalesCreditMemoSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdfDocumentForSalesCreditMemo: async (companyId: string, salesCreditMemoId: string, pdfDocumentId: string, $select?: Array<GetPdfDocumentForSalesCreditMemoSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPdfDocumentForSalesCreditMemo', 'companyId', companyId)
            // verify required parameter 'salesCreditMemoId' is not null or undefined
            assertParamExists('getPdfDocumentForSalesCreditMemo', 'salesCreditMemoId', salesCreditMemoId)
            // verify required parameter 'pdfDocumentId' is not null or undefined
            assertParamExists('getPdfDocumentForSalesCreditMemo', 'pdfDocumentId', pdfDocumentId)
            const localVarPath = `/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/pdfDocument({pdfDocument_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesCreditMemo_id"}}`, encodeURIComponent(String(salesCreditMemoId)))
                .replace(`{${"pdfDocument_id"}}`, encodeURIComponent(String(pdfDocumentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {string} pdfDocumentId (v1.0) id for pdfDocument
         * @param {Array<GetPdfDocumentForSalesInvoiceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdfDocumentForSalesInvoice: async (companyId: string, salesInvoiceId: string, pdfDocumentId: string, $select?: Array<GetPdfDocumentForSalesInvoiceSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPdfDocumentForSalesInvoice', 'companyId', companyId)
            // verify required parameter 'salesInvoiceId' is not null or undefined
            assertParamExists('getPdfDocumentForSalesInvoice', 'salesInvoiceId', salesInvoiceId)
            // verify required parameter 'pdfDocumentId' is not null or undefined
            assertParamExists('getPdfDocumentForSalesInvoice', 'pdfDocumentId', pdfDocumentId)
            const localVarPath = `/companies({company_id})/salesInvoices({salesInvoice_id})/pdfDocument({pdfDocument_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesInvoice_id"}}`, encodeURIComponent(String(salesInvoiceId)))
                .replace(`{${"pdfDocument_id"}}`, encodeURIComponent(String(pdfDocumentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {string} pdfDocumentId (v1.0) id for pdfDocument
         * @param {Array<GetPdfDocumentForSalesQuoteSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdfDocumentForSalesQuote: async (companyId: string, salesQuoteId: string, pdfDocumentId: string, $select?: Array<GetPdfDocumentForSalesQuoteSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPdfDocumentForSalesQuote', 'companyId', companyId)
            // verify required parameter 'salesQuoteId' is not null or undefined
            assertParamExists('getPdfDocumentForSalesQuote', 'salesQuoteId', salesQuoteId)
            // verify required parameter 'pdfDocumentId' is not null or undefined
            assertParamExists('getPdfDocumentForSalesQuote', 'pdfDocumentId', pdfDocumentId)
            const localVarPath = `/companies({company_id})/salesQuotes({salesQuote_id})/pdfDocument({pdfDocument_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesQuote_id"}}`, encodeURIComponent(String(salesQuoteId)))
                .replace(`{${"pdfDocument_id"}}`, encodeURIComponent(String(pdfDocumentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of pdfDocument
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPdfDocumentSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPdfDocument: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPdfDocumentSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listPdfDocument', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/pdfDocument`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of pdfDocument
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceId (v1.0) id for purchaseInvoice
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPdfDocumentForPurchaseInvoiceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPdfDocumentForPurchaseInvoice: async (companyId: string, purchaseInvoiceId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPdfDocumentForPurchaseInvoiceSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listPdfDocumentForPurchaseInvoice', 'companyId', companyId)
            // verify required parameter 'purchaseInvoiceId' is not null or undefined
            assertParamExists('listPdfDocumentForPurchaseInvoice', 'purchaseInvoiceId', purchaseInvoiceId)
            const localVarPath = `/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/pdfDocument`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"purchaseInvoice_id"}}`, encodeURIComponent(String(purchaseInvoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of pdfDocument
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPdfDocumentForSalesCreditMemoSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPdfDocumentForSalesCreditMemo: async (companyId: string, salesCreditMemoId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPdfDocumentForSalesCreditMemoSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listPdfDocumentForSalesCreditMemo', 'companyId', companyId)
            // verify required parameter 'salesCreditMemoId' is not null or undefined
            assertParamExists('listPdfDocumentForSalesCreditMemo', 'salesCreditMemoId', salesCreditMemoId)
            const localVarPath = `/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/pdfDocument`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesCreditMemo_id"}}`, encodeURIComponent(String(salesCreditMemoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of pdfDocument
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPdfDocumentForSalesInvoiceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPdfDocumentForSalesInvoice: async (companyId: string, salesInvoiceId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPdfDocumentForSalesInvoiceSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listPdfDocumentForSalesInvoice', 'companyId', companyId)
            // verify required parameter 'salesInvoiceId' is not null or undefined
            assertParamExists('listPdfDocumentForSalesInvoice', 'salesInvoiceId', salesInvoiceId)
            const localVarPath = `/companies({company_id})/salesInvoices({salesInvoice_id})/pdfDocument`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesInvoice_id"}}`, encodeURIComponent(String(salesInvoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of pdfDocument
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPdfDocumentForSalesQuoteSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPdfDocumentForSalesQuote: async (companyId: string, salesQuoteId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPdfDocumentForSalesQuoteSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listPdfDocumentForSalesQuote', 'companyId', companyId)
            // verify required parameter 'salesQuoteId' is not null or undefined
            assertParamExists('listPdfDocumentForSalesQuote', 'salesQuoteId', salesQuoteId)
            const localVarPath = `/companies({company_id})/salesQuotes({salesQuote_id})/pdfDocument`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesQuote_id"}}`, encodeURIComponent(String(salesQuoteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PdfDocumentApi - functional programming interface
 * @export
 */
export const PdfDocumentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PdfDocumentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} pdfDocumentId (v1.0) id for pdfDocument
         * @param {Array<GetPdfDocumentSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPdfDocument(companyId: string, pdfDocumentId: string, $select?: Array<GetPdfDocumentSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PdfDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPdfDocument(companyId, pdfDocumentId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PdfDocumentApi.getPdfDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceId (v1.0) id for purchaseInvoice
         * @param {string} pdfDocumentId (v1.0) id for pdfDocument
         * @param {Array<GetPdfDocumentForPurchaseInvoiceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPdfDocumentForPurchaseInvoice(companyId: string, purchaseInvoiceId: string, pdfDocumentId: string, $select?: Array<GetPdfDocumentForPurchaseInvoiceSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PdfDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPdfDocumentForPurchaseInvoice(companyId, purchaseInvoiceId, pdfDocumentId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PdfDocumentApi.getPdfDocumentForPurchaseInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {string} pdfDocumentId (v1.0) id for pdfDocument
         * @param {Array<GetPdfDocumentForSalesCreditMemoSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPdfDocumentForSalesCreditMemo(companyId: string, salesCreditMemoId: string, pdfDocumentId: string, $select?: Array<GetPdfDocumentForSalesCreditMemoSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PdfDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPdfDocumentForSalesCreditMemo(companyId, salesCreditMemoId, pdfDocumentId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PdfDocumentApi.getPdfDocumentForSalesCreditMemo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {string} pdfDocumentId (v1.0) id for pdfDocument
         * @param {Array<GetPdfDocumentForSalesInvoiceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPdfDocumentForSalesInvoice(companyId: string, salesInvoiceId: string, pdfDocumentId: string, $select?: Array<GetPdfDocumentForSalesInvoiceSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PdfDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPdfDocumentForSalesInvoice(companyId, salesInvoiceId, pdfDocumentId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PdfDocumentApi.getPdfDocumentForSalesInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {string} pdfDocumentId (v1.0) id for pdfDocument
         * @param {Array<GetPdfDocumentForSalesQuoteSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPdfDocumentForSalesQuote(companyId: string, salesQuoteId: string, pdfDocumentId: string, $select?: Array<GetPdfDocumentForSalesQuoteSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PdfDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPdfDocumentForSalesQuote(companyId, salesQuoteId, pdfDocumentId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PdfDocumentApi.getPdfDocumentForSalesQuote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of pdfDocument
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPdfDocumentSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPdfDocument(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPdfDocumentSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPdfDocumentForSalesInvoice200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPdfDocument(companyId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PdfDocumentApi.listPdfDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of pdfDocument
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceId (v1.0) id for purchaseInvoice
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPdfDocumentForPurchaseInvoiceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPdfDocumentForPurchaseInvoice(companyId: string, purchaseInvoiceId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPdfDocumentForPurchaseInvoiceSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPdfDocumentForSalesInvoice200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPdfDocumentForPurchaseInvoice(companyId, purchaseInvoiceId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PdfDocumentApi.listPdfDocumentForPurchaseInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of pdfDocument
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPdfDocumentForSalesCreditMemoSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPdfDocumentForSalesCreditMemo(companyId: string, salesCreditMemoId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPdfDocumentForSalesCreditMemoSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPdfDocumentForSalesInvoice200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPdfDocumentForSalesCreditMemo(companyId, salesCreditMemoId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PdfDocumentApi.listPdfDocumentForSalesCreditMemo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of pdfDocument
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPdfDocumentForSalesInvoiceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPdfDocumentForSalesInvoice(companyId: string, salesInvoiceId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPdfDocumentForSalesInvoiceSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPdfDocumentForSalesInvoice200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPdfDocumentForSalesInvoice(companyId, salesInvoiceId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PdfDocumentApi.listPdfDocumentForSalesInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of pdfDocument
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesQuoteId (v1.0) id for salesQuote
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPdfDocumentForSalesQuoteSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPdfDocumentForSalesQuote(companyId: string, salesQuoteId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPdfDocumentForSalesQuoteSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPdfDocumentForSalesInvoice200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPdfDocumentForSalesQuote(companyId, salesQuoteId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PdfDocumentApi.listPdfDocumentForSalesQuote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PdfDocumentApi - factory interface
 * @export
 */
export const PdfDocumentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PdfDocumentApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
         * @param {PdfDocumentApiGetPdfDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdfDocument(requestParameters: PdfDocumentApiGetPdfDocumentRequest, options?: RawAxiosRequestConfig): AxiosPromise<PdfDocument> {
            return localVarFp.getPdfDocument(requestParameters.companyId, requestParameters.pdfDocumentId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
         * @param {PdfDocumentApiGetPdfDocumentForPurchaseInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdfDocumentForPurchaseInvoice(requestParameters: PdfDocumentApiGetPdfDocumentForPurchaseInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<PdfDocument> {
            return localVarFp.getPdfDocumentForPurchaseInvoice(requestParameters.companyId, requestParameters.purchaseInvoiceId, requestParameters.pdfDocumentId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
         * @param {PdfDocumentApiGetPdfDocumentForSalesCreditMemoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdfDocumentForSalesCreditMemo(requestParameters: PdfDocumentApiGetPdfDocumentForSalesCreditMemoRequest, options?: RawAxiosRequestConfig): AxiosPromise<PdfDocument> {
            return localVarFp.getPdfDocumentForSalesCreditMemo(requestParameters.companyId, requestParameters.salesCreditMemoId, requestParameters.pdfDocumentId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
         * @param {PdfDocumentApiGetPdfDocumentForSalesInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdfDocumentForSalesInvoice(requestParameters: PdfDocumentApiGetPdfDocumentForSalesInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<PdfDocument> {
            return localVarFp.getPdfDocumentForSalesInvoice(requestParameters.companyId, requestParameters.salesInvoiceId, requestParameters.pdfDocumentId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
         * @param {PdfDocumentApiGetPdfDocumentForSalesQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdfDocumentForSalesQuote(requestParameters: PdfDocumentApiGetPdfDocumentForSalesQuoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<PdfDocument> {
            return localVarFp.getPdfDocumentForSalesQuote(requestParameters.companyId, requestParameters.salesQuoteId, requestParameters.pdfDocumentId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of pdfDocument
         * @param {PdfDocumentApiListPdfDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPdfDocument(requestParameters: PdfDocumentApiListPdfDocumentRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPdfDocumentForSalesInvoice200Response> {
            return localVarFp.listPdfDocument(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of pdfDocument
         * @param {PdfDocumentApiListPdfDocumentForPurchaseInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPdfDocumentForPurchaseInvoice(requestParameters: PdfDocumentApiListPdfDocumentForPurchaseInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPdfDocumentForSalesInvoice200Response> {
            return localVarFp.listPdfDocumentForPurchaseInvoice(requestParameters.companyId, requestParameters.purchaseInvoiceId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of pdfDocument
         * @param {PdfDocumentApiListPdfDocumentForSalesCreditMemoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPdfDocumentForSalesCreditMemo(requestParameters: PdfDocumentApiListPdfDocumentForSalesCreditMemoRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPdfDocumentForSalesInvoice200Response> {
            return localVarFp.listPdfDocumentForSalesCreditMemo(requestParameters.companyId, requestParameters.salesCreditMemoId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of pdfDocument
         * @param {PdfDocumentApiListPdfDocumentForSalesInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPdfDocumentForSalesInvoice(requestParameters: PdfDocumentApiListPdfDocumentForSalesInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPdfDocumentForSalesInvoice200Response> {
            return localVarFp.listPdfDocumentForSalesInvoice(requestParameters.companyId, requestParameters.salesInvoiceId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of pdfDocument
         * @param {PdfDocumentApiListPdfDocumentForSalesQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPdfDocumentForSalesQuote(requestParameters: PdfDocumentApiListPdfDocumentForSalesQuoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPdfDocumentForSalesInvoice200Response> {
            return localVarFp.listPdfDocumentForSalesQuote(requestParameters.companyId, requestParameters.salesQuoteId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getPdfDocument operation in PdfDocumentApi.
 * @export
 * @interface PdfDocumentApiGetPdfDocumentRequest
 */
export interface PdfDocumentApiGetPdfDocumentRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PdfDocumentApiGetPdfDocument
     */
    readonly companyId: string

    /**
     * (v1.0) id for pdfDocument
     * @type {string}
     * @memberof PdfDocumentApiGetPdfDocument
     */
    readonly pdfDocumentId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'content'>}
     * @memberof PdfDocumentApiGetPdfDocument
     */
    readonly $select?: Array<GetPdfDocumentSelectEnum>
}

/**
 * Request parameters for getPdfDocumentForPurchaseInvoice operation in PdfDocumentApi.
 * @export
 * @interface PdfDocumentApiGetPdfDocumentForPurchaseInvoiceRequest
 */
export interface PdfDocumentApiGetPdfDocumentForPurchaseInvoiceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PdfDocumentApiGetPdfDocumentForPurchaseInvoice
     */
    readonly companyId: string

    /**
     * (v1.0) id for purchaseInvoice
     * @type {string}
     * @memberof PdfDocumentApiGetPdfDocumentForPurchaseInvoice
     */
    readonly purchaseInvoiceId: string

    /**
     * (v1.0) id for pdfDocument
     * @type {string}
     * @memberof PdfDocumentApiGetPdfDocumentForPurchaseInvoice
     */
    readonly pdfDocumentId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'content'>}
     * @memberof PdfDocumentApiGetPdfDocumentForPurchaseInvoice
     */
    readonly $select?: Array<GetPdfDocumentForPurchaseInvoiceSelectEnum>
}

/**
 * Request parameters for getPdfDocumentForSalesCreditMemo operation in PdfDocumentApi.
 * @export
 * @interface PdfDocumentApiGetPdfDocumentForSalesCreditMemoRequest
 */
export interface PdfDocumentApiGetPdfDocumentForSalesCreditMemoRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PdfDocumentApiGetPdfDocumentForSalesCreditMemo
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesCreditMemo
     * @type {string}
     * @memberof PdfDocumentApiGetPdfDocumentForSalesCreditMemo
     */
    readonly salesCreditMemoId: string

    /**
     * (v1.0) id for pdfDocument
     * @type {string}
     * @memberof PdfDocumentApiGetPdfDocumentForSalesCreditMemo
     */
    readonly pdfDocumentId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'content'>}
     * @memberof PdfDocumentApiGetPdfDocumentForSalesCreditMemo
     */
    readonly $select?: Array<GetPdfDocumentForSalesCreditMemoSelectEnum>
}

/**
 * Request parameters for getPdfDocumentForSalesInvoice operation in PdfDocumentApi.
 * @export
 * @interface PdfDocumentApiGetPdfDocumentForSalesInvoiceRequest
 */
export interface PdfDocumentApiGetPdfDocumentForSalesInvoiceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PdfDocumentApiGetPdfDocumentForSalesInvoice
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesInvoice
     * @type {string}
     * @memberof PdfDocumentApiGetPdfDocumentForSalesInvoice
     */
    readonly salesInvoiceId: string

    /**
     * (v1.0) id for pdfDocument
     * @type {string}
     * @memberof PdfDocumentApiGetPdfDocumentForSalesInvoice
     */
    readonly pdfDocumentId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'content'>}
     * @memberof PdfDocumentApiGetPdfDocumentForSalesInvoice
     */
    readonly $select?: Array<GetPdfDocumentForSalesInvoiceSelectEnum>
}

/**
 * Request parameters for getPdfDocumentForSalesQuote operation in PdfDocumentApi.
 * @export
 * @interface PdfDocumentApiGetPdfDocumentForSalesQuoteRequest
 */
export interface PdfDocumentApiGetPdfDocumentForSalesQuoteRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PdfDocumentApiGetPdfDocumentForSalesQuote
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesQuote
     * @type {string}
     * @memberof PdfDocumentApiGetPdfDocumentForSalesQuote
     */
    readonly salesQuoteId: string

    /**
     * (v1.0) id for pdfDocument
     * @type {string}
     * @memberof PdfDocumentApiGetPdfDocumentForSalesQuote
     */
    readonly pdfDocumentId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'content'>}
     * @memberof PdfDocumentApiGetPdfDocumentForSalesQuote
     */
    readonly $select?: Array<GetPdfDocumentForSalesQuoteSelectEnum>
}

/**
 * Request parameters for listPdfDocument operation in PdfDocumentApi.
 * @export
 * @interface PdfDocumentApiListPdfDocumentRequest
 */
export interface PdfDocumentApiListPdfDocumentRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PdfDocumentApiListPdfDocument
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof PdfDocumentApiListPdfDocument
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof PdfDocumentApiListPdfDocument
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof PdfDocumentApiListPdfDocument
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof PdfDocumentApiListPdfDocument
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'content'>}
     * @memberof PdfDocumentApiListPdfDocument
     */
    readonly $select?: Array<ListPdfDocumentSelectEnum>
}

/**
 * Request parameters for listPdfDocumentForPurchaseInvoice operation in PdfDocumentApi.
 * @export
 * @interface PdfDocumentApiListPdfDocumentForPurchaseInvoiceRequest
 */
export interface PdfDocumentApiListPdfDocumentForPurchaseInvoiceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PdfDocumentApiListPdfDocumentForPurchaseInvoice
     */
    readonly companyId: string

    /**
     * (v1.0) id for purchaseInvoice
     * @type {string}
     * @memberof PdfDocumentApiListPdfDocumentForPurchaseInvoice
     */
    readonly purchaseInvoiceId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof PdfDocumentApiListPdfDocumentForPurchaseInvoice
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof PdfDocumentApiListPdfDocumentForPurchaseInvoice
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof PdfDocumentApiListPdfDocumentForPurchaseInvoice
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof PdfDocumentApiListPdfDocumentForPurchaseInvoice
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'content'>}
     * @memberof PdfDocumentApiListPdfDocumentForPurchaseInvoice
     */
    readonly $select?: Array<ListPdfDocumentForPurchaseInvoiceSelectEnum>
}

/**
 * Request parameters for listPdfDocumentForSalesCreditMemo operation in PdfDocumentApi.
 * @export
 * @interface PdfDocumentApiListPdfDocumentForSalesCreditMemoRequest
 */
export interface PdfDocumentApiListPdfDocumentForSalesCreditMemoRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PdfDocumentApiListPdfDocumentForSalesCreditMemo
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesCreditMemo
     * @type {string}
     * @memberof PdfDocumentApiListPdfDocumentForSalesCreditMemo
     */
    readonly salesCreditMemoId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof PdfDocumentApiListPdfDocumentForSalesCreditMemo
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof PdfDocumentApiListPdfDocumentForSalesCreditMemo
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof PdfDocumentApiListPdfDocumentForSalesCreditMemo
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof PdfDocumentApiListPdfDocumentForSalesCreditMemo
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'content'>}
     * @memberof PdfDocumentApiListPdfDocumentForSalesCreditMemo
     */
    readonly $select?: Array<ListPdfDocumentForSalesCreditMemoSelectEnum>
}

/**
 * Request parameters for listPdfDocumentForSalesInvoice operation in PdfDocumentApi.
 * @export
 * @interface PdfDocumentApiListPdfDocumentForSalesInvoiceRequest
 */
export interface PdfDocumentApiListPdfDocumentForSalesInvoiceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PdfDocumentApiListPdfDocumentForSalesInvoice
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesInvoice
     * @type {string}
     * @memberof PdfDocumentApiListPdfDocumentForSalesInvoice
     */
    readonly salesInvoiceId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof PdfDocumentApiListPdfDocumentForSalesInvoice
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof PdfDocumentApiListPdfDocumentForSalesInvoice
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof PdfDocumentApiListPdfDocumentForSalesInvoice
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof PdfDocumentApiListPdfDocumentForSalesInvoice
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'content'>}
     * @memberof PdfDocumentApiListPdfDocumentForSalesInvoice
     */
    readonly $select?: Array<ListPdfDocumentForSalesInvoiceSelectEnum>
}

/**
 * Request parameters for listPdfDocumentForSalesQuote operation in PdfDocumentApi.
 * @export
 * @interface PdfDocumentApiListPdfDocumentForSalesQuoteRequest
 */
export interface PdfDocumentApiListPdfDocumentForSalesQuoteRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PdfDocumentApiListPdfDocumentForSalesQuote
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesQuote
     * @type {string}
     * @memberof PdfDocumentApiListPdfDocumentForSalesQuote
     */
    readonly salesQuoteId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof PdfDocumentApiListPdfDocumentForSalesQuote
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof PdfDocumentApiListPdfDocumentForSalesQuote
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof PdfDocumentApiListPdfDocumentForSalesQuote
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof PdfDocumentApiListPdfDocumentForSalesQuote
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'content'>}
     * @memberof PdfDocumentApiListPdfDocumentForSalesQuote
     */
    readonly $select?: Array<ListPdfDocumentForSalesQuoteSelectEnum>
}

/**
 * PdfDocumentApi - object-oriented interface
 * @export
 * @class PdfDocumentApi
 * @extends {BaseAPI}
 */
export class PdfDocumentApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     * @param {PdfDocumentApiGetPdfDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PdfDocumentApi
     */
    public getPdfDocument(requestParameters: PdfDocumentApiGetPdfDocumentRequest, options?: RawAxiosRequestConfig) {
        return PdfDocumentApiFp(this.configuration).getPdfDocument(requestParameters.companyId, requestParameters.pdfDocumentId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     * @param {PdfDocumentApiGetPdfDocumentForPurchaseInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PdfDocumentApi
     */
    public getPdfDocumentForPurchaseInvoice(requestParameters: PdfDocumentApiGetPdfDocumentForPurchaseInvoiceRequest, options?: RawAxiosRequestConfig) {
        return PdfDocumentApiFp(this.configuration).getPdfDocumentForPurchaseInvoice(requestParameters.companyId, requestParameters.purchaseInvoiceId, requestParameters.pdfDocumentId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     * @param {PdfDocumentApiGetPdfDocumentForSalesCreditMemoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PdfDocumentApi
     */
    public getPdfDocumentForSalesCreditMemo(requestParameters: PdfDocumentApiGetPdfDocumentForSalesCreditMemoRequest, options?: RawAxiosRequestConfig) {
        return PdfDocumentApiFp(this.configuration).getPdfDocumentForSalesCreditMemo(requestParameters.companyId, requestParameters.salesCreditMemoId, requestParameters.pdfDocumentId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     * @param {PdfDocumentApiGetPdfDocumentForSalesInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PdfDocumentApi
     */
    public getPdfDocumentForSalesInvoice(requestParameters: PdfDocumentApiGetPdfDocumentForSalesInvoiceRequest, options?: RawAxiosRequestConfig) {
        return PdfDocumentApiFp(this.configuration).getPdfDocumentForSalesInvoice(requestParameters.companyId, requestParameters.salesInvoiceId, requestParameters.pdfDocumentId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type pdfDocument for Dynamics 365 Business Central.
     * @param {PdfDocumentApiGetPdfDocumentForSalesQuoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PdfDocumentApi
     */
    public getPdfDocumentForSalesQuote(requestParameters: PdfDocumentApiGetPdfDocumentForSalesQuoteRequest, options?: RawAxiosRequestConfig) {
        return PdfDocumentApiFp(this.configuration).getPdfDocumentForSalesQuote(requestParameters.companyId, requestParameters.salesQuoteId, requestParameters.pdfDocumentId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of pdfDocument
     * @param {PdfDocumentApiListPdfDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PdfDocumentApi
     */
    public listPdfDocument(requestParameters: PdfDocumentApiListPdfDocumentRequest, options?: RawAxiosRequestConfig) {
        return PdfDocumentApiFp(this.configuration).listPdfDocument(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of pdfDocument
     * @param {PdfDocumentApiListPdfDocumentForPurchaseInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PdfDocumentApi
     */
    public listPdfDocumentForPurchaseInvoice(requestParameters: PdfDocumentApiListPdfDocumentForPurchaseInvoiceRequest, options?: RawAxiosRequestConfig) {
        return PdfDocumentApiFp(this.configuration).listPdfDocumentForPurchaseInvoice(requestParameters.companyId, requestParameters.purchaseInvoiceId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of pdfDocument
     * @param {PdfDocumentApiListPdfDocumentForSalesCreditMemoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PdfDocumentApi
     */
    public listPdfDocumentForSalesCreditMemo(requestParameters: PdfDocumentApiListPdfDocumentForSalesCreditMemoRequest, options?: RawAxiosRequestConfig) {
        return PdfDocumentApiFp(this.configuration).listPdfDocumentForSalesCreditMemo(requestParameters.companyId, requestParameters.salesCreditMemoId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of pdfDocument
     * @param {PdfDocumentApiListPdfDocumentForSalesInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PdfDocumentApi
     */
    public listPdfDocumentForSalesInvoice(requestParameters: PdfDocumentApiListPdfDocumentForSalesInvoiceRequest, options?: RawAxiosRequestConfig) {
        return PdfDocumentApiFp(this.configuration).listPdfDocumentForSalesInvoice(requestParameters.companyId, requestParameters.salesInvoiceId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of pdfDocument
     * @param {PdfDocumentApiListPdfDocumentForSalesQuoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PdfDocumentApi
     */
    public listPdfDocumentForSalesQuote(requestParameters: PdfDocumentApiListPdfDocumentForSalesQuoteRequest, options?: RawAxiosRequestConfig) {
        return PdfDocumentApiFp(this.configuration).listPdfDocumentForSalesQuote(requestParameters.companyId, requestParameters.salesQuoteId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetPdfDocumentSelectEnum = {
    Id: 'id',
    Content: 'content'
} as const;
export type GetPdfDocumentSelectEnum = typeof GetPdfDocumentSelectEnum[keyof typeof GetPdfDocumentSelectEnum];
/**
 * @export
 */
export const GetPdfDocumentForPurchaseInvoiceSelectEnum = {
    Id: 'id',
    Content: 'content'
} as const;
export type GetPdfDocumentForPurchaseInvoiceSelectEnum = typeof GetPdfDocumentForPurchaseInvoiceSelectEnum[keyof typeof GetPdfDocumentForPurchaseInvoiceSelectEnum];
/**
 * @export
 */
export const GetPdfDocumentForSalesCreditMemoSelectEnum = {
    Id: 'id',
    Content: 'content'
} as const;
export type GetPdfDocumentForSalesCreditMemoSelectEnum = typeof GetPdfDocumentForSalesCreditMemoSelectEnum[keyof typeof GetPdfDocumentForSalesCreditMemoSelectEnum];
/**
 * @export
 */
export const GetPdfDocumentForSalesInvoiceSelectEnum = {
    Id: 'id',
    Content: 'content'
} as const;
export type GetPdfDocumentForSalesInvoiceSelectEnum = typeof GetPdfDocumentForSalesInvoiceSelectEnum[keyof typeof GetPdfDocumentForSalesInvoiceSelectEnum];
/**
 * @export
 */
export const GetPdfDocumentForSalesQuoteSelectEnum = {
    Id: 'id',
    Content: 'content'
} as const;
export type GetPdfDocumentForSalesQuoteSelectEnum = typeof GetPdfDocumentForSalesQuoteSelectEnum[keyof typeof GetPdfDocumentForSalesQuoteSelectEnum];
/**
 * @export
 */
export const ListPdfDocumentSelectEnum = {
    Id: 'id',
    Content: 'content'
} as const;
export type ListPdfDocumentSelectEnum = typeof ListPdfDocumentSelectEnum[keyof typeof ListPdfDocumentSelectEnum];
/**
 * @export
 */
export const ListPdfDocumentForPurchaseInvoiceSelectEnum = {
    Id: 'id',
    Content: 'content'
} as const;
export type ListPdfDocumentForPurchaseInvoiceSelectEnum = typeof ListPdfDocumentForPurchaseInvoiceSelectEnum[keyof typeof ListPdfDocumentForPurchaseInvoiceSelectEnum];
/**
 * @export
 */
export const ListPdfDocumentForSalesCreditMemoSelectEnum = {
    Id: 'id',
    Content: 'content'
} as const;
export type ListPdfDocumentForSalesCreditMemoSelectEnum = typeof ListPdfDocumentForSalesCreditMemoSelectEnum[keyof typeof ListPdfDocumentForSalesCreditMemoSelectEnum];
/**
 * @export
 */
export const ListPdfDocumentForSalesInvoiceSelectEnum = {
    Id: 'id',
    Content: 'content'
} as const;
export type ListPdfDocumentForSalesInvoiceSelectEnum = typeof ListPdfDocumentForSalesInvoiceSelectEnum[keyof typeof ListPdfDocumentForSalesInvoiceSelectEnum];
/**
 * @export
 */
export const ListPdfDocumentForSalesQuoteSelectEnum = {
    Id: 'id',
    Content: 'content'
} as const;
export type ListPdfDocumentForSalesQuoteSelectEnum = typeof ListPdfDocumentForSalesQuoteSelectEnum[keyof typeof ListPdfDocumentForSalesQuoteSelectEnum];
