/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CustomerPaymentJournal } from '../model';
// @ts-ignore
import type { ListCustomerPaymentJournals200Response } from '../model';
// @ts-ignore
import type { PostCustomerPaymentJournalRequest } from '../model';
/**
 * CustomerPaymentJournalApi - axios parameter creator
 * @export
 */
export const CustomerPaymentJournalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type customerPaymentJournal in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerPaymentJournalId (v1.0) id for customerPaymentJournal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerPaymentJournal: async (companyId: string, customerPaymentJournalId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteCustomerPaymentJournal', 'companyId', companyId)
            // verify required parameter 'customerPaymentJournalId' is not null or undefined
            assertParamExists('deleteCustomerPaymentJournal', 'customerPaymentJournalId', customerPaymentJournalId)
            const localVarPath = `/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"customerPaymentJournal_id"}}`, encodeURIComponent(String(customerPaymentJournalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type customerPaymentJournal for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerPaymentJournalId (v1.0) id for customerPaymentJournal
         * @param {Array<GetCustomerPaymentJournalExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetCustomerPaymentJournalSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerPaymentJournal: async (companyId: string, customerPaymentJournalId: string, $expand?: Array<GetCustomerPaymentJournalExpandEnum>, $select?: Array<GetCustomerPaymentJournalSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCustomerPaymentJournal', 'companyId', companyId)
            // verify required parameter 'customerPaymentJournalId' is not null or undefined
            assertParamExists('getCustomerPaymentJournal', 'customerPaymentJournalId', customerPaymentJournalId)
            const localVarPath = `/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"customerPaymentJournal_id"}}`, encodeURIComponent(String(customerPaymentJournalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of customerPaymentJournals
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListCustomerPaymentJournalsExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListCustomerPaymentJournalsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerPaymentJournals: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListCustomerPaymentJournalsExpandEnum>, $select?: Array<ListCustomerPaymentJournalsSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listCustomerPaymentJournals', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/customerPaymentJournals`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type customerPaymentJournal in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerPaymentJournalId (v1.0) id for customerPaymentJournal
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostCustomerPaymentJournalRequest} postCustomerPaymentJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCustomerPaymentJournal: async (companyId: string, customerPaymentJournalId: string, contentType: string, ifMatch: string, postCustomerPaymentJournalRequest: PostCustomerPaymentJournalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchCustomerPaymentJournal', 'companyId', companyId)
            // verify required parameter 'customerPaymentJournalId' is not null or undefined
            assertParamExists('patchCustomerPaymentJournal', 'customerPaymentJournalId', customerPaymentJournalId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchCustomerPaymentJournal', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchCustomerPaymentJournal', 'ifMatch', ifMatch)
            // verify required parameter 'postCustomerPaymentJournalRequest' is not null or undefined
            assertParamExists('patchCustomerPaymentJournal', 'postCustomerPaymentJournalRequest', postCustomerPaymentJournalRequest)
            const localVarPath = `/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"customerPaymentJournal_id"}}`, encodeURIComponent(String(customerPaymentJournalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCustomerPaymentJournalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type customerPaymentJournal in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostCustomerPaymentJournalRequest} postCustomerPaymentJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCustomerPaymentJournal: async (companyId: string, contentType: string, postCustomerPaymentJournalRequest: PostCustomerPaymentJournalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postCustomerPaymentJournal', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postCustomerPaymentJournal', 'contentType', contentType)
            // verify required parameter 'postCustomerPaymentJournalRequest' is not null or undefined
            assertParamExists('postCustomerPaymentJournal', 'postCustomerPaymentJournalRequest', postCustomerPaymentJournalRequest)
            const localVarPath = `/companies({company_id})/customerPaymentJournals`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCustomerPaymentJournalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerPaymentJournalApi - functional programming interface
 * @export
 */
export const CustomerPaymentJournalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerPaymentJournalApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type customerPaymentJournal in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerPaymentJournalId (v1.0) id for customerPaymentJournal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomerPaymentJournal(companyId: string, customerPaymentJournalId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustomerPaymentJournal(companyId, customerPaymentJournalId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerPaymentJournalApi.deleteCustomerPaymentJournal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type customerPaymentJournal for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerPaymentJournalId (v1.0) id for customerPaymentJournal
         * @param {Array<GetCustomerPaymentJournalExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetCustomerPaymentJournalSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerPaymentJournal(companyId: string, customerPaymentJournalId: string, $expand?: Array<GetCustomerPaymentJournalExpandEnum>, $select?: Array<GetCustomerPaymentJournalSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerPaymentJournal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerPaymentJournal(companyId, customerPaymentJournalId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerPaymentJournalApi.getCustomerPaymentJournal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of customerPaymentJournals
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListCustomerPaymentJournalsExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListCustomerPaymentJournalsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCustomerPaymentJournals(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListCustomerPaymentJournalsExpandEnum>, $select?: Array<ListCustomerPaymentJournalsSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCustomerPaymentJournals200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCustomerPaymentJournals(companyId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerPaymentJournalApi.listCustomerPaymentJournals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type customerPaymentJournal in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerPaymentJournalId (v1.0) id for customerPaymentJournal
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostCustomerPaymentJournalRequest} postCustomerPaymentJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCustomerPaymentJournal(companyId: string, customerPaymentJournalId: string, contentType: string, ifMatch: string, postCustomerPaymentJournalRequest: PostCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerPaymentJournal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCustomerPaymentJournal(companyId, customerPaymentJournalId, contentType, ifMatch, postCustomerPaymentJournalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerPaymentJournalApi.patchCustomerPaymentJournal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type customerPaymentJournal in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostCustomerPaymentJournalRequest} postCustomerPaymentJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCustomerPaymentJournal(companyId: string, contentType: string, postCustomerPaymentJournalRequest: PostCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerPaymentJournal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCustomerPaymentJournal(companyId, contentType, postCustomerPaymentJournalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerPaymentJournalApi.postCustomerPaymentJournal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerPaymentJournalApi - factory interface
 * @export
 */
export const CustomerPaymentJournalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerPaymentJournalApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type customerPaymentJournal in Dynamics 365 Business Central
         * @param {CustomerPaymentJournalApiDeleteCustomerPaymentJournalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerPaymentJournal(requestParameters: CustomerPaymentJournalApiDeleteCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCustomerPaymentJournal(requestParameters.companyId, requestParameters.customerPaymentJournalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type customerPaymentJournal for Dynamics 365 Business Central.
         * @param {CustomerPaymentJournalApiGetCustomerPaymentJournalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerPaymentJournal(requestParameters: CustomerPaymentJournalApiGetCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomerPaymentJournal> {
            return localVarFp.getCustomerPaymentJournal(requestParameters.companyId, requestParameters.customerPaymentJournalId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of customerPaymentJournals
         * @param {CustomerPaymentJournalApiListCustomerPaymentJournalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerPaymentJournals(requestParameters: CustomerPaymentJournalApiListCustomerPaymentJournalsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListCustomerPaymentJournals200Response> {
            return localVarFp.listCustomerPaymentJournals(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type customerPaymentJournal in Dynamics 365 Business Central
         * @param {CustomerPaymentJournalApiPatchCustomerPaymentJournalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCustomerPaymentJournal(requestParameters: CustomerPaymentJournalApiPatchCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomerPaymentJournal> {
            return localVarFp.patchCustomerPaymentJournal(requestParameters.companyId, requestParameters.customerPaymentJournalId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postCustomerPaymentJournalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type customerPaymentJournal in Dynamics 365 Business Central
         * @param {CustomerPaymentJournalApiPostCustomerPaymentJournalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCustomerPaymentJournal(requestParameters: CustomerPaymentJournalApiPostCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomerPaymentJournal> {
            return localVarFp.postCustomerPaymentJournal(requestParameters.companyId, requestParameters.contentType, requestParameters.postCustomerPaymentJournalRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteCustomerPaymentJournal operation in CustomerPaymentJournalApi.
 * @export
 * @interface CustomerPaymentJournalApiDeleteCustomerPaymentJournalRequest
 */
export interface CustomerPaymentJournalApiDeleteCustomerPaymentJournalRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerPaymentJournalApiDeleteCustomerPaymentJournal
     */
    readonly companyId: string

    /**
     * (v1.0) id for customerPaymentJournal
     * @type {string}
     * @memberof CustomerPaymentJournalApiDeleteCustomerPaymentJournal
     */
    readonly customerPaymentJournalId: string
}

/**
 * Request parameters for getCustomerPaymentJournal operation in CustomerPaymentJournalApi.
 * @export
 * @interface CustomerPaymentJournalApiGetCustomerPaymentJournalRequest
 */
export interface CustomerPaymentJournalApiGetCustomerPaymentJournalRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerPaymentJournalApiGetCustomerPaymentJournal
     */
    readonly companyId: string

    /**
     * (v1.0) id for customerPaymentJournal
     * @type {string}
     * @memberof CustomerPaymentJournalApiGetCustomerPaymentJournal
     */
    readonly customerPaymentJournalId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'customerPayments' | 'account'>}
     * @memberof CustomerPaymentJournalApiGetCustomerPaymentJournal
     */
    readonly $expand?: Array<GetCustomerPaymentJournalExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'code' | 'displayName' | 'lastModifiedDateTime' | 'balancingAccountId' | 'balancingAccountNumber'>}
     * @memberof CustomerPaymentJournalApiGetCustomerPaymentJournal
     */
    readonly $select?: Array<GetCustomerPaymentJournalSelectEnum>
}

/**
 * Request parameters for listCustomerPaymentJournals operation in CustomerPaymentJournalApi.
 * @export
 * @interface CustomerPaymentJournalApiListCustomerPaymentJournalsRequest
 */
export interface CustomerPaymentJournalApiListCustomerPaymentJournalsRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerPaymentJournalApiListCustomerPaymentJournals
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof CustomerPaymentJournalApiListCustomerPaymentJournals
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof CustomerPaymentJournalApiListCustomerPaymentJournals
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof CustomerPaymentJournalApiListCustomerPaymentJournals
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof CustomerPaymentJournalApiListCustomerPaymentJournals
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'customerPayments' | 'account'>}
     * @memberof CustomerPaymentJournalApiListCustomerPaymentJournals
     */
    readonly $expand?: Array<ListCustomerPaymentJournalsExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'code' | 'displayName' | 'lastModifiedDateTime' | 'balancingAccountId' | 'balancingAccountNumber'>}
     * @memberof CustomerPaymentJournalApiListCustomerPaymentJournals
     */
    readonly $select?: Array<ListCustomerPaymentJournalsSelectEnum>
}

/**
 * Request parameters for patchCustomerPaymentJournal operation in CustomerPaymentJournalApi.
 * @export
 * @interface CustomerPaymentJournalApiPatchCustomerPaymentJournalRequest
 */
export interface CustomerPaymentJournalApiPatchCustomerPaymentJournalRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerPaymentJournalApiPatchCustomerPaymentJournal
     */
    readonly companyId: string

    /**
     * (v1.0) id for customerPaymentJournal
     * @type {string}
     * @memberof CustomerPaymentJournalApiPatchCustomerPaymentJournal
     */
    readonly customerPaymentJournalId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof CustomerPaymentJournalApiPatchCustomerPaymentJournal
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof CustomerPaymentJournalApiPatchCustomerPaymentJournal
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostCustomerPaymentJournalRequest}
     * @memberof CustomerPaymentJournalApiPatchCustomerPaymentJournal
     */
    readonly postCustomerPaymentJournalRequest: PostCustomerPaymentJournalRequest
}

/**
 * Request parameters for postCustomerPaymentJournal operation in CustomerPaymentJournalApi.
 * @export
 * @interface CustomerPaymentJournalApiPostCustomerPaymentJournalRequest
 */
export interface CustomerPaymentJournalApiPostCustomerPaymentJournalRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerPaymentJournalApiPostCustomerPaymentJournal
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof CustomerPaymentJournalApiPostCustomerPaymentJournal
     */
    readonly contentType: string

    /**
     * 
     * @type {PostCustomerPaymentJournalRequest}
     * @memberof CustomerPaymentJournalApiPostCustomerPaymentJournal
     */
    readonly postCustomerPaymentJournalRequest: PostCustomerPaymentJournalRequest
}

/**
 * CustomerPaymentJournalApi - object-oriented interface
 * @export
 * @class CustomerPaymentJournalApi
 * @extends {BaseAPI}
 */
export class CustomerPaymentJournalApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type customerPaymentJournal in Dynamics 365 Business Central
     * @param {CustomerPaymentJournalApiDeleteCustomerPaymentJournalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerPaymentJournalApi
     */
    public deleteCustomerPaymentJournal(requestParameters: CustomerPaymentJournalApiDeleteCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig) {
        return CustomerPaymentJournalApiFp(this.configuration).deleteCustomerPaymentJournal(requestParameters.companyId, requestParameters.customerPaymentJournalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type customerPaymentJournal for Dynamics 365 Business Central.
     * @param {CustomerPaymentJournalApiGetCustomerPaymentJournalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerPaymentJournalApi
     */
    public getCustomerPaymentJournal(requestParameters: CustomerPaymentJournalApiGetCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig) {
        return CustomerPaymentJournalApiFp(this.configuration).getCustomerPaymentJournal(requestParameters.companyId, requestParameters.customerPaymentJournalId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of customerPaymentJournals
     * @param {CustomerPaymentJournalApiListCustomerPaymentJournalsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerPaymentJournalApi
     */
    public listCustomerPaymentJournals(requestParameters: CustomerPaymentJournalApiListCustomerPaymentJournalsRequest, options?: RawAxiosRequestConfig) {
        return CustomerPaymentJournalApiFp(this.configuration).listCustomerPaymentJournals(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type customerPaymentJournal in Dynamics 365 Business Central
     * @param {CustomerPaymentJournalApiPatchCustomerPaymentJournalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerPaymentJournalApi
     */
    public patchCustomerPaymentJournal(requestParameters: CustomerPaymentJournalApiPatchCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig) {
        return CustomerPaymentJournalApiFp(this.configuration).patchCustomerPaymentJournal(requestParameters.companyId, requestParameters.customerPaymentJournalId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postCustomerPaymentJournalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type customerPaymentJournal in Dynamics 365 Business Central
     * @param {CustomerPaymentJournalApiPostCustomerPaymentJournalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerPaymentJournalApi
     */
    public postCustomerPaymentJournal(requestParameters: CustomerPaymentJournalApiPostCustomerPaymentJournalRequest, options?: RawAxiosRequestConfig) {
        return CustomerPaymentJournalApiFp(this.configuration).postCustomerPaymentJournal(requestParameters.companyId, requestParameters.contentType, requestParameters.postCustomerPaymentJournalRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetCustomerPaymentJournalExpandEnum = {
    CustomerPayments: 'customerPayments',
    Account: 'account'
} as const;
export type GetCustomerPaymentJournalExpandEnum = typeof GetCustomerPaymentJournalExpandEnum[keyof typeof GetCustomerPaymentJournalExpandEnum];
/**
 * @export
 */
export const GetCustomerPaymentJournalSelectEnum = {
    Id: 'id',
    Code: 'code',
    DisplayName: 'displayName',
    LastModifiedDateTime: 'lastModifiedDateTime',
    BalancingAccountId: 'balancingAccountId',
    BalancingAccountNumber: 'balancingAccountNumber'
} as const;
export type GetCustomerPaymentJournalSelectEnum = typeof GetCustomerPaymentJournalSelectEnum[keyof typeof GetCustomerPaymentJournalSelectEnum];
/**
 * @export
 */
export const ListCustomerPaymentJournalsExpandEnum = {
    CustomerPayments: 'customerPayments',
    Account: 'account'
} as const;
export type ListCustomerPaymentJournalsExpandEnum = typeof ListCustomerPaymentJournalsExpandEnum[keyof typeof ListCustomerPaymentJournalsExpandEnum];
/**
 * @export
 */
export const ListCustomerPaymentJournalsSelectEnum = {
    Id: 'id',
    Code: 'code',
    DisplayName: 'displayName',
    LastModifiedDateTime: 'lastModifiedDateTime',
    BalancingAccountId: 'balancingAccountId',
    BalancingAccountNumber: 'balancingAccountNumber'
} as const;
export type ListCustomerPaymentJournalsSelectEnum = typeof ListCustomerPaymentJournalsSelectEnum[keyof typeof ListCustomerPaymentJournalsSelectEnum];
