/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CustomerFinancialDetail } from '../model';
// @ts-ignore
import type { ListCustomerFinancialDetailsForCustomer200Response } from '../model';
/**
 * CustomerFinancialDetailApi - axios parameter creator
 * @export
 */
export const CustomerFinancialDetailApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type customerFinancialDetail for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerFinancialDetailId (v1.0) id for customerFinancialDetail
         * @param {Array<GetCustomerFinancialDetailSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerFinancialDetail: async (companyId: string, customerFinancialDetailId: string, $select?: Array<GetCustomerFinancialDetailSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCustomerFinancialDetail', 'companyId', companyId)
            // verify required parameter 'customerFinancialDetailId' is not null or undefined
            assertParamExists('getCustomerFinancialDetail', 'customerFinancialDetailId', customerFinancialDetailId)
            const localVarPath = `/companies({company_id})/customerFinancialDetails({customerFinancialDetail_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"customerFinancialDetail_id"}}`, encodeURIComponent(String(customerFinancialDetailId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type customerFinancialDetail for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerId (v1.0) id for customer
         * @param {string} customerFinancialDetailId (v1.0) id for customerFinancialDetail
         * @param {Array<GetCustomerFinancialDetailForCustomerSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerFinancialDetailForCustomer: async (companyId: string, customerId: string, customerFinancialDetailId: string, $select?: Array<GetCustomerFinancialDetailForCustomerSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCustomerFinancialDetailForCustomer', 'companyId', companyId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getCustomerFinancialDetailForCustomer', 'customerId', customerId)
            // verify required parameter 'customerFinancialDetailId' is not null or undefined
            assertParamExists('getCustomerFinancialDetailForCustomer', 'customerFinancialDetailId', customerFinancialDetailId)
            const localVarPath = `/companies({company_id})/customers({customer_id})/customerFinancialDetails({customerFinancialDetail_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"customerFinancialDetail_id"}}`, encodeURIComponent(String(customerFinancialDetailId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of customerFinancialDetails
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListCustomerFinancialDetailsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerFinancialDetails: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListCustomerFinancialDetailsSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listCustomerFinancialDetails', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/customerFinancialDetails`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of customerFinancialDetails
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerId (v1.0) id for customer
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListCustomerFinancialDetailsForCustomerSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerFinancialDetailsForCustomer: async (companyId: string, customerId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListCustomerFinancialDetailsForCustomerSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listCustomerFinancialDetailsForCustomer', 'companyId', companyId)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('listCustomerFinancialDetailsForCustomer', 'customerId', customerId)
            const localVarPath = `/companies({company_id})/customers({customer_id})/customerFinancialDetails`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerFinancialDetailApi - functional programming interface
 * @export
 */
export const CustomerFinancialDetailApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerFinancialDetailApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type customerFinancialDetail for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerFinancialDetailId (v1.0) id for customerFinancialDetail
         * @param {Array<GetCustomerFinancialDetailSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerFinancialDetail(companyId: string, customerFinancialDetailId: string, $select?: Array<GetCustomerFinancialDetailSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerFinancialDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerFinancialDetail(companyId, customerFinancialDetailId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerFinancialDetailApi.getCustomerFinancialDetail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type customerFinancialDetail for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerId (v1.0) id for customer
         * @param {string} customerFinancialDetailId (v1.0) id for customerFinancialDetail
         * @param {Array<GetCustomerFinancialDetailForCustomerSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerFinancialDetailForCustomer(companyId: string, customerId: string, customerFinancialDetailId: string, $select?: Array<GetCustomerFinancialDetailForCustomerSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerFinancialDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerFinancialDetailForCustomer(companyId, customerId, customerFinancialDetailId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerFinancialDetailApi.getCustomerFinancialDetailForCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of customerFinancialDetails
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListCustomerFinancialDetailsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCustomerFinancialDetails(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListCustomerFinancialDetailsSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCustomerFinancialDetailsForCustomer200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCustomerFinancialDetails(companyId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerFinancialDetailApi.listCustomerFinancialDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of customerFinancialDetails
         * @param {string} companyId (v1.0) id for company
         * @param {string} customerId (v1.0) id for customer
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListCustomerFinancialDetailsForCustomerSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCustomerFinancialDetailsForCustomer(companyId: string, customerId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListCustomerFinancialDetailsForCustomerSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCustomerFinancialDetailsForCustomer200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCustomerFinancialDetailsForCustomer(companyId, customerId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerFinancialDetailApi.listCustomerFinancialDetailsForCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerFinancialDetailApi - factory interface
 * @export
 */
export const CustomerFinancialDetailApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerFinancialDetailApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type customerFinancialDetail for Dynamics 365 Business Central.
         * @param {CustomerFinancialDetailApiGetCustomerFinancialDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerFinancialDetail(requestParameters: CustomerFinancialDetailApiGetCustomerFinancialDetailRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomerFinancialDetail> {
            return localVarFp.getCustomerFinancialDetail(requestParameters.companyId, requestParameters.customerFinancialDetailId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type customerFinancialDetail for Dynamics 365 Business Central.
         * @param {CustomerFinancialDetailApiGetCustomerFinancialDetailForCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerFinancialDetailForCustomer(requestParameters: CustomerFinancialDetailApiGetCustomerFinancialDetailForCustomerRequest, options?: RawAxiosRequestConfig): AxiosPromise<CustomerFinancialDetail> {
            return localVarFp.getCustomerFinancialDetailForCustomer(requestParameters.companyId, requestParameters.customerId, requestParameters.customerFinancialDetailId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of customerFinancialDetails
         * @param {CustomerFinancialDetailApiListCustomerFinancialDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerFinancialDetails(requestParameters: CustomerFinancialDetailApiListCustomerFinancialDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListCustomerFinancialDetailsForCustomer200Response> {
            return localVarFp.listCustomerFinancialDetails(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of customerFinancialDetails
         * @param {CustomerFinancialDetailApiListCustomerFinancialDetailsForCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerFinancialDetailsForCustomer(requestParameters: CustomerFinancialDetailApiListCustomerFinancialDetailsForCustomerRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListCustomerFinancialDetailsForCustomer200Response> {
            return localVarFp.listCustomerFinancialDetailsForCustomer(requestParameters.companyId, requestParameters.customerId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCustomerFinancialDetail operation in CustomerFinancialDetailApi.
 * @export
 * @interface CustomerFinancialDetailApiGetCustomerFinancialDetailRequest
 */
export interface CustomerFinancialDetailApiGetCustomerFinancialDetailRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerFinancialDetailApiGetCustomerFinancialDetail
     */
    readonly companyId: string

    /**
     * (v1.0) id for customerFinancialDetail
     * @type {string}
     * @memberof CustomerFinancialDetailApiGetCustomerFinancialDetail
     */
    readonly customerFinancialDetailId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'balance' | 'totalSalesExcludingTax' | 'overdueAmount'>}
     * @memberof CustomerFinancialDetailApiGetCustomerFinancialDetail
     */
    readonly $select?: Array<GetCustomerFinancialDetailSelectEnum>
}

/**
 * Request parameters for getCustomerFinancialDetailForCustomer operation in CustomerFinancialDetailApi.
 * @export
 * @interface CustomerFinancialDetailApiGetCustomerFinancialDetailForCustomerRequest
 */
export interface CustomerFinancialDetailApiGetCustomerFinancialDetailForCustomerRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerFinancialDetailApiGetCustomerFinancialDetailForCustomer
     */
    readonly companyId: string

    /**
     * (v1.0) id for customer
     * @type {string}
     * @memberof CustomerFinancialDetailApiGetCustomerFinancialDetailForCustomer
     */
    readonly customerId: string

    /**
     * (v1.0) id for customerFinancialDetail
     * @type {string}
     * @memberof CustomerFinancialDetailApiGetCustomerFinancialDetailForCustomer
     */
    readonly customerFinancialDetailId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'balance' | 'totalSalesExcludingTax' | 'overdueAmount'>}
     * @memberof CustomerFinancialDetailApiGetCustomerFinancialDetailForCustomer
     */
    readonly $select?: Array<GetCustomerFinancialDetailForCustomerSelectEnum>
}

/**
 * Request parameters for listCustomerFinancialDetails operation in CustomerFinancialDetailApi.
 * @export
 * @interface CustomerFinancialDetailApiListCustomerFinancialDetailsRequest
 */
export interface CustomerFinancialDetailApiListCustomerFinancialDetailsRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerFinancialDetailApiListCustomerFinancialDetails
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof CustomerFinancialDetailApiListCustomerFinancialDetails
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof CustomerFinancialDetailApiListCustomerFinancialDetails
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof CustomerFinancialDetailApiListCustomerFinancialDetails
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof CustomerFinancialDetailApiListCustomerFinancialDetails
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'balance' | 'totalSalesExcludingTax' | 'overdueAmount'>}
     * @memberof CustomerFinancialDetailApiListCustomerFinancialDetails
     */
    readonly $select?: Array<ListCustomerFinancialDetailsSelectEnum>
}

/**
 * Request parameters for listCustomerFinancialDetailsForCustomer operation in CustomerFinancialDetailApi.
 * @export
 * @interface CustomerFinancialDetailApiListCustomerFinancialDetailsForCustomerRequest
 */
export interface CustomerFinancialDetailApiListCustomerFinancialDetailsForCustomerRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof CustomerFinancialDetailApiListCustomerFinancialDetailsForCustomer
     */
    readonly companyId: string

    /**
     * (v1.0) id for customer
     * @type {string}
     * @memberof CustomerFinancialDetailApiListCustomerFinancialDetailsForCustomer
     */
    readonly customerId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof CustomerFinancialDetailApiListCustomerFinancialDetailsForCustomer
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof CustomerFinancialDetailApiListCustomerFinancialDetailsForCustomer
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof CustomerFinancialDetailApiListCustomerFinancialDetailsForCustomer
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof CustomerFinancialDetailApiListCustomerFinancialDetailsForCustomer
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'balance' | 'totalSalesExcludingTax' | 'overdueAmount'>}
     * @memberof CustomerFinancialDetailApiListCustomerFinancialDetailsForCustomer
     */
    readonly $select?: Array<ListCustomerFinancialDetailsForCustomerSelectEnum>
}

/**
 * CustomerFinancialDetailApi - object-oriented interface
 * @export
 * @class CustomerFinancialDetailApi
 * @extends {BaseAPI}
 */
export class CustomerFinancialDetailApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type customerFinancialDetail for Dynamics 365 Business Central.
     * @param {CustomerFinancialDetailApiGetCustomerFinancialDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerFinancialDetailApi
     */
    public getCustomerFinancialDetail(requestParameters: CustomerFinancialDetailApiGetCustomerFinancialDetailRequest, options?: RawAxiosRequestConfig) {
        return CustomerFinancialDetailApiFp(this.configuration).getCustomerFinancialDetail(requestParameters.companyId, requestParameters.customerFinancialDetailId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type customerFinancialDetail for Dynamics 365 Business Central.
     * @param {CustomerFinancialDetailApiGetCustomerFinancialDetailForCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerFinancialDetailApi
     */
    public getCustomerFinancialDetailForCustomer(requestParameters: CustomerFinancialDetailApiGetCustomerFinancialDetailForCustomerRequest, options?: RawAxiosRequestConfig) {
        return CustomerFinancialDetailApiFp(this.configuration).getCustomerFinancialDetailForCustomer(requestParameters.companyId, requestParameters.customerId, requestParameters.customerFinancialDetailId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of customerFinancialDetails
     * @param {CustomerFinancialDetailApiListCustomerFinancialDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerFinancialDetailApi
     */
    public listCustomerFinancialDetails(requestParameters: CustomerFinancialDetailApiListCustomerFinancialDetailsRequest, options?: RawAxiosRequestConfig) {
        return CustomerFinancialDetailApiFp(this.configuration).listCustomerFinancialDetails(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of customerFinancialDetails
     * @param {CustomerFinancialDetailApiListCustomerFinancialDetailsForCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerFinancialDetailApi
     */
    public listCustomerFinancialDetailsForCustomer(requestParameters: CustomerFinancialDetailApiListCustomerFinancialDetailsForCustomerRequest, options?: RawAxiosRequestConfig) {
        return CustomerFinancialDetailApiFp(this.configuration).listCustomerFinancialDetailsForCustomer(requestParameters.companyId, requestParameters.customerId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetCustomerFinancialDetailSelectEnum = {
    Id: 'id',
    Number: 'number',
    Balance: 'balance',
    TotalSalesExcludingTax: 'totalSalesExcludingTax',
    OverdueAmount: 'overdueAmount'
} as const;
export type GetCustomerFinancialDetailSelectEnum = typeof GetCustomerFinancialDetailSelectEnum[keyof typeof GetCustomerFinancialDetailSelectEnum];
/**
 * @export
 */
export const GetCustomerFinancialDetailForCustomerSelectEnum = {
    Id: 'id',
    Number: 'number',
    Balance: 'balance',
    TotalSalesExcludingTax: 'totalSalesExcludingTax',
    OverdueAmount: 'overdueAmount'
} as const;
export type GetCustomerFinancialDetailForCustomerSelectEnum = typeof GetCustomerFinancialDetailForCustomerSelectEnum[keyof typeof GetCustomerFinancialDetailForCustomerSelectEnum];
/**
 * @export
 */
export const ListCustomerFinancialDetailsSelectEnum = {
    Id: 'id',
    Number: 'number',
    Balance: 'balance',
    TotalSalesExcludingTax: 'totalSalesExcludingTax',
    OverdueAmount: 'overdueAmount'
} as const;
export type ListCustomerFinancialDetailsSelectEnum = typeof ListCustomerFinancialDetailsSelectEnum[keyof typeof ListCustomerFinancialDetailsSelectEnum];
/**
 * @export
 */
export const ListCustomerFinancialDetailsForCustomerSelectEnum = {
    Id: 'id',
    Number: 'number',
    Balance: 'balance',
    TotalSalesExcludingTax: 'totalSalesExcludingTax',
    OverdueAmount: 'overdueAmount'
} as const;
export type ListCustomerFinancialDetailsForCustomerSelectEnum = typeof ListCustomerFinancialDetailsForCustomerSelectEnum[keyof typeof ListCustomerFinancialDetailsForCustomerSelectEnum];
