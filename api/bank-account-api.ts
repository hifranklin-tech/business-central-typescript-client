/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BankAccount } from '../model';
// @ts-ignore
import type { ListBankAccounts200Response } from '../model';
// @ts-ignore
import type { PostBankAccountRequest } from '../model';
/**
 * BankAccountApi - axios parameter creator
 * @export
 */
export const BankAccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type bankAccount in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} bankAccountId (v1.0) id for bankAccount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBankAccount: async (companyId: string, bankAccountId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteBankAccount', 'companyId', companyId)
            // verify required parameter 'bankAccountId' is not null or undefined
            assertParamExists('deleteBankAccount', 'bankAccountId', bankAccountId)
            const localVarPath = `/companies({company_id})/bankAccounts({bankAccount_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"bankAccount_id"}}`, encodeURIComponent(String(bankAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type bankAccount for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} bankAccountId (v1.0) id for bankAccount
         * @param {Array<GetBankAccountSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankAccount: async (companyId: string, bankAccountId: string, $select?: Array<GetBankAccountSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getBankAccount', 'companyId', companyId)
            // verify required parameter 'bankAccountId' is not null or undefined
            assertParamExists('getBankAccount', 'bankAccountId', bankAccountId)
            const localVarPath = `/companies({company_id})/bankAccounts({bankAccount_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"bankAccount_id"}}`, encodeURIComponent(String(bankAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of bankAccounts
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListBankAccountsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBankAccounts: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListBankAccountsSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listBankAccounts', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/bankAccounts`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type bankAccount in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} bankAccountId (v1.0) id for bankAccount
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostBankAccountRequest} postBankAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBankAccount: async (companyId: string, bankAccountId: string, contentType: string, ifMatch: string, postBankAccountRequest: PostBankAccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchBankAccount', 'companyId', companyId)
            // verify required parameter 'bankAccountId' is not null or undefined
            assertParamExists('patchBankAccount', 'bankAccountId', bankAccountId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchBankAccount', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchBankAccount', 'ifMatch', ifMatch)
            // verify required parameter 'postBankAccountRequest' is not null or undefined
            assertParamExists('patchBankAccount', 'postBankAccountRequest', postBankAccountRequest)
            const localVarPath = `/companies({company_id})/bankAccounts({bankAccount_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"bankAccount_id"}}`, encodeURIComponent(String(bankAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postBankAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type bankAccount in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostBankAccountRequest} postBankAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBankAccount: async (companyId: string, contentType: string, postBankAccountRequest: PostBankAccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postBankAccount', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postBankAccount', 'contentType', contentType)
            // verify required parameter 'postBankAccountRequest' is not null or undefined
            assertParamExists('postBankAccount', 'postBankAccountRequest', postBankAccountRequest)
            const localVarPath = `/companies({company_id})/bankAccounts`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postBankAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BankAccountApi - functional programming interface
 * @export
 */
export const BankAccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BankAccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type bankAccount in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} bankAccountId (v1.0) id for bankAccount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBankAccount(companyId: string, bankAccountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBankAccount(companyId, bankAccountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BankAccountApi.deleteBankAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type bankAccount for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} bankAccountId (v1.0) id for bankAccount
         * @param {Array<GetBankAccountSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBankAccount(companyId: string, bankAccountId: string, $select?: Array<GetBankAccountSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBankAccount(companyId, bankAccountId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BankAccountApi.getBankAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of bankAccounts
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListBankAccountsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBankAccounts(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListBankAccountsSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBankAccounts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBankAccounts(companyId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BankAccountApi.listBankAccounts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type bankAccount in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} bankAccountId (v1.0) id for bankAccount
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostBankAccountRequest} postBankAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBankAccount(companyId: string, bankAccountId: string, contentType: string, ifMatch: string, postBankAccountRequest: PostBankAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBankAccount(companyId, bankAccountId, contentType, ifMatch, postBankAccountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BankAccountApi.patchBankAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type bankAccount in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostBankAccountRequest} postBankAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBankAccount(companyId: string, contentType: string, postBankAccountRequest: PostBankAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBankAccount(companyId, contentType, postBankAccountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BankAccountApi.postBankAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BankAccountApi - factory interface
 * @export
 */
export const BankAccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BankAccountApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type bankAccount in Dynamics 365 Business Central
         * @param {BankAccountApiDeleteBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBankAccount(requestParameters: BankAccountApiDeleteBankAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteBankAccount(requestParameters.companyId, requestParameters.bankAccountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type bankAccount for Dynamics 365 Business Central.
         * @param {BankAccountApiGetBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankAccount(requestParameters: BankAccountApiGetBankAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<BankAccount> {
            return localVarFp.getBankAccount(requestParameters.companyId, requestParameters.bankAccountId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of bankAccounts
         * @param {BankAccountApiListBankAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBankAccounts(requestParameters: BankAccountApiListBankAccountsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListBankAccounts200Response> {
            return localVarFp.listBankAccounts(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type bankAccount in Dynamics 365 Business Central
         * @param {BankAccountApiPatchBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBankAccount(requestParameters: BankAccountApiPatchBankAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<BankAccount> {
            return localVarFp.patchBankAccount(requestParameters.companyId, requestParameters.bankAccountId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postBankAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type bankAccount in Dynamics 365 Business Central
         * @param {BankAccountApiPostBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBankAccount(requestParameters: BankAccountApiPostBankAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<BankAccount> {
            return localVarFp.postBankAccount(requestParameters.companyId, requestParameters.contentType, requestParameters.postBankAccountRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteBankAccount operation in BankAccountApi.
 * @export
 * @interface BankAccountApiDeleteBankAccountRequest
 */
export interface BankAccountApiDeleteBankAccountRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof BankAccountApiDeleteBankAccount
     */
    readonly companyId: string

    /**
     * (v1.0) id for bankAccount
     * @type {string}
     * @memberof BankAccountApiDeleteBankAccount
     */
    readonly bankAccountId: string
}

/**
 * Request parameters for getBankAccount operation in BankAccountApi.
 * @export
 * @interface BankAccountApiGetBankAccountRequest
 */
export interface BankAccountApiGetBankAccountRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof BankAccountApiGetBankAccount
     */
    readonly companyId: string

    /**
     * (v1.0) id for bankAccount
     * @type {string}
     * @memberof BankAccountApiGetBankAccount
     */
    readonly bankAccountId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'displayName'>}
     * @memberof BankAccountApiGetBankAccount
     */
    readonly $select?: Array<GetBankAccountSelectEnum>
}

/**
 * Request parameters for listBankAccounts operation in BankAccountApi.
 * @export
 * @interface BankAccountApiListBankAccountsRequest
 */
export interface BankAccountApiListBankAccountsRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof BankAccountApiListBankAccounts
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof BankAccountApiListBankAccounts
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof BankAccountApiListBankAccounts
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof BankAccountApiListBankAccounts
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof BankAccountApiListBankAccounts
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'displayName'>}
     * @memberof BankAccountApiListBankAccounts
     */
    readonly $select?: Array<ListBankAccountsSelectEnum>
}

/**
 * Request parameters for patchBankAccount operation in BankAccountApi.
 * @export
 * @interface BankAccountApiPatchBankAccountRequest
 */
export interface BankAccountApiPatchBankAccountRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof BankAccountApiPatchBankAccount
     */
    readonly companyId: string

    /**
     * (v1.0) id for bankAccount
     * @type {string}
     * @memberof BankAccountApiPatchBankAccount
     */
    readonly bankAccountId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof BankAccountApiPatchBankAccount
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof BankAccountApiPatchBankAccount
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostBankAccountRequest}
     * @memberof BankAccountApiPatchBankAccount
     */
    readonly postBankAccountRequest: PostBankAccountRequest
}

/**
 * Request parameters for postBankAccount operation in BankAccountApi.
 * @export
 * @interface BankAccountApiPostBankAccountRequest
 */
export interface BankAccountApiPostBankAccountRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof BankAccountApiPostBankAccount
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof BankAccountApiPostBankAccount
     */
    readonly contentType: string

    /**
     * 
     * @type {PostBankAccountRequest}
     * @memberof BankAccountApiPostBankAccount
     */
    readonly postBankAccountRequest: PostBankAccountRequest
}

/**
 * BankAccountApi - object-oriented interface
 * @export
 * @class BankAccountApi
 * @extends {BaseAPI}
 */
export class BankAccountApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type bankAccount in Dynamics 365 Business Central
     * @param {BankAccountApiDeleteBankAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountApi
     */
    public deleteBankAccount(requestParameters: BankAccountApiDeleteBankAccountRequest, options?: RawAxiosRequestConfig) {
        return BankAccountApiFp(this.configuration).deleteBankAccount(requestParameters.companyId, requestParameters.bankAccountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type bankAccount for Dynamics 365 Business Central.
     * @param {BankAccountApiGetBankAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountApi
     */
    public getBankAccount(requestParameters: BankAccountApiGetBankAccountRequest, options?: RawAxiosRequestConfig) {
        return BankAccountApiFp(this.configuration).getBankAccount(requestParameters.companyId, requestParameters.bankAccountId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of bankAccounts
     * @param {BankAccountApiListBankAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountApi
     */
    public listBankAccounts(requestParameters: BankAccountApiListBankAccountsRequest, options?: RawAxiosRequestConfig) {
        return BankAccountApiFp(this.configuration).listBankAccounts(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type bankAccount in Dynamics 365 Business Central
     * @param {BankAccountApiPatchBankAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountApi
     */
    public patchBankAccount(requestParameters: BankAccountApiPatchBankAccountRequest, options?: RawAxiosRequestConfig) {
        return BankAccountApiFp(this.configuration).patchBankAccount(requestParameters.companyId, requestParameters.bankAccountId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postBankAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type bankAccount in Dynamics 365 Business Central
     * @param {BankAccountApiPostBankAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountApi
     */
    public postBankAccount(requestParameters: BankAccountApiPostBankAccountRequest, options?: RawAxiosRequestConfig) {
        return BankAccountApiFp(this.configuration).postBankAccount(requestParameters.companyId, requestParameters.contentType, requestParameters.postBankAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetBankAccountSelectEnum = {
    Id: 'id',
    Number: 'number',
    DisplayName: 'displayName'
} as const;
export type GetBankAccountSelectEnum = typeof GetBankAccountSelectEnum[keyof typeof GetBankAccountSelectEnum];
/**
 * @export
 */
export const ListBankAccountsSelectEnum = {
    Id: 'id',
    Number: 'number',
    DisplayName: 'displayName'
} as const;
export type ListBankAccountsSelectEnum = typeof ListBankAccountsSelectEnum[keyof typeof ListBankAccountsSelectEnum];
