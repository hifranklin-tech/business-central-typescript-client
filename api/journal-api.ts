/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Journal } from '../model';
// @ts-ignore
import type { ListJournals200Response } from '../model';
// @ts-ignore
import type { PostJournalRequest } from '../model';
/**
 * JournalApi - axios parameter creator
 * @export
 */
export const JournalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type journal in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJournal: async (companyId: string, journalId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteJournal', 'companyId', companyId)
            // verify required parameter 'journalId' is not null or undefined
            assertParamExists('deleteJournal', 'journalId', journalId)
            const localVarPath = `/companies({company_id})/journals({journal_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"journal_id"}}`, encodeURIComponent(String(journalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type journal for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {Array<GetJournalExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetJournalSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJournal: async (companyId: string, journalId: string, $expand?: Array<GetJournalExpandEnum>, $select?: Array<GetJournalSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getJournal', 'companyId', companyId)
            // verify required parameter 'journalId' is not null or undefined
            assertParamExists('getJournal', 'journalId', journalId)
            const localVarPath = `/companies({company_id})/journals({journal_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"journal_id"}}`, encodeURIComponent(String(journalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of journals
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListJournalsExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListJournalsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJournals: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListJournalsExpandEnum>, $select?: Array<ListJournalsSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listJournals', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/journals`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type journal in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostJournalRequest} postJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchJournal: async (companyId: string, journalId: string, contentType: string, ifMatch: string, postJournalRequest: PostJournalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchJournal', 'companyId', companyId)
            // verify required parameter 'journalId' is not null or undefined
            assertParamExists('patchJournal', 'journalId', journalId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchJournal', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchJournal', 'ifMatch', ifMatch)
            // verify required parameter 'postJournalRequest' is not null or undefined
            assertParamExists('patchJournal', 'postJournalRequest', postJournalRequest)
            const localVarPath = `/companies({company_id})/journals({journal_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"journal_id"}}`, encodeURIComponent(String(journalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postJournalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Performs the post action for journals entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postActionJournals: async (companyId: string, journalId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postActionJournals', 'companyId', companyId)
            // verify required parameter 'journalId' is not null or undefined
            assertParamExists('postActionJournals', 'journalId', journalId)
            const localVarPath = `/companies({company_id})/journals({journal_id})/Microsoft.NAV.post`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"journal_id"}}`, encodeURIComponent(String(journalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type journal in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostJournalRequest} postJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postJournal: async (companyId: string, contentType: string, postJournalRequest: PostJournalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postJournal', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postJournal', 'contentType', contentType)
            // verify required parameter 'postJournalRequest' is not null or undefined
            assertParamExists('postJournal', 'postJournalRequest', postJournalRequest)
            const localVarPath = `/companies({company_id})/journals`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postJournalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JournalApi - functional programming interface
 * @export
 */
export const JournalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JournalApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type journal in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteJournal(companyId: string, journalId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteJournal(companyId, journalId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JournalApi.deleteJournal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type journal for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {Array<GetJournalExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetJournalSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJournal(companyId: string, journalId: string, $expand?: Array<GetJournalExpandEnum>, $select?: Array<GetJournalSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Journal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJournal(companyId, journalId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JournalApi.getJournal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of journals
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListJournalsExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListJournalsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listJournals(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListJournalsExpandEnum>, $select?: Array<ListJournalsSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListJournals200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listJournals(companyId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JournalApi.listJournals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type journal in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostJournalRequest} postJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchJournal(companyId: string, journalId: string, contentType: string, ifMatch: string, postJournalRequest: PostJournalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Journal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchJournal(companyId, journalId, contentType, ifMatch, postJournalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JournalApi.patchJournal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Performs the post action for journals entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postActionJournals(companyId: string, journalId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postActionJournals(companyId, journalId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JournalApi.postActionJournals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type journal in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostJournalRequest} postJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postJournal(companyId: string, contentType: string, postJournalRequest: PostJournalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Journal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postJournal(companyId, contentType, postJournalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JournalApi.postJournal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * JournalApi - factory interface
 * @export
 */
export const JournalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JournalApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type journal in Dynamics 365 Business Central
         * @param {JournalApiDeleteJournalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJournal(requestParameters: JournalApiDeleteJournalRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteJournal(requestParameters.companyId, requestParameters.journalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type journal for Dynamics 365 Business Central.
         * @param {JournalApiGetJournalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJournal(requestParameters: JournalApiGetJournalRequest, options?: RawAxiosRequestConfig): AxiosPromise<Journal> {
            return localVarFp.getJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of journals
         * @param {JournalApiListJournalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJournals(requestParameters: JournalApiListJournalsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListJournals200Response> {
            return localVarFp.listJournals(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type journal in Dynamics 365 Business Central
         * @param {JournalApiPatchJournalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchJournal(requestParameters: JournalApiPatchJournalRequest, options?: RawAxiosRequestConfig): AxiosPromise<Journal> {
            return localVarFp.patchJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postJournalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Performs the post action for journals entity
         * @param {JournalApiPostActionJournalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postActionJournals(requestParameters: JournalApiPostActionJournalsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postActionJournals(requestParameters.companyId, requestParameters.journalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type journal in Dynamics 365 Business Central
         * @param {JournalApiPostJournalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postJournal(requestParameters: JournalApiPostJournalRequest, options?: RawAxiosRequestConfig): AxiosPromise<Journal> {
            return localVarFp.postJournal(requestParameters.companyId, requestParameters.contentType, requestParameters.postJournalRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteJournal operation in JournalApi.
 * @export
 * @interface JournalApiDeleteJournalRequest
 */
export interface JournalApiDeleteJournalRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof JournalApiDeleteJournal
     */
    readonly companyId: string

    /**
     * (v1.0) id for journal
     * @type {string}
     * @memberof JournalApiDeleteJournal
     */
    readonly journalId: string
}

/**
 * Request parameters for getJournal operation in JournalApi.
 * @export
 * @interface JournalApiGetJournalRequest
 */
export interface JournalApiGetJournalRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof JournalApiGetJournal
     */
    readonly companyId: string

    /**
     * (v1.0) id for journal
     * @type {string}
     * @memberof JournalApiGetJournal
     */
    readonly journalId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'journalLines' | 'account'>}
     * @memberof JournalApiGetJournal
     */
    readonly $expand?: Array<GetJournalExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'code' | 'displayName' | 'lastModifiedDateTime' | 'balancingAccountId' | 'balancingAccountNumber'>}
     * @memberof JournalApiGetJournal
     */
    readonly $select?: Array<GetJournalSelectEnum>
}

/**
 * Request parameters for listJournals operation in JournalApi.
 * @export
 * @interface JournalApiListJournalsRequest
 */
export interface JournalApiListJournalsRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof JournalApiListJournals
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof JournalApiListJournals
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof JournalApiListJournals
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof JournalApiListJournals
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof JournalApiListJournals
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'journalLines' | 'account'>}
     * @memberof JournalApiListJournals
     */
    readonly $expand?: Array<ListJournalsExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'code' | 'displayName' | 'lastModifiedDateTime' | 'balancingAccountId' | 'balancingAccountNumber'>}
     * @memberof JournalApiListJournals
     */
    readonly $select?: Array<ListJournalsSelectEnum>
}

/**
 * Request parameters for patchJournal operation in JournalApi.
 * @export
 * @interface JournalApiPatchJournalRequest
 */
export interface JournalApiPatchJournalRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof JournalApiPatchJournal
     */
    readonly companyId: string

    /**
     * (v1.0) id for journal
     * @type {string}
     * @memberof JournalApiPatchJournal
     */
    readonly journalId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof JournalApiPatchJournal
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof JournalApiPatchJournal
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostJournalRequest}
     * @memberof JournalApiPatchJournal
     */
    readonly postJournalRequest: PostJournalRequest
}

/**
 * Request parameters for postActionJournals operation in JournalApi.
 * @export
 * @interface JournalApiPostActionJournalsRequest
 */
export interface JournalApiPostActionJournalsRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof JournalApiPostActionJournals
     */
    readonly companyId: string

    /**
     * (v1.0) id for journal
     * @type {string}
     * @memberof JournalApiPostActionJournals
     */
    readonly journalId: string
}

/**
 * Request parameters for postJournal operation in JournalApi.
 * @export
 * @interface JournalApiPostJournalRequest
 */
export interface JournalApiPostJournalRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof JournalApiPostJournal
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof JournalApiPostJournal
     */
    readonly contentType: string

    /**
     * 
     * @type {PostJournalRequest}
     * @memberof JournalApiPostJournal
     */
    readonly postJournalRequest: PostJournalRequest
}

/**
 * JournalApi - object-oriented interface
 * @export
 * @class JournalApi
 * @extends {BaseAPI}
 */
export class JournalApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type journal in Dynamics 365 Business Central
     * @param {JournalApiDeleteJournalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JournalApi
     */
    public deleteJournal(requestParameters: JournalApiDeleteJournalRequest, options?: RawAxiosRequestConfig) {
        return JournalApiFp(this.configuration).deleteJournal(requestParameters.companyId, requestParameters.journalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type journal for Dynamics 365 Business Central.
     * @param {JournalApiGetJournalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JournalApi
     */
    public getJournal(requestParameters: JournalApiGetJournalRequest, options?: RawAxiosRequestConfig) {
        return JournalApiFp(this.configuration).getJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of journals
     * @param {JournalApiListJournalsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JournalApi
     */
    public listJournals(requestParameters: JournalApiListJournalsRequest, options?: RawAxiosRequestConfig) {
        return JournalApiFp(this.configuration).listJournals(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type journal in Dynamics 365 Business Central
     * @param {JournalApiPatchJournalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JournalApi
     */
    public patchJournal(requestParameters: JournalApiPatchJournalRequest, options?: RawAxiosRequestConfig) {
        return JournalApiFp(this.configuration).patchJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postJournalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Performs the post action for journals entity
     * @param {JournalApiPostActionJournalsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JournalApi
     */
    public postActionJournals(requestParameters: JournalApiPostActionJournalsRequest, options?: RawAxiosRequestConfig) {
        return JournalApiFp(this.configuration).postActionJournals(requestParameters.companyId, requestParameters.journalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type journal in Dynamics 365 Business Central
     * @param {JournalApiPostJournalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JournalApi
     */
    public postJournal(requestParameters: JournalApiPostJournalRequest, options?: RawAxiosRequestConfig) {
        return JournalApiFp(this.configuration).postJournal(requestParameters.companyId, requestParameters.contentType, requestParameters.postJournalRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetJournalExpandEnum = {
    JournalLines: 'journalLines',
    Account: 'account'
} as const;
export type GetJournalExpandEnum = typeof GetJournalExpandEnum[keyof typeof GetJournalExpandEnum];
/**
 * @export
 */
export const GetJournalSelectEnum = {
    Id: 'id',
    Code: 'code',
    DisplayName: 'displayName',
    LastModifiedDateTime: 'lastModifiedDateTime',
    BalancingAccountId: 'balancingAccountId',
    BalancingAccountNumber: 'balancingAccountNumber'
} as const;
export type GetJournalSelectEnum = typeof GetJournalSelectEnum[keyof typeof GetJournalSelectEnum];
/**
 * @export
 */
export const ListJournalsExpandEnum = {
    JournalLines: 'journalLines',
    Account: 'account'
} as const;
export type ListJournalsExpandEnum = typeof ListJournalsExpandEnum[keyof typeof ListJournalsExpandEnum];
/**
 * @export
 */
export const ListJournalsSelectEnum = {
    Id: 'id',
    Code: 'code',
    DisplayName: 'displayName',
    LastModifiedDateTime: 'lastModifiedDateTime',
    BalancingAccountId: 'balancingAccountId',
    BalancingAccountNumber: 'balancingAccountNumber'
} as const;
export type ListJournalsSelectEnum = typeof ListJournalsSelectEnum[keyof typeof ListJournalsSelectEnum];
