/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Attachments } from '../model';
// @ts-ignore
import type { ListAttachmentsForJournalLineForJournal200Response } from '../model';
// @ts-ignore
import type { PostAttachmentsForJournalLineForJournalRequest } from '../model';
/**
 * AttachmentsApi - axios parameter creator
 * @export
 */
export const AttachmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type attachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} attachmentsParentId (v1.0) parentId for attachments
         * @param {string} attachmentsId (v1.0) id for attachments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttachments: async (companyId: string, attachmentsParentId: string, attachmentsId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteAttachments', 'companyId', companyId)
            // verify required parameter 'attachmentsParentId' is not null or undefined
            assertParamExists('deleteAttachments', 'attachmentsParentId', attachmentsParentId)
            // verify required parameter 'attachmentsId' is not null or undefined
            assertParamExists('deleteAttachments', 'attachmentsId', attachmentsId)
            const localVarPath = `/companies({company_id})/attachments({attachments_parentId},{attachments_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"attachments_parentId"}}`, encodeURIComponent(String(attachmentsParentId)))
                .replace(`{${"attachments_id"}}`, encodeURIComponent(String(attachmentsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an object of type attachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {string} attachmentsParentId (v1.0) parentId for attachments
         * @param {string} attachmentsId (v1.0) id for attachments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttachmentsForJournalLine: async (companyId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteAttachmentsForJournalLine', 'companyId', companyId)
            // verify required parameter 'journalLineId' is not null or undefined
            assertParamExists('deleteAttachmentsForJournalLine', 'journalLineId', journalLineId)
            // verify required parameter 'attachmentsParentId' is not null or undefined
            assertParamExists('deleteAttachmentsForJournalLine', 'attachmentsParentId', attachmentsParentId)
            // verify required parameter 'attachmentsId' is not null or undefined
            assertParamExists('deleteAttachmentsForJournalLine', 'attachmentsId', attachmentsId)
            const localVarPath = `/companies({company_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"journalLine_id"}}`, encodeURIComponent(String(journalLineId)))
                .replace(`{${"attachments_parentId"}}`, encodeURIComponent(String(attachmentsParentId)))
                .replace(`{${"attachments_id"}}`, encodeURIComponent(String(attachmentsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an object of type attachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {string} attachmentsParentId (v1.0) parentId for attachments
         * @param {string} attachmentsId (v1.0) id for attachments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttachmentsForJournalLineForJournal: async (companyId: string, journalId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteAttachmentsForJournalLineForJournal', 'companyId', companyId)
            // verify required parameter 'journalId' is not null or undefined
            assertParamExists('deleteAttachmentsForJournalLineForJournal', 'journalId', journalId)
            // verify required parameter 'journalLineId' is not null or undefined
            assertParamExists('deleteAttachmentsForJournalLineForJournal', 'journalLineId', journalLineId)
            // verify required parameter 'attachmentsParentId' is not null or undefined
            assertParamExists('deleteAttachmentsForJournalLineForJournal', 'attachmentsParentId', attachmentsParentId)
            // verify required parameter 'attachmentsId' is not null or undefined
            assertParamExists('deleteAttachmentsForJournalLineForJournal', 'attachmentsId', attachmentsId)
            const localVarPath = `/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"journal_id"}}`, encodeURIComponent(String(journalId)))
                .replace(`{${"journalLine_id"}}`, encodeURIComponent(String(journalLineId)))
                .replace(`{${"attachments_parentId"}}`, encodeURIComponent(String(attachmentsParentId)))
                .replace(`{${"attachments_id"}}`, encodeURIComponent(String(attachmentsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} attachmentsParentId (v1.0) parentId for attachments
         * @param {string} attachmentsId (v1.0) id for attachments
         * @param {Array<GetAttachmentsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachments: async (companyId: string, attachmentsParentId: string, attachmentsId: string, $select?: Array<GetAttachmentsSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getAttachments', 'companyId', companyId)
            // verify required parameter 'attachmentsParentId' is not null or undefined
            assertParamExists('getAttachments', 'attachmentsParentId', attachmentsParentId)
            // verify required parameter 'attachmentsId' is not null or undefined
            assertParamExists('getAttachments', 'attachmentsId', attachmentsId)
            const localVarPath = `/companies({company_id})/attachments({attachments_parentId},{attachments_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"attachments_parentId"}}`, encodeURIComponent(String(attachmentsParentId)))
                .replace(`{${"attachments_id"}}`, encodeURIComponent(String(attachmentsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {string} attachmentsParentId (v1.0) parentId for attachments
         * @param {string} attachmentsId (v1.0) id for attachments
         * @param {Array<GetAttachmentsForJournalLineSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachmentsForJournalLine: async (companyId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, $select?: Array<GetAttachmentsForJournalLineSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getAttachmentsForJournalLine', 'companyId', companyId)
            // verify required parameter 'journalLineId' is not null or undefined
            assertParamExists('getAttachmentsForJournalLine', 'journalLineId', journalLineId)
            // verify required parameter 'attachmentsParentId' is not null or undefined
            assertParamExists('getAttachmentsForJournalLine', 'attachmentsParentId', attachmentsParentId)
            // verify required parameter 'attachmentsId' is not null or undefined
            assertParamExists('getAttachmentsForJournalLine', 'attachmentsId', attachmentsId)
            const localVarPath = `/companies({company_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"journalLine_id"}}`, encodeURIComponent(String(journalLineId)))
                .replace(`{${"attachments_parentId"}}`, encodeURIComponent(String(attachmentsParentId)))
                .replace(`{${"attachments_id"}}`, encodeURIComponent(String(attachmentsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {string} attachmentsParentId (v1.0) parentId for attachments
         * @param {string} attachmentsId (v1.0) id for attachments
         * @param {Array<GetAttachmentsForJournalLineForJournalSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachmentsForJournalLineForJournal: async (companyId: string, journalId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, $select?: Array<GetAttachmentsForJournalLineForJournalSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getAttachmentsForJournalLineForJournal', 'companyId', companyId)
            // verify required parameter 'journalId' is not null or undefined
            assertParamExists('getAttachmentsForJournalLineForJournal', 'journalId', journalId)
            // verify required parameter 'journalLineId' is not null or undefined
            assertParamExists('getAttachmentsForJournalLineForJournal', 'journalLineId', journalLineId)
            // verify required parameter 'attachmentsParentId' is not null or undefined
            assertParamExists('getAttachmentsForJournalLineForJournal', 'attachmentsParentId', attachmentsParentId)
            // verify required parameter 'attachmentsId' is not null or undefined
            assertParamExists('getAttachmentsForJournalLineForJournal', 'attachmentsId', attachmentsId)
            const localVarPath = `/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"journal_id"}}`, encodeURIComponent(String(journalId)))
                .replace(`{${"journalLine_id"}}`, encodeURIComponent(String(journalLineId)))
                .replace(`{${"attachments_parentId"}}`, encodeURIComponent(String(attachmentsParentId)))
                .replace(`{${"attachments_id"}}`, encodeURIComponent(String(attachmentsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of attachments
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListAttachmentsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAttachments: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListAttachmentsSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listAttachments', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/attachments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of attachments
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListAttachmentsForJournalLineSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAttachmentsForJournalLine: async (companyId: string, journalLineId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListAttachmentsForJournalLineSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listAttachmentsForJournalLine', 'companyId', companyId)
            // verify required parameter 'journalLineId' is not null or undefined
            assertParamExists('listAttachmentsForJournalLine', 'journalLineId', journalLineId)
            const localVarPath = `/companies({company_id})/journalLines({journalLine_id})/attachments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"journalLine_id"}}`, encodeURIComponent(String(journalLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of attachments
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListAttachmentsForJournalLineForJournalSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAttachmentsForJournalLineForJournal: async (companyId: string, journalId: string, journalLineId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListAttachmentsForJournalLineForJournalSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listAttachmentsForJournalLineForJournal', 'companyId', companyId)
            // verify required parameter 'journalId' is not null or undefined
            assertParamExists('listAttachmentsForJournalLineForJournal', 'journalId', journalId)
            // verify required parameter 'journalLineId' is not null or undefined
            assertParamExists('listAttachmentsForJournalLineForJournal', 'journalLineId', journalLineId)
            const localVarPath = `/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"journal_id"}}`, encodeURIComponent(String(journalId)))
                .replace(`{${"journalLine_id"}}`, encodeURIComponent(String(journalLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type attachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} attachmentsParentId (v1.0) parentId for attachments
         * @param {string} attachmentsId (v1.0) id for attachments
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostAttachmentsForJournalLineForJournalRequest} postAttachmentsForJournalLineForJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAttachments: async (companyId: string, attachmentsParentId: string, attachmentsId: string, contentType: string, ifMatch: string, postAttachmentsForJournalLineForJournalRequest: PostAttachmentsForJournalLineForJournalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchAttachments', 'companyId', companyId)
            // verify required parameter 'attachmentsParentId' is not null or undefined
            assertParamExists('patchAttachments', 'attachmentsParentId', attachmentsParentId)
            // verify required parameter 'attachmentsId' is not null or undefined
            assertParamExists('patchAttachments', 'attachmentsId', attachmentsId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchAttachments', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchAttachments', 'ifMatch', ifMatch)
            // verify required parameter 'postAttachmentsForJournalLineForJournalRequest' is not null or undefined
            assertParamExists('patchAttachments', 'postAttachmentsForJournalLineForJournalRequest', postAttachmentsForJournalLineForJournalRequest)
            const localVarPath = `/companies({company_id})/attachments({attachments_parentId},{attachments_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"attachments_parentId"}}`, encodeURIComponent(String(attachmentsParentId)))
                .replace(`{${"attachments_id"}}`, encodeURIComponent(String(attachmentsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAttachmentsForJournalLineForJournalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type attachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {string} attachmentsParentId (v1.0) parentId for attachments
         * @param {string} attachmentsId (v1.0) id for attachments
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostAttachmentsForJournalLineForJournalRequest} postAttachmentsForJournalLineForJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAttachmentsForJournalLine: async (companyId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, contentType: string, ifMatch: string, postAttachmentsForJournalLineForJournalRequest: PostAttachmentsForJournalLineForJournalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchAttachmentsForJournalLine', 'companyId', companyId)
            // verify required parameter 'journalLineId' is not null or undefined
            assertParamExists('patchAttachmentsForJournalLine', 'journalLineId', journalLineId)
            // verify required parameter 'attachmentsParentId' is not null or undefined
            assertParamExists('patchAttachmentsForJournalLine', 'attachmentsParentId', attachmentsParentId)
            // verify required parameter 'attachmentsId' is not null or undefined
            assertParamExists('patchAttachmentsForJournalLine', 'attachmentsId', attachmentsId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchAttachmentsForJournalLine', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchAttachmentsForJournalLine', 'ifMatch', ifMatch)
            // verify required parameter 'postAttachmentsForJournalLineForJournalRequest' is not null or undefined
            assertParamExists('patchAttachmentsForJournalLine', 'postAttachmentsForJournalLineForJournalRequest', postAttachmentsForJournalLineForJournalRequest)
            const localVarPath = `/companies({company_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"journalLine_id"}}`, encodeURIComponent(String(journalLineId)))
                .replace(`{${"attachments_parentId"}}`, encodeURIComponent(String(attachmentsParentId)))
                .replace(`{${"attachments_id"}}`, encodeURIComponent(String(attachmentsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAttachmentsForJournalLineForJournalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type attachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {string} attachmentsParentId (v1.0) parentId for attachments
         * @param {string} attachmentsId (v1.0) id for attachments
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostAttachmentsForJournalLineForJournalRequest} postAttachmentsForJournalLineForJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAttachmentsForJournalLineForJournal: async (companyId: string, journalId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, contentType: string, ifMatch: string, postAttachmentsForJournalLineForJournalRequest: PostAttachmentsForJournalLineForJournalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchAttachmentsForJournalLineForJournal', 'companyId', companyId)
            // verify required parameter 'journalId' is not null or undefined
            assertParamExists('patchAttachmentsForJournalLineForJournal', 'journalId', journalId)
            // verify required parameter 'journalLineId' is not null or undefined
            assertParamExists('patchAttachmentsForJournalLineForJournal', 'journalLineId', journalLineId)
            // verify required parameter 'attachmentsParentId' is not null or undefined
            assertParamExists('patchAttachmentsForJournalLineForJournal', 'attachmentsParentId', attachmentsParentId)
            // verify required parameter 'attachmentsId' is not null or undefined
            assertParamExists('patchAttachmentsForJournalLineForJournal', 'attachmentsId', attachmentsId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchAttachmentsForJournalLineForJournal', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchAttachmentsForJournalLineForJournal', 'ifMatch', ifMatch)
            // verify required parameter 'postAttachmentsForJournalLineForJournalRequest' is not null or undefined
            assertParamExists('patchAttachmentsForJournalLineForJournal', 'postAttachmentsForJournalLineForJournalRequest', postAttachmentsForJournalLineForJournalRequest)
            const localVarPath = `/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"journal_id"}}`, encodeURIComponent(String(journalId)))
                .replace(`{${"journalLine_id"}}`, encodeURIComponent(String(journalLineId)))
                .replace(`{${"attachments_parentId"}}`, encodeURIComponent(String(attachmentsParentId)))
                .replace(`{${"attachments_id"}}`, encodeURIComponent(String(attachmentsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAttachmentsForJournalLineForJournalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type attachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostAttachmentsForJournalLineForJournalRequest} postAttachmentsForJournalLineForJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAttachments: async (companyId: string, contentType: string, postAttachmentsForJournalLineForJournalRequest: PostAttachmentsForJournalLineForJournalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postAttachments', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postAttachments', 'contentType', contentType)
            // verify required parameter 'postAttachmentsForJournalLineForJournalRequest' is not null or undefined
            assertParamExists('postAttachments', 'postAttachmentsForJournalLineForJournalRequest', postAttachmentsForJournalLineForJournalRequest)
            const localVarPath = `/companies({company_id})/attachments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAttachmentsForJournalLineForJournalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type attachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {string} contentType (v1.0) application/json
         * @param {PostAttachmentsForJournalLineForJournalRequest} postAttachmentsForJournalLineForJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAttachmentsForJournalLine: async (companyId: string, journalLineId: string, contentType: string, postAttachmentsForJournalLineForJournalRequest: PostAttachmentsForJournalLineForJournalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postAttachmentsForJournalLine', 'companyId', companyId)
            // verify required parameter 'journalLineId' is not null or undefined
            assertParamExists('postAttachmentsForJournalLine', 'journalLineId', journalLineId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postAttachmentsForJournalLine', 'contentType', contentType)
            // verify required parameter 'postAttachmentsForJournalLineForJournalRequest' is not null or undefined
            assertParamExists('postAttachmentsForJournalLine', 'postAttachmentsForJournalLineForJournalRequest', postAttachmentsForJournalLineForJournalRequest)
            const localVarPath = `/companies({company_id})/journalLines({journalLine_id})/attachments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"journalLine_id"}}`, encodeURIComponent(String(journalLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAttachmentsForJournalLineForJournalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type attachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {string} contentType (v1.0) application/json
         * @param {PostAttachmentsForJournalLineForJournalRequest} postAttachmentsForJournalLineForJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAttachmentsForJournalLineForJournal: async (companyId: string, journalId: string, journalLineId: string, contentType: string, postAttachmentsForJournalLineForJournalRequest: PostAttachmentsForJournalLineForJournalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postAttachmentsForJournalLineForJournal', 'companyId', companyId)
            // verify required parameter 'journalId' is not null or undefined
            assertParamExists('postAttachmentsForJournalLineForJournal', 'journalId', journalId)
            // verify required parameter 'journalLineId' is not null or undefined
            assertParamExists('postAttachmentsForJournalLineForJournal', 'journalLineId', journalLineId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postAttachmentsForJournalLineForJournal', 'contentType', contentType)
            // verify required parameter 'postAttachmentsForJournalLineForJournalRequest' is not null or undefined
            assertParamExists('postAttachmentsForJournalLineForJournal', 'postAttachmentsForJournalLineForJournalRequest', postAttachmentsForJournalLineForJournalRequest)
            const localVarPath = `/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"journal_id"}}`, encodeURIComponent(String(journalId)))
                .replace(`{${"journalLine_id"}}`, encodeURIComponent(String(journalLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAttachmentsForJournalLineForJournalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttachmentsApi - functional programming interface
 * @export
 */
export const AttachmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttachmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type attachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} attachmentsParentId (v1.0) parentId for attachments
         * @param {string} attachmentsId (v1.0) id for attachments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAttachments(companyId: string, attachmentsParentId: string, attachmentsId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAttachments(companyId, attachmentsParentId, attachmentsId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttachmentsApi.deleteAttachments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes an object of type attachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {string} attachmentsParentId (v1.0) parentId for attachments
         * @param {string} attachmentsId (v1.0) id for attachments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAttachmentsForJournalLine(companyId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAttachmentsForJournalLine(companyId, journalLineId, attachmentsParentId, attachmentsId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttachmentsApi.deleteAttachmentsForJournalLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes an object of type attachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {string} attachmentsParentId (v1.0) parentId for attachments
         * @param {string} attachmentsId (v1.0) id for attachments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAttachmentsForJournalLineForJournal(companyId: string, journalId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAttachmentsForJournalLineForJournal(companyId, journalId, journalLineId, attachmentsParentId, attachmentsId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttachmentsApi.deleteAttachmentsForJournalLineForJournal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} attachmentsParentId (v1.0) parentId for attachments
         * @param {string} attachmentsId (v1.0) id for attachments
         * @param {Array<GetAttachmentsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttachments(companyId: string, attachmentsParentId: string, attachmentsId: string, $select?: Array<GetAttachmentsSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attachments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttachments(companyId, attachmentsParentId, attachmentsId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttachmentsApi.getAttachments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {string} attachmentsParentId (v1.0) parentId for attachments
         * @param {string} attachmentsId (v1.0) id for attachments
         * @param {Array<GetAttachmentsForJournalLineSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttachmentsForJournalLine(companyId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, $select?: Array<GetAttachmentsForJournalLineSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attachments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttachmentsForJournalLine(companyId, journalLineId, attachmentsParentId, attachmentsId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttachmentsApi.getAttachmentsForJournalLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {string} attachmentsParentId (v1.0) parentId for attachments
         * @param {string} attachmentsId (v1.0) id for attachments
         * @param {Array<GetAttachmentsForJournalLineForJournalSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttachmentsForJournalLineForJournal(companyId: string, journalId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, $select?: Array<GetAttachmentsForJournalLineForJournalSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attachments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttachmentsForJournalLineForJournal(companyId, journalId, journalLineId, attachmentsParentId, attachmentsId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttachmentsApi.getAttachmentsForJournalLineForJournal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of attachments
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListAttachmentsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAttachments(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListAttachmentsSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAttachmentsForJournalLineForJournal200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAttachments(companyId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttachmentsApi.listAttachments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of attachments
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListAttachmentsForJournalLineSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAttachmentsForJournalLine(companyId: string, journalLineId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListAttachmentsForJournalLineSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAttachmentsForJournalLineForJournal200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAttachmentsForJournalLine(companyId, journalLineId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttachmentsApi.listAttachmentsForJournalLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of attachments
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListAttachmentsForJournalLineForJournalSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAttachmentsForJournalLineForJournal(companyId: string, journalId: string, journalLineId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListAttachmentsForJournalLineForJournalSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAttachmentsForJournalLineForJournal200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAttachmentsForJournalLineForJournal(companyId, journalId, journalLineId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttachmentsApi.listAttachmentsForJournalLineForJournal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type attachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} attachmentsParentId (v1.0) parentId for attachments
         * @param {string} attachmentsId (v1.0) id for attachments
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostAttachmentsForJournalLineForJournalRequest} postAttachmentsForJournalLineForJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAttachments(companyId: string, attachmentsParentId: string, attachmentsId: string, contentType: string, ifMatch: string, postAttachmentsForJournalLineForJournalRequest: PostAttachmentsForJournalLineForJournalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attachments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAttachments(companyId, attachmentsParentId, attachmentsId, contentType, ifMatch, postAttachmentsForJournalLineForJournalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttachmentsApi.patchAttachments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type attachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {string} attachmentsParentId (v1.0) parentId for attachments
         * @param {string} attachmentsId (v1.0) id for attachments
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostAttachmentsForJournalLineForJournalRequest} postAttachmentsForJournalLineForJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAttachmentsForJournalLine(companyId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, contentType: string, ifMatch: string, postAttachmentsForJournalLineForJournalRequest: PostAttachmentsForJournalLineForJournalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attachments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAttachmentsForJournalLine(companyId, journalLineId, attachmentsParentId, attachmentsId, contentType, ifMatch, postAttachmentsForJournalLineForJournalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttachmentsApi.patchAttachmentsForJournalLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type attachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {string} attachmentsParentId (v1.0) parentId for attachments
         * @param {string} attachmentsId (v1.0) id for attachments
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostAttachmentsForJournalLineForJournalRequest} postAttachmentsForJournalLineForJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAttachmentsForJournalLineForJournal(companyId: string, journalId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, contentType: string, ifMatch: string, postAttachmentsForJournalLineForJournalRequest: PostAttachmentsForJournalLineForJournalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attachments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAttachmentsForJournalLineForJournal(companyId, journalId, journalLineId, attachmentsParentId, attachmentsId, contentType, ifMatch, postAttachmentsForJournalLineForJournalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttachmentsApi.patchAttachmentsForJournalLineForJournal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type attachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostAttachmentsForJournalLineForJournalRequest} postAttachmentsForJournalLineForJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAttachments(companyId: string, contentType: string, postAttachmentsForJournalLineForJournalRequest: PostAttachmentsForJournalLineForJournalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attachments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAttachments(companyId, contentType, postAttachmentsForJournalLineForJournalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttachmentsApi.postAttachments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type attachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {string} contentType (v1.0) application/json
         * @param {PostAttachmentsForJournalLineForJournalRequest} postAttachmentsForJournalLineForJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAttachmentsForJournalLine(companyId: string, journalLineId: string, contentType: string, postAttachmentsForJournalLineForJournalRequest: PostAttachmentsForJournalLineForJournalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attachments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAttachmentsForJournalLine(companyId, journalLineId, contentType, postAttachmentsForJournalLineForJournalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttachmentsApi.postAttachmentsForJournalLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type attachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} journalId (v1.0) id for journal
         * @param {string} journalLineId (v1.0) id for journalLine
         * @param {string} contentType (v1.0) application/json
         * @param {PostAttachmentsForJournalLineForJournalRequest} postAttachmentsForJournalLineForJournalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAttachmentsForJournalLineForJournal(companyId: string, journalId: string, journalLineId: string, contentType: string, postAttachmentsForJournalLineForJournalRequest: PostAttachmentsForJournalLineForJournalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attachments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAttachmentsForJournalLineForJournal(companyId, journalId, journalLineId, contentType, postAttachmentsForJournalLineForJournalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttachmentsApi.postAttachmentsForJournalLineForJournal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AttachmentsApi - factory interface
 * @export
 */
export const AttachmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttachmentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type attachments in Dynamics 365 Business Central
         * @param {AttachmentsApiDeleteAttachmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttachments(requestParameters: AttachmentsApiDeleteAttachmentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAttachments(requestParameters.companyId, requestParameters.attachmentsParentId, requestParameters.attachmentsId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an object of type attachments in Dynamics 365 Business Central
         * @param {AttachmentsApiDeleteAttachmentsForJournalLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttachmentsForJournalLine(requestParameters: AttachmentsApiDeleteAttachmentsForJournalLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAttachmentsForJournalLine(requestParameters.companyId, requestParameters.journalLineId, requestParameters.attachmentsParentId, requestParameters.attachmentsId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an object of type attachments in Dynamics 365 Business Central
         * @param {AttachmentsApiDeleteAttachmentsForJournalLineForJournalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttachmentsForJournalLineForJournal(requestParameters: AttachmentsApiDeleteAttachmentsForJournalLineForJournalRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAttachmentsForJournalLineForJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.journalLineId, requestParameters.attachmentsParentId, requestParameters.attachmentsId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
         * @param {AttachmentsApiGetAttachmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachments(requestParameters: AttachmentsApiGetAttachmentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Attachments> {
            return localVarFp.getAttachments(requestParameters.companyId, requestParameters.attachmentsParentId, requestParameters.attachmentsId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
         * @param {AttachmentsApiGetAttachmentsForJournalLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachmentsForJournalLine(requestParameters: AttachmentsApiGetAttachmentsForJournalLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<Attachments> {
            return localVarFp.getAttachmentsForJournalLine(requestParameters.companyId, requestParameters.journalLineId, requestParameters.attachmentsParentId, requestParameters.attachmentsId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
         * @param {AttachmentsApiGetAttachmentsForJournalLineForJournalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachmentsForJournalLineForJournal(requestParameters: AttachmentsApiGetAttachmentsForJournalLineForJournalRequest, options?: RawAxiosRequestConfig): AxiosPromise<Attachments> {
            return localVarFp.getAttachmentsForJournalLineForJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.journalLineId, requestParameters.attachmentsParentId, requestParameters.attachmentsId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of attachments
         * @param {AttachmentsApiListAttachmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAttachments(requestParameters: AttachmentsApiListAttachmentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListAttachmentsForJournalLineForJournal200Response> {
            return localVarFp.listAttachments(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of attachments
         * @param {AttachmentsApiListAttachmentsForJournalLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAttachmentsForJournalLine(requestParameters: AttachmentsApiListAttachmentsForJournalLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListAttachmentsForJournalLineForJournal200Response> {
            return localVarFp.listAttachmentsForJournalLine(requestParameters.companyId, requestParameters.journalLineId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of attachments
         * @param {AttachmentsApiListAttachmentsForJournalLineForJournalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAttachmentsForJournalLineForJournal(requestParameters: AttachmentsApiListAttachmentsForJournalLineForJournalRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListAttachmentsForJournalLineForJournal200Response> {
            return localVarFp.listAttachmentsForJournalLineForJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.journalLineId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type attachments in Dynamics 365 Business Central
         * @param {AttachmentsApiPatchAttachmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAttachments(requestParameters: AttachmentsApiPatchAttachmentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Attachments> {
            return localVarFp.patchAttachments(requestParameters.companyId, requestParameters.attachmentsParentId, requestParameters.attachmentsId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postAttachmentsForJournalLineForJournalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type attachments in Dynamics 365 Business Central
         * @param {AttachmentsApiPatchAttachmentsForJournalLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAttachmentsForJournalLine(requestParameters: AttachmentsApiPatchAttachmentsForJournalLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<Attachments> {
            return localVarFp.patchAttachmentsForJournalLine(requestParameters.companyId, requestParameters.journalLineId, requestParameters.attachmentsParentId, requestParameters.attachmentsId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postAttachmentsForJournalLineForJournalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type attachments in Dynamics 365 Business Central
         * @param {AttachmentsApiPatchAttachmentsForJournalLineForJournalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAttachmentsForJournalLineForJournal(requestParameters: AttachmentsApiPatchAttachmentsForJournalLineForJournalRequest, options?: RawAxiosRequestConfig): AxiosPromise<Attachments> {
            return localVarFp.patchAttachmentsForJournalLineForJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.journalLineId, requestParameters.attachmentsParentId, requestParameters.attachmentsId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postAttachmentsForJournalLineForJournalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type attachments in Dynamics 365 Business Central
         * @param {AttachmentsApiPostAttachmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAttachments(requestParameters: AttachmentsApiPostAttachmentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Attachments> {
            return localVarFp.postAttachments(requestParameters.companyId, requestParameters.contentType, requestParameters.postAttachmentsForJournalLineForJournalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type attachments in Dynamics 365 Business Central
         * @param {AttachmentsApiPostAttachmentsForJournalLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAttachmentsForJournalLine(requestParameters: AttachmentsApiPostAttachmentsForJournalLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<Attachments> {
            return localVarFp.postAttachmentsForJournalLine(requestParameters.companyId, requestParameters.journalLineId, requestParameters.contentType, requestParameters.postAttachmentsForJournalLineForJournalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type attachments in Dynamics 365 Business Central
         * @param {AttachmentsApiPostAttachmentsForJournalLineForJournalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAttachmentsForJournalLineForJournal(requestParameters: AttachmentsApiPostAttachmentsForJournalLineForJournalRequest, options?: RawAxiosRequestConfig): AxiosPromise<Attachments> {
            return localVarFp.postAttachmentsForJournalLineForJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.journalLineId, requestParameters.contentType, requestParameters.postAttachmentsForJournalLineForJournalRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteAttachments operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiDeleteAttachmentsRequest
 */
export interface AttachmentsApiDeleteAttachmentsRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof AttachmentsApiDeleteAttachments
     */
    readonly companyId: string

    /**
     * (v1.0) parentId for attachments
     * @type {string}
     * @memberof AttachmentsApiDeleteAttachments
     */
    readonly attachmentsParentId: string

    /**
     * (v1.0) id for attachments
     * @type {string}
     * @memberof AttachmentsApiDeleteAttachments
     */
    readonly attachmentsId: string
}

/**
 * Request parameters for deleteAttachmentsForJournalLine operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiDeleteAttachmentsForJournalLineRequest
 */
export interface AttachmentsApiDeleteAttachmentsForJournalLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof AttachmentsApiDeleteAttachmentsForJournalLine
     */
    readonly companyId: string

    /**
     * (v1.0) id for journalLine
     * @type {string}
     * @memberof AttachmentsApiDeleteAttachmentsForJournalLine
     */
    readonly journalLineId: string

    /**
     * (v1.0) parentId for attachments
     * @type {string}
     * @memberof AttachmentsApiDeleteAttachmentsForJournalLine
     */
    readonly attachmentsParentId: string

    /**
     * (v1.0) id for attachments
     * @type {string}
     * @memberof AttachmentsApiDeleteAttachmentsForJournalLine
     */
    readonly attachmentsId: string
}

/**
 * Request parameters for deleteAttachmentsForJournalLineForJournal operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiDeleteAttachmentsForJournalLineForJournalRequest
 */
export interface AttachmentsApiDeleteAttachmentsForJournalLineForJournalRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof AttachmentsApiDeleteAttachmentsForJournalLineForJournal
     */
    readonly companyId: string

    /**
     * (v1.0) id for journal
     * @type {string}
     * @memberof AttachmentsApiDeleteAttachmentsForJournalLineForJournal
     */
    readonly journalId: string

    /**
     * (v1.0) id for journalLine
     * @type {string}
     * @memberof AttachmentsApiDeleteAttachmentsForJournalLineForJournal
     */
    readonly journalLineId: string

    /**
     * (v1.0) parentId for attachments
     * @type {string}
     * @memberof AttachmentsApiDeleteAttachmentsForJournalLineForJournal
     */
    readonly attachmentsParentId: string

    /**
     * (v1.0) id for attachments
     * @type {string}
     * @memberof AttachmentsApiDeleteAttachmentsForJournalLineForJournal
     */
    readonly attachmentsId: string
}

/**
 * Request parameters for getAttachments operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiGetAttachmentsRequest
 */
export interface AttachmentsApiGetAttachmentsRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof AttachmentsApiGetAttachments
     */
    readonly companyId: string

    /**
     * (v1.0) parentId for attachments
     * @type {string}
     * @memberof AttachmentsApiGetAttachments
     */
    readonly attachmentsParentId: string

    /**
     * (v1.0) id for attachments
     * @type {string}
     * @memberof AttachmentsApiGetAttachments
     */
    readonly attachmentsId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'parentId' | 'id' | 'fileName' | 'byteSize' | 'content' | 'lastModifiedDateTime'>}
     * @memberof AttachmentsApiGetAttachments
     */
    readonly $select?: Array<GetAttachmentsSelectEnum>
}

/**
 * Request parameters for getAttachmentsForJournalLine operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiGetAttachmentsForJournalLineRequest
 */
export interface AttachmentsApiGetAttachmentsForJournalLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof AttachmentsApiGetAttachmentsForJournalLine
     */
    readonly companyId: string

    /**
     * (v1.0) id for journalLine
     * @type {string}
     * @memberof AttachmentsApiGetAttachmentsForJournalLine
     */
    readonly journalLineId: string

    /**
     * (v1.0) parentId for attachments
     * @type {string}
     * @memberof AttachmentsApiGetAttachmentsForJournalLine
     */
    readonly attachmentsParentId: string

    /**
     * (v1.0) id for attachments
     * @type {string}
     * @memberof AttachmentsApiGetAttachmentsForJournalLine
     */
    readonly attachmentsId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'parentId' | 'id' | 'fileName' | 'byteSize' | 'content' | 'lastModifiedDateTime'>}
     * @memberof AttachmentsApiGetAttachmentsForJournalLine
     */
    readonly $select?: Array<GetAttachmentsForJournalLineSelectEnum>
}

/**
 * Request parameters for getAttachmentsForJournalLineForJournal operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiGetAttachmentsForJournalLineForJournalRequest
 */
export interface AttachmentsApiGetAttachmentsForJournalLineForJournalRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof AttachmentsApiGetAttachmentsForJournalLineForJournal
     */
    readonly companyId: string

    /**
     * (v1.0) id for journal
     * @type {string}
     * @memberof AttachmentsApiGetAttachmentsForJournalLineForJournal
     */
    readonly journalId: string

    /**
     * (v1.0) id for journalLine
     * @type {string}
     * @memberof AttachmentsApiGetAttachmentsForJournalLineForJournal
     */
    readonly journalLineId: string

    /**
     * (v1.0) parentId for attachments
     * @type {string}
     * @memberof AttachmentsApiGetAttachmentsForJournalLineForJournal
     */
    readonly attachmentsParentId: string

    /**
     * (v1.0) id for attachments
     * @type {string}
     * @memberof AttachmentsApiGetAttachmentsForJournalLineForJournal
     */
    readonly attachmentsId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'parentId' | 'id' | 'fileName' | 'byteSize' | 'content' | 'lastModifiedDateTime'>}
     * @memberof AttachmentsApiGetAttachmentsForJournalLineForJournal
     */
    readonly $select?: Array<GetAttachmentsForJournalLineForJournalSelectEnum>
}

/**
 * Request parameters for listAttachments operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiListAttachmentsRequest
 */
export interface AttachmentsApiListAttachmentsRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof AttachmentsApiListAttachments
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof AttachmentsApiListAttachments
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof AttachmentsApiListAttachments
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof AttachmentsApiListAttachments
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof AttachmentsApiListAttachments
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'parentId' | 'id' | 'fileName' | 'byteSize' | 'content' | 'lastModifiedDateTime'>}
     * @memberof AttachmentsApiListAttachments
     */
    readonly $select?: Array<ListAttachmentsSelectEnum>
}

/**
 * Request parameters for listAttachmentsForJournalLine operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiListAttachmentsForJournalLineRequest
 */
export interface AttachmentsApiListAttachmentsForJournalLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof AttachmentsApiListAttachmentsForJournalLine
     */
    readonly companyId: string

    /**
     * (v1.0) id for journalLine
     * @type {string}
     * @memberof AttachmentsApiListAttachmentsForJournalLine
     */
    readonly journalLineId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof AttachmentsApiListAttachmentsForJournalLine
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof AttachmentsApiListAttachmentsForJournalLine
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof AttachmentsApiListAttachmentsForJournalLine
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof AttachmentsApiListAttachmentsForJournalLine
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'parentId' | 'id' | 'fileName' | 'byteSize' | 'content' | 'lastModifiedDateTime'>}
     * @memberof AttachmentsApiListAttachmentsForJournalLine
     */
    readonly $select?: Array<ListAttachmentsForJournalLineSelectEnum>
}

/**
 * Request parameters for listAttachmentsForJournalLineForJournal operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiListAttachmentsForJournalLineForJournalRequest
 */
export interface AttachmentsApiListAttachmentsForJournalLineForJournalRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof AttachmentsApiListAttachmentsForJournalLineForJournal
     */
    readonly companyId: string

    /**
     * (v1.0) id for journal
     * @type {string}
     * @memberof AttachmentsApiListAttachmentsForJournalLineForJournal
     */
    readonly journalId: string

    /**
     * (v1.0) id for journalLine
     * @type {string}
     * @memberof AttachmentsApiListAttachmentsForJournalLineForJournal
     */
    readonly journalLineId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof AttachmentsApiListAttachmentsForJournalLineForJournal
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof AttachmentsApiListAttachmentsForJournalLineForJournal
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof AttachmentsApiListAttachmentsForJournalLineForJournal
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof AttachmentsApiListAttachmentsForJournalLineForJournal
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'parentId' | 'id' | 'fileName' | 'byteSize' | 'content' | 'lastModifiedDateTime'>}
     * @memberof AttachmentsApiListAttachmentsForJournalLineForJournal
     */
    readonly $select?: Array<ListAttachmentsForJournalLineForJournalSelectEnum>
}

/**
 * Request parameters for patchAttachments operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiPatchAttachmentsRequest
 */
export interface AttachmentsApiPatchAttachmentsRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof AttachmentsApiPatchAttachments
     */
    readonly companyId: string

    /**
     * (v1.0) parentId for attachments
     * @type {string}
     * @memberof AttachmentsApiPatchAttachments
     */
    readonly attachmentsParentId: string

    /**
     * (v1.0) id for attachments
     * @type {string}
     * @memberof AttachmentsApiPatchAttachments
     */
    readonly attachmentsId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof AttachmentsApiPatchAttachments
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof AttachmentsApiPatchAttachments
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostAttachmentsForJournalLineForJournalRequest}
     * @memberof AttachmentsApiPatchAttachments
     */
    readonly postAttachmentsForJournalLineForJournalRequest: PostAttachmentsForJournalLineForJournalRequest
}

/**
 * Request parameters for patchAttachmentsForJournalLine operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiPatchAttachmentsForJournalLineRequest
 */
export interface AttachmentsApiPatchAttachmentsForJournalLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof AttachmentsApiPatchAttachmentsForJournalLine
     */
    readonly companyId: string

    /**
     * (v1.0) id for journalLine
     * @type {string}
     * @memberof AttachmentsApiPatchAttachmentsForJournalLine
     */
    readonly journalLineId: string

    /**
     * (v1.0) parentId for attachments
     * @type {string}
     * @memberof AttachmentsApiPatchAttachmentsForJournalLine
     */
    readonly attachmentsParentId: string

    /**
     * (v1.0) id for attachments
     * @type {string}
     * @memberof AttachmentsApiPatchAttachmentsForJournalLine
     */
    readonly attachmentsId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof AttachmentsApiPatchAttachmentsForJournalLine
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof AttachmentsApiPatchAttachmentsForJournalLine
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostAttachmentsForJournalLineForJournalRequest}
     * @memberof AttachmentsApiPatchAttachmentsForJournalLine
     */
    readonly postAttachmentsForJournalLineForJournalRequest: PostAttachmentsForJournalLineForJournalRequest
}

/**
 * Request parameters for patchAttachmentsForJournalLineForJournal operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiPatchAttachmentsForJournalLineForJournalRequest
 */
export interface AttachmentsApiPatchAttachmentsForJournalLineForJournalRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof AttachmentsApiPatchAttachmentsForJournalLineForJournal
     */
    readonly companyId: string

    /**
     * (v1.0) id for journal
     * @type {string}
     * @memberof AttachmentsApiPatchAttachmentsForJournalLineForJournal
     */
    readonly journalId: string

    /**
     * (v1.0) id for journalLine
     * @type {string}
     * @memberof AttachmentsApiPatchAttachmentsForJournalLineForJournal
     */
    readonly journalLineId: string

    /**
     * (v1.0) parentId for attachments
     * @type {string}
     * @memberof AttachmentsApiPatchAttachmentsForJournalLineForJournal
     */
    readonly attachmentsParentId: string

    /**
     * (v1.0) id for attachments
     * @type {string}
     * @memberof AttachmentsApiPatchAttachmentsForJournalLineForJournal
     */
    readonly attachmentsId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof AttachmentsApiPatchAttachmentsForJournalLineForJournal
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof AttachmentsApiPatchAttachmentsForJournalLineForJournal
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostAttachmentsForJournalLineForJournalRequest}
     * @memberof AttachmentsApiPatchAttachmentsForJournalLineForJournal
     */
    readonly postAttachmentsForJournalLineForJournalRequest: PostAttachmentsForJournalLineForJournalRequest
}

/**
 * Request parameters for postAttachments operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiPostAttachmentsRequest
 */
export interface AttachmentsApiPostAttachmentsRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof AttachmentsApiPostAttachments
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof AttachmentsApiPostAttachments
     */
    readonly contentType: string

    /**
     * 
     * @type {PostAttachmentsForJournalLineForJournalRequest}
     * @memberof AttachmentsApiPostAttachments
     */
    readonly postAttachmentsForJournalLineForJournalRequest: PostAttachmentsForJournalLineForJournalRequest
}

/**
 * Request parameters for postAttachmentsForJournalLine operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiPostAttachmentsForJournalLineRequest
 */
export interface AttachmentsApiPostAttachmentsForJournalLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof AttachmentsApiPostAttachmentsForJournalLine
     */
    readonly companyId: string

    /**
     * (v1.0) id for journalLine
     * @type {string}
     * @memberof AttachmentsApiPostAttachmentsForJournalLine
     */
    readonly journalLineId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof AttachmentsApiPostAttachmentsForJournalLine
     */
    readonly contentType: string

    /**
     * 
     * @type {PostAttachmentsForJournalLineForJournalRequest}
     * @memberof AttachmentsApiPostAttachmentsForJournalLine
     */
    readonly postAttachmentsForJournalLineForJournalRequest: PostAttachmentsForJournalLineForJournalRequest
}

/**
 * Request parameters for postAttachmentsForJournalLineForJournal operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiPostAttachmentsForJournalLineForJournalRequest
 */
export interface AttachmentsApiPostAttachmentsForJournalLineForJournalRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof AttachmentsApiPostAttachmentsForJournalLineForJournal
     */
    readonly companyId: string

    /**
     * (v1.0) id for journal
     * @type {string}
     * @memberof AttachmentsApiPostAttachmentsForJournalLineForJournal
     */
    readonly journalId: string

    /**
     * (v1.0) id for journalLine
     * @type {string}
     * @memberof AttachmentsApiPostAttachmentsForJournalLineForJournal
     */
    readonly journalLineId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof AttachmentsApiPostAttachmentsForJournalLineForJournal
     */
    readonly contentType: string

    /**
     * 
     * @type {PostAttachmentsForJournalLineForJournalRequest}
     * @memberof AttachmentsApiPostAttachmentsForJournalLineForJournal
     */
    readonly postAttachmentsForJournalLineForJournalRequest: PostAttachmentsForJournalLineForJournalRequest
}

/**
 * AttachmentsApi - object-oriented interface
 * @export
 * @class AttachmentsApi
 * @extends {BaseAPI}
 */
export class AttachmentsApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type attachments in Dynamics 365 Business Central
     * @param {AttachmentsApiDeleteAttachmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    public deleteAttachments(requestParameters: AttachmentsApiDeleteAttachmentsRequest, options?: RawAxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).deleteAttachments(requestParameters.companyId, requestParameters.attachmentsParentId, requestParameters.attachmentsId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an object of type attachments in Dynamics 365 Business Central
     * @param {AttachmentsApiDeleteAttachmentsForJournalLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    public deleteAttachmentsForJournalLine(requestParameters: AttachmentsApiDeleteAttachmentsForJournalLineRequest, options?: RawAxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).deleteAttachmentsForJournalLine(requestParameters.companyId, requestParameters.journalLineId, requestParameters.attachmentsParentId, requestParameters.attachmentsId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an object of type attachments in Dynamics 365 Business Central
     * @param {AttachmentsApiDeleteAttachmentsForJournalLineForJournalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    public deleteAttachmentsForJournalLineForJournal(requestParameters: AttachmentsApiDeleteAttachmentsForJournalLineForJournalRequest, options?: RawAxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).deleteAttachmentsForJournalLineForJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.journalLineId, requestParameters.attachmentsParentId, requestParameters.attachmentsId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
     * @param {AttachmentsApiGetAttachmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    public getAttachments(requestParameters: AttachmentsApiGetAttachmentsRequest, options?: RawAxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).getAttachments(requestParameters.companyId, requestParameters.attachmentsParentId, requestParameters.attachmentsId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
     * @param {AttachmentsApiGetAttachmentsForJournalLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    public getAttachmentsForJournalLine(requestParameters: AttachmentsApiGetAttachmentsForJournalLineRequest, options?: RawAxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).getAttachmentsForJournalLine(requestParameters.companyId, requestParameters.journalLineId, requestParameters.attachmentsParentId, requestParameters.attachmentsId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type attachments for Dynamics 365 Business Central.
     * @param {AttachmentsApiGetAttachmentsForJournalLineForJournalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    public getAttachmentsForJournalLineForJournal(requestParameters: AttachmentsApiGetAttachmentsForJournalLineForJournalRequest, options?: RawAxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).getAttachmentsForJournalLineForJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.journalLineId, requestParameters.attachmentsParentId, requestParameters.attachmentsId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of attachments
     * @param {AttachmentsApiListAttachmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    public listAttachments(requestParameters: AttachmentsApiListAttachmentsRequest, options?: RawAxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).listAttachments(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of attachments
     * @param {AttachmentsApiListAttachmentsForJournalLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    public listAttachmentsForJournalLine(requestParameters: AttachmentsApiListAttachmentsForJournalLineRequest, options?: RawAxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).listAttachmentsForJournalLine(requestParameters.companyId, requestParameters.journalLineId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of attachments
     * @param {AttachmentsApiListAttachmentsForJournalLineForJournalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    public listAttachmentsForJournalLineForJournal(requestParameters: AttachmentsApiListAttachmentsForJournalLineForJournalRequest, options?: RawAxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).listAttachmentsForJournalLineForJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.journalLineId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type attachments in Dynamics 365 Business Central
     * @param {AttachmentsApiPatchAttachmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    public patchAttachments(requestParameters: AttachmentsApiPatchAttachmentsRequest, options?: RawAxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).patchAttachments(requestParameters.companyId, requestParameters.attachmentsParentId, requestParameters.attachmentsId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postAttachmentsForJournalLineForJournalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type attachments in Dynamics 365 Business Central
     * @param {AttachmentsApiPatchAttachmentsForJournalLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    public patchAttachmentsForJournalLine(requestParameters: AttachmentsApiPatchAttachmentsForJournalLineRequest, options?: RawAxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).patchAttachmentsForJournalLine(requestParameters.companyId, requestParameters.journalLineId, requestParameters.attachmentsParentId, requestParameters.attachmentsId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postAttachmentsForJournalLineForJournalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type attachments in Dynamics 365 Business Central
     * @param {AttachmentsApiPatchAttachmentsForJournalLineForJournalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    public patchAttachmentsForJournalLineForJournal(requestParameters: AttachmentsApiPatchAttachmentsForJournalLineForJournalRequest, options?: RawAxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).patchAttachmentsForJournalLineForJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.journalLineId, requestParameters.attachmentsParentId, requestParameters.attachmentsId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postAttachmentsForJournalLineForJournalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type attachments in Dynamics 365 Business Central
     * @param {AttachmentsApiPostAttachmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    public postAttachments(requestParameters: AttachmentsApiPostAttachmentsRequest, options?: RawAxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).postAttachments(requestParameters.companyId, requestParameters.contentType, requestParameters.postAttachmentsForJournalLineForJournalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type attachments in Dynamics 365 Business Central
     * @param {AttachmentsApiPostAttachmentsForJournalLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    public postAttachmentsForJournalLine(requestParameters: AttachmentsApiPostAttachmentsForJournalLineRequest, options?: RawAxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).postAttachmentsForJournalLine(requestParameters.companyId, requestParameters.journalLineId, requestParameters.contentType, requestParameters.postAttachmentsForJournalLineForJournalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type attachments in Dynamics 365 Business Central
     * @param {AttachmentsApiPostAttachmentsForJournalLineForJournalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    public postAttachmentsForJournalLineForJournal(requestParameters: AttachmentsApiPostAttachmentsForJournalLineForJournalRequest, options?: RawAxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).postAttachmentsForJournalLineForJournal(requestParameters.companyId, requestParameters.journalId, requestParameters.journalLineId, requestParameters.contentType, requestParameters.postAttachmentsForJournalLineForJournalRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetAttachmentsSelectEnum = {
    ParentId: 'parentId',
    Id: 'id',
    FileName: 'fileName',
    ByteSize: 'byteSize',
    Content: 'content',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type GetAttachmentsSelectEnum = typeof GetAttachmentsSelectEnum[keyof typeof GetAttachmentsSelectEnum];
/**
 * @export
 */
export const GetAttachmentsForJournalLineSelectEnum = {
    ParentId: 'parentId',
    Id: 'id',
    FileName: 'fileName',
    ByteSize: 'byteSize',
    Content: 'content',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type GetAttachmentsForJournalLineSelectEnum = typeof GetAttachmentsForJournalLineSelectEnum[keyof typeof GetAttachmentsForJournalLineSelectEnum];
/**
 * @export
 */
export const GetAttachmentsForJournalLineForJournalSelectEnum = {
    ParentId: 'parentId',
    Id: 'id',
    FileName: 'fileName',
    ByteSize: 'byteSize',
    Content: 'content',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type GetAttachmentsForJournalLineForJournalSelectEnum = typeof GetAttachmentsForJournalLineForJournalSelectEnum[keyof typeof GetAttachmentsForJournalLineForJournalSelectEnum];
/**
 * @export
 */
export const ListAttachmentsSelectEnum = {
    ParentId: 'parentId',
    Id: 'id',
    FileName: 'fileName',
    ByteSize: 'byteSize',
    Content: 'content',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type ListAttachmentsSelectEnum = typeof ListAttachmentsSelectEnum[keyof typeof ListAttachmentsSelectEnum];
/**
 * @export
 */
export const ListAttachmentsForJournalLineSelectEnum = {
    ParentId: 'parentId',
    Id: 'id',
    FileName: 'fileName',
    ByteSize: 'byteSize',
    Content: 'content',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type ListAttachmentsForJournalLineSelectEnum = typeof ListAttachmentsForJournalLineSelectEnum[keyof typeof ListAttachmentsForJournalLineSelectEnum];
/**
 * @export
 */
export const ListAttachmentsForJournalLineForJournalSelectEnum = {
    ParentId: 'parentId',
    Id: 'id',
    FileName: 'fileName',
    ByteSize: 'byteSize',
    Content: 'content',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type ListAttachmentsForJournalLineForJournalSelectEnum = typeof ListAttachmentsForJournalLineForJournalSelectEnum[keyof typeof ListAttachmentsForJournalLineForJournalSelectEnum];
