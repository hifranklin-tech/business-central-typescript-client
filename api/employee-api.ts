/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Employee } from '../model';
// @ts-ignore
import type { ListEmployees200Response } from '../model';
// @ts-ignore
import type { PostEmployeeRequest } from '../model';
/**
 * EmployeeApi - axios parameter creator
 * @export
 */
export const EmployeeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type employee in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmployee: async (companyId: string, employeeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteEmployee', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('deleteEmployee', 'employeeId', employeeId)
            const localVarPath = `/companies({company_id})/employees({employee_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type employee for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {Array<GetEmployeeExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetEmployeeSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployee: async (companyId: string, employeeId: string, $expand?: Array<GetEmployeeExpandEnum>, $select?: Array<GetEmployeeSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getEmployee', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getEmployee', 'employeeId', employeeId)
            const localVarPath = `/companies({company_id})/employees({employee_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of employees
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListEmployeesExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListEmployeesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployees: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListEmployeesExpandEnum>, $select?: Array<ListEmployeesSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listEmployees', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/employees`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type employee in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostEmployeeRequest} postEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEmployee: async (companyId: string, employeeId: string, contentType: string, ifMatch: string, postEmployeeRequest: PostEmployeeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchEmployee', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('patchEmployee', 'employeeId', employeeId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchEmployee', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchEmployee', 'ifMatch', ifMatch)
            // verify required parameter 'postEmployeeRequest' is not null or undefined
            assertParamExists('patchEmployee', 'postEmployeeRequest', postEmployeeRequest)
            const localVarPath = `/companies({company_id})/employees({employee_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postEmployeeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type employee in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostEmployeeRequest} postEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEmployee: async (companyId: string, contentType: string, postEmployeeRequest: PostEmployeeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postEmployee', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postEmployee', 'contentType', contentType)
            // verify required parameter 'postEmployeeRequest' is not null or undefined
            assertParamExists('postEmployee', 'postEmployeeRequest', postEmployeeRequest)
            const localVarPath = `/companies({company_id})/employees`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postEmployeeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeApi - functional programming interface
 * @export
 */
export const EmployeeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type employee in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEmployee(companyId: string, employeeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEmployee(companyId, employeeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmployeeApi.deleteEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type employee for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {Array<GetEmployeeExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetEmployeeSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployee(companyId: string, employeeId: string, $expand?: Array<GetEmployeeExpandEnum>, $select?: Array<GetEmployeeSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployee(companyId, employeeId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmployeeApi.getEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of employees
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListEmployeesExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListEmployeesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmployees(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListEmployeesExpandEnum>, $select?: Array<ListEmployeesSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListEmployees200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEmployees(companyId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmployeeApi.listEmployees']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type employee in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} employeeId (v1.0) id for employee
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostEmployeeRequest} postEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEmployee(companyId: string, employeeId: string, contentType: string, ifMatch: string, postEmployeeRequest: PostEmployeeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEmployee(companyId, employeeId, contentType, ifMatch, postEmployeeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmployeeApi.patchEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type employee in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostEmployeeRequest} postEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEmployee(companyId: string, contentType: string, postEmployeeRequest: PostEmployeeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postEmployee(companyId, contentType, postEmployeeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmployeeApi.postEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EmployeeApi - factory interface
 * @export
 */
export const EmployeeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type employee in Dynamics 365 Business Central
         * @param {EmployeeApiDeleteEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmployee(requestParameters: EmployeeApiDeleteEmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteEmployee(requestParameters.companyId, requestParameters.employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type employee for Dynamics 365 Business Central.
         * @param {EmployeeApiGetEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployee(requestParameters: EmployeeApiGetEmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<Employee> {
            return localVarFp.getEmployee(requestParameters.companyId, requestParameters.employeeId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of employees
         * @param {EmployeeApiListEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployees(requestParameters: EmployeeApiListEmployeesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListEmployees200Response> {
            return localVarFp.listEmployees(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type employee in Dynamics 365 Business Central
         * @param {EmployeeApiPatchEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEmployee(requestParameters: EmployeeApiPatchEmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<Employee> {
            return localVarFp.patchEmployee(requestParameters.companyId, requestParameters.employeeId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postEmployeeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type employee in Dynamics 365 Business Central
         * @param {EmployeeApiPostEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEmployee(requestParameters: EmployeeApiPostEmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<Employee> {
            return localVarFp.postEmployee(requestParameters.companyId, requestParameters.contentType, requestParameters.postEmployeeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteEmployee operation in EmployeeApi.
 * @export
 * @interface EmployeeApiDeleteEmployeeRequest
 */
export interface EmployeeApiDeleteEmployeeRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof EmployeeApiDeleteEmployee
     */
    readonly companyId: string

    /**
     * (v1.0) id for employee
     * @type {string}
     * @memberof EmployeeApiDeleteEmployee
     */
    readonly employeeId: string
}

/**
 * Request parameters for getEmployee operation in EmployeeApi.
 * @export
 * @interface EmployeeApiGetEmployeeRequest
 */
export interface EmployeeApiGetEmployeeRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof EmployeeApiGetEmployee
     */
    readonly companyId: string

    /**
     * (v1.0) id for employee
     * @type {string}
     * @memberof EmployeeApiGetEmployee
     */
    readonly employeeId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'picture' | 'defaultDimensions' | 'timeRegistrationEntries'>}
     * @memberof EmployeeApiGetEmployee
     */
    readonly $expand?: Array<GetEmployeeExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'displayName' | 'givenName' | 'middleName' | 'surname' | 'jobTitle' | 'address' | 'phoneNumber' | 'mobilePhone' | 'email' | 'personalEmail' | 'employmentDate' | 'terminationDate' | 'status' | 'birthDate' | 'statisticsGroupCode' | 'lastModifiedDateTime'>}
     * @memberof EmployeeApiGetEmployee
     */
    readonly $select?: Array<GetEmployeeSelectEnum>
}

/**
 * Request parameters for listEmployees operation in EmployeeApi.
 * @export
 * @interface EmployeeApiListEmployeesRequest
 */
export interface EmployeeApiListEmployeesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof EmployeeApiListEmployees
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof EmployeeApiListEmployees
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof EmployeeApiListEmployees
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof EmployeeApiListEmployees
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof EmployeeApiListEmployees
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'picture' | 'defaultDimensions' | 'timeRegistrationEntries'>}
     * @memberof EmployeeApiListEmployees
     */
    readonly $expand?: Array<ListEmployeesExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'displayName' | 'givenName' | 'middleName' | 'surname' | 'jobTitle' | 'address' | 'phoneNumber' | 'mobilePhone' | 'email' | 'personalEmail' | 'employmentDate' | 'terminationDate' | 'status' | 'birthDate' | 'statisticsGroupCode' | 'lastModifiedDateTime'>}
     * @memberof EmployeeApiListEmployees
     */
    readonly $select?: Array<ListEmployeesSelectEnum>
}

/**
 * Request parameters for patchEmployee operation in EmployeeApi.
 * @export
 * @interface EmployeeApiPatchEmployeeRequest
 */
export interface EmployeeApiPatchEmployeeRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof EmployeeApiPatchEmployee
     */
    readonly companyId: string

    /**
     * (v1.0) id for employee
     * @type {string}
     * @memberof EmployeeApiPatchEmployee
     */
    readonly employeeId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof EmployeeApiPatchEmployee
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof EmployeeApiPatchEmployee
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostEmployeeRequest}
     * @memberof EmployeeApiPatchEmployee
     */
    readonly postEmployeeRequest: PostEmployeeRequest
}

/**
 * Request parameters for postEmployee operation in EmployeeApi.
 * @export
 * @interface EmployeeApiPostEmployeeRequest
 */
export interface EmployeeApiPostEmployeeRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof EmployeeApiPostEmployee
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof EmployeeApiPostEmployee
     */
    readonly contentType: string

    /**
     * 
     * @type {PostEmployeeRequest}
     * @memberof EmployeeApiPostEmployee
     */
    readonly postEmployeeRequest: PostEmployeeRequest
}

/**
 * EmployeeApi - object-oriented interface
 * @export
 * @class EmployeeApi
 * @extends {BaseAPI}
 */
export class EmployeeApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type employee in Dynamics 365 Business Central
     * @param {EmployeeApiDeleteEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public deleteEmployee(requestParameters: EmployeeApiDeleteEmployeeRequest, options?: RawAxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).deleteEmployee(requestParameters.companyId, requestParameters.employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type employee for Dynamics 365 Business Central.
     * @param {EmployeeApiGetEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public getEmployee(requestParameters: EmployeeApiGetEmployeeRequest, options?: RawAxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).getEmployee(requestParameters.companyId, requestParameters.employeeId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of employees
     * @param {EmployeeApiListEmployeesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public listEmployees(requestParameters: EmployeeApiListEmployeesRequest, options?: RawAxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).listEmployees(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type employee in Dynamics 365 Business Central
     * @param {EmployeeApiPatchEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public patchEmployee(requestParameters: EmployeeApiPatchEmployeeRequest, options?: RawAxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).patchEmployee(requestParameters.companyId, requestParameters.employeeId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postEmployeeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type employee in Dynamics 365 Business Central
     * @param {EmployeeApiPostEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public postEmployee(requestParameters: EmployeeApiPostEmployeeRequest, options?: RawAxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).postEmployee(requestParameters.companyId, requestParameters.contentType, requestParameters.postEmployeeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetEmployeeExpandEnum = {
    Picture: 'picture',
    DefaultDimensions: 'defaultDimensions',
    TimeRegistrationEntries: 'timeRegistrationEntries'
} as const;
export type GetEmployeeExpandEnum = typeof GetEmployeeExpandEnum[keyof typeof GetEmployeeExpandEnum];
/**
 * @export
 */
export const GetEmployeeSelectEnum = {
    Id: 'id',
    Number: 'number',
    DisplayName: 'displayName',
    GivenName: 'givenName',
    MiddleName: 'middleName',
    Surname: 'surname',
    JobTitle: 'jobTitle',
    Address: 'address',
    PhoneNumber: 'phoneNumber',
    MobilePhone: 'mobilePhone',
    Email: 'email',
    PersonalEmail: 'personalEmail',
    EmploymentDate: 'employmentDate',
    TerminationDate: 'terminationDate',
    Status: 'status',
    BirthDate: 'birthDate',
    StatisticsGroupCode: 'statisticsGroupCode',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type GetEmployeeSelectEnum = typeof GetEmployeeSelectEnum[keyof typeof GetEmployeeSelectEnum];
/**
 * @export
 */
export const ListEmployeesExpandEnum = {
    Picture: 'picture',
    DefaultDimensions: 'defaultDimensions',
    TimeRegistrationEntries: 'timeRegistrationEntries'
} as const;
export type ListEmployeesExpandEnum = typeof ListEmployeesExpandEnum[keyof typeof ListEmployeesExpandEnum];
/**
 * @export
 */
export const ListEmployeesSelectEnum = {
    Id: 'id',
    Number: 'number',
    DisplayName: 'displayName',
    GivenName: 'givenName',
    MiddleName: 'middleName',
    Surname: 'surname',
    JobTitle: 'jobTitle',
    Address: 'address',
    PhoneNumber: 'phoneNumber',
    MobilePhone: 'mobilePhone',
    Email: 'email',
    PersonalEmail: 'personalEmail',
    EmploymentDate: 'employmentDate',
    TerminationDate: 'terminationDate',
    Status: 'status',
    BirthDate: 'birthDate',
    StatisticsGroupCode: 'statisticsGroupCode',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type ListEmployeesSelectEnum = typeof ListEmployeesSelectEnum[keyof typeof ListEmployeesSelectEnum];
