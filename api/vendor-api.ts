/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ListVendors200Response } from '../model';
// @ts-ignore
import type { PostVendorRequest } from '../model';
// @ts-ignore
import type { Vendor } from '../model';
/**
 * VendorApi - axios parameter creator
 * @export
 */
export const VendorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type vendor in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} vendorId (v1.0) id for vendor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVendor: async (companyId: string, vendorId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteVendor', 'companyId', companyId)
            // verify required parameter 'vendorId' is not null or undefined
            assertParamExists('deleteVendor', 'vendorId', vendorId)
            const localVarPath = `/companies({company_id})/vendors({vendor_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"vendor_id"}}`, encodeURIComponent(String(vendorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type vendor for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} vendorId (v1.0) id for vendor
         * @param {Array<GetVendorExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetVendorSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVendor: async (companyId: string, vendorId: string, $expand?: Array<GetVendorExpandEnum>, $select?: Array<GetVendorSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getVendor', 'companyId', companyId)
            // verify required parameter 'vendorId' is not null or undefined
            assertParamExists('getVendor', 'vendorId', vendorId)
            const localVarPath = `/companies({company_id})/vendors({vendor_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"vendor_id"}}`, encodeURIComponent(String(vendorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of vendors
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListVendorsExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListVendorsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVendors: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListVendorsExpandEnum>, $select?: Array<ListVendorsSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listVendors', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/vendors`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type vendor in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} vendorId (v1.0) id for vendor
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostVendorRequest} postVendorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVendor: async (companyId: string, vendorId: string, contentType: string, ifMatch: string, postVendorRequest: PostVendorRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchVendor', 'companyId', companyId)
            // verify required parameter 'vendorId' is not null or undefined
            assertParamExists('patchVendor', 'vendorId', vendorId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchVendor', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchVendor', 'ifMatch', ifMatch)
            // verify required parameter 'postVendorRequest' is not null or undefined
            assertParamExists('patchVendor', 'postVendorRequest', postVendorRequest)
            const localVarPath = `/companies({company_id})/vendors({vendor_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"vendor_id"}}`, encodeURIComponent(String(vendorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postVendorRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type vendor in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostVendorRequest} postVendorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postVendor: async (companyId: string, contentType: string, postVendorRequest: PostVendorRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postVendor', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postVendor', 'contentType', contentType)
            // verify required parameter 'postVendorRequest' is not null or undefined
            assertParamExists('postVendor', 'postVendorRequest', postVendorRequest)
            const localVarPath = `/companies({company_id})/vendors`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postVendorRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VendorApi - functional programming interface
 * @export
 */
export const VendorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VendorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type vendor in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} vendorId (v1.0) id for vendor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVendor(companyId: string, vendorId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVendor(companyId, vendorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorApi.deleteVendor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type vendor for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} vendorId (v1.0) id for vendor
         * @param {Array<GetVendorExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetVendorSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVendor(companyId: string, vendorId: string, $expand?: Array<GetVendorExpandEnum>, $select?: Array<GetVendorSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vendor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVendor(companyId, vendorId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorApi.getVendor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of vendors
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListVendorsExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListVendorsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVendors(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListVendorsExpandEnum>, $select?: Array<ListVendorsSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListVendors200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVendors(companyId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorApi.listVendors']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type vendor in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} vendorId (v1.0) id for vendor
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostVendorRequest} postVendorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchVendor(companyId: string, vendorId: string, contentType: string, ifMatch: string, postVendorRequest: PostVendorRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vendor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchVendor(companyId, vendorId, contentType, ifMatch, postVendorRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorApi.patchVendor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type vendor in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostVendorRequest} postVendorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postVendor(companyId: string, contentType: string, postVendorRequest: PostVendorRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vendor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postVendor(companyId, contentType, postVendorRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorApi.postVendor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VendorApi - factory interface
 * @export
 */
export const VendorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VendorApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type vendor in Dynamics 365 Business Central
         * @param {VendorApiDeleteVendorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVendor(requestParameters: VendorApiDeleteVendorRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteVendor(requestParameters.companyId, requestParameters.vendorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type vendor for Dynamics 365 Business Central.
         * @param {VendorApiGetVendorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVendor(requestParameters: VendorApiGetVendorRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vendor> {
            return localVarFp.getVendor(requestParameters.companyId, requestParameters.vendorId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of vendors
         * @param {VendorApiListVendorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVendors(requestParameters: VendorApiListVendorsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListVendors200Response> {
            return localVarFp.listVendors(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type vendor in Dynamics 365 Business Central
         * @param {VendorApiPatchVendorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVendor(requestParameters: VendorApiPatchVendorRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vendor> {
            return localVarFp.patchVendor(requestParameters.companyId, requestParameters.vendorId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postVendorRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type vendor in Dynamics 365 Business Central
         * @param {VendorApiPostVendorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postVendor(requestParameters: VendorApiPostVendorRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vendor> {
            return localVarFp.postVendor(requestParameters.companyId, requestParameters.contentType, requestParameters.postVendorRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteVendor operation in VendorApi.
 * @export
 * @interface VendorApiDeleteVendorRequest
 */
export interface VendorApiDeleteVendorRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof VendorApiDeleteVendor
     */
    readonly companyId: string

    /**
     * (v1.0) id for vendor
     * @type {string}
     * @memberof VendorApiDeleteVendor
     */
    readonly vendorId: string
}

/**
 * Request parameters for getVendor operation in VendorApi.
 * @export
 * @interface VendorApiGetVendorRequest
 */
export interface VendorApiGetVendorRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof VendorApiGetVendor
     */
    readonly companyId: string

    /**
     * (v1.0) id for vendor
     * @type {string}
     * @memberof VendorApiGetVendor
     */
    readonly vendorId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'picture' | 'defaultDimensions' | 'currency' | 'paymentTerm' | 'paymentMethod'>}
     * @memberof VendorApiGetVendor
     */
    readonly $expand?: Array<GetVendorExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'displayName' | 'address' | 'phoneNumber' | 'email' | 'website' | 'taxRegistrationNumber' | 'currencyId' | 'currencyCode' | 'irs1099Code' | 'paymentTermsId' | 'paymentMethodId' | 'taxLiable' | 'blocked' | 'balance' | 'lastModifiedDateTime'>}
     * @memberof VendorApiGetVendor
     */
    readonly $select?: Array<GetVendorSelectEnum>
}

/**
 * Request parameters for listVendors operation in VendorApi.
 * @export
 * @interface VendorApiListVendorsRequest
 */
export interface VendorApiListVendorsRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof VendorApiListVendors
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof VendorApiListVendors
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof VendorApiListVendors
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof VendorApiListVendors
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof VendorApiListVendors
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'picture' | 'defaultDimensions' | 'currency' | 'paymentTerm' | 'paymentMethod'>}
     * @memberof VendorApiListVendors
     */
    readonly $expand?: Array<ListVendorsExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'displayName' | 'address' | 'phoneNumber' | 'email' | 'website' | 'taxRegistrationNumber' | 'currencyId' | 'currencyCode' | 'irs1099Code' | 'paymentTermsId' | 'paymentMethodId' | 'taxLiable' | 'blocked' | 'balance' | 'lastModifiedDateTime'>}
     * @memberof VendorApiListVendors
     */
    readonly $select?: Array<ListVendorsSelectEnum>
}

/**
 * Request parameters for patchVendor operation in VendorApi.
 * @export
 * @interface VendorApiPatchVendorRequest
 */
export interface VendorApiPatchVendorRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof VendorApiPatchVendor
     */
    readonly companyId: string

    /**
     * (v1.0) id for vendor
     * @type {string}
     * @memberof VendorApiPatchVendor
     */
    readonly vendorId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof VendorApiPatchVendor
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof VendorApiPatchVendor
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostVendorRequest}
     * @memberof VendorApiPatchVendor
     */
    readonly postVendorRequest: PostVendorRequest
}

/**
 * Request parameters for postVendor operation in VendorApi.
 * @export
 * @interface VendorApiPostVendorRequest
 */
export interface VendorApiPostVendorRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof VendorApiPostVendor
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof VendorApiPostVendor
     */
    readonly contentType: string

    /**
     * 
     * @type {PostVendorRequest}
     * @memberof VendorApiPostVendor
     */
    readonly postVendorRequest: PostVendorRequest
}

/**
 * VendorApi - object-oriented interface
 * @export
 * @class VendorApi
 * @extends {BaseAPI}
 */
export class VendorApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type vendor in Dynamics 365 Business Central
     * @param {VendorApiDeleteVendorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorApi
     */
    public deleteVendor(requestParameters: VendorApiDeleteVendorRequest, options?: RawAxiosRequestConfig) {
        return VendorApiFp(this.configuration).deleteVendor(requestParameters.companyId, requestParameters.vendorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type vendor for Dynamics 365 Business Central.
     * @param {VendorApiGetVendorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorApi
     */
    public getVendor(requestParameters: VendorApiGetVendorRequest, options?: RawAxiosRequestConfig) {
        return VendorApiFp(this.configuration).getVendor(requestParameters.companyId, requestParameters.vendorId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of vendors
     * @param {VendorApiListVendorsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorApi
     */
    public listVendors(requestParameters: VendorApiListVendorsRequest, options?: RawAxiosRequestConfig) {
        return VendorApiFp(this.configuration).listVendors(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type vendor in Dynamics 365 Business Central
     * @param {VendorApiPatchVendorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorApi
     */
    public patchVendor(requestParameters: VendorApiPatchVendorRequest, options?: RawAxiosRequestConfig) {
        return VendorApiFp(this.configuration).patchVendor(requestParameters.companyId, requestParameters.vendorId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postVendorRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type vendor in Dynamics 365 Business Central
     * @param {VendorApiPostVendorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorApi
     */
    public postVendor(requestParameters: VendorApiPostVendorRequest, options?: RawAxiosRequestConfig) {
        return VendorApiFp(this.configuration).postVendor(requestParameters.companyId, requestParameters.contentType, requestParameters.postVendorRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetVendorExpandEnum = {
    Picture: 'picture',
    DefaultDimensions: 'defaultDimensions',
    Currency: 'currency',
    PaymentTerm: 'paymentTerm',
    PaymentMethod: 'paymentMethod'
} as const;
export type GetVendorExpandEnum = typeof GetVendorExpandEnum[keyof typeof GetVendorExpandEnum];
/**
 * @export
 */
export const GetVendorSelectEnum = {
    Id: 'id',
    Number: 'number',
    DisplayName: 'displayName',
    Address: 'address',
    PhoneNumber: 'phoneNumber',
    Email: 'email',
    Website: 'website',
    TaxRegistrationNumber: 'taxRegistrationNumber',
    CurrencyId: 'currencyId',
    CurrencyCode: 'currencyCode',
    Irs1099Code: 'irs1099Code',
    PaymentTermsId: 'paymentTermsId',
    PaymentMethodId: 'paymentMethodId',
    TaxLiable: 'taxLiable',
    Blocked: 'blocked',
    Balance: 'balance',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type GetVendorSelectEnum = typeof GetVendorSelectEnum[keyof typeof GetVendorSelectEnum];
/**
 * @export
 */
export const ListVendorsExpandEnum = {
    Picture: 'picture',
    DefaultDimensions: 'defaultDimensions',
    Currency: 'currency',
    PaymentTerm: 'paymentTerm',
    PaymentMethod: 'paymentMethod'
} as const;
export type ListVendorsExpandEnum = typeof ListVendorsExpandEnum[keyof typeof ListVendorsExpandEnum];
/**
 * @export
 */
export const ListVendorsSelectEnum = {
    Id: 'id',
    Number: 'number',
    DisplayName: 'displayName',
    Address: 'address',
    PhoneNumber: 'phoneNumber',
    Email: 'email',
    Website: 'website',
    TaxRegistrationNumber: 'taxRegistrationNumber',
    CurrencyId: 'currencyId',
    CurrencyCode: 'currencyCode',
    Irs1099Code: 'irs1099Code',
    PaymentTermsId: 'paymentTermsId',
    PaymentMethodId: 'paymentMethodId',
    TaxLiable: 'taxLiable',
    Blocked: 'blocked',
    Balance: 'balance',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type ListVendorsSelectEnum = typeof ListVendorsSelectEnum[keyof typeof ListVendorsSelectEnum];
