/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ListSalesOrderLinesForSalesOrder200Response } from '../model';
// @ts-ignore
import type { PostSalesOrderLineForSalesOrderRequest } from '../model';
// @ts-ignore
import type { SalesOrderLine } from '../model';
/**
 * SalesOrderLineApi - axios parameter creator
 * @export
 */
export const SalesOrderLineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type salesOrderLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderLineId (v1.0) id for salesOrderLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesOrderLine: async (companyId: string, salesOrderLineId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteSalesOrderLine', 'companyId', companyId)
            // verify required parameter 'salesOrderLineId' is not null or undefined
            assertParamExists('deleteSalesOrderLine', 'salesOrderLineId', salesOrderLineId)
            const localVarPath = `/companies({company_id})/salesOrderLines('{salesOrderLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesOrderLine_id"}}`, encodeURIComponent(String(salesOrderLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an object of type salesOrderLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderId (v1.0) id for salesOrder
         * @param {string} salesOrderLineId (v1.0) id for salesOrderLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesOrderLineForSalesOrder: async (companyId: string, salesOrderId: string, salesOrderLineId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteSalesOrderLineForSalesOrder', 'companyId', companyId)
            // verify required parameter 'salesOrderId' is not null or undefined
            assertParamExists('deleteSalesOrderLineForSalesOrder', 'salesOrderId', salesOrderId)
            // verify required parameter 'salesOrderLineId' is not null or undefined
            assertParamExists('deleteSalesOrderLineForSalesOrder', 'salesOrderLineId', salesOrderLineId)
            const localVarPath = `/companies({company_id})/salesOrders({salesOrder_id})/salesOrderLines('{salesOrderLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesOrder_id"}}`, encodeURIComponent(String(salesOrderId)))
                .replace(`{${"salesOrderLine_id"}}`, encodeURIComponent(String(salesOrderLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesOrderLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderLineId (v1.0) id for salesOrderLine
         * @param {Array<GetSalesOrderLineExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesOrderLineSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesOrderLine: async (companyId: string, salesOrderLineId: string, $expand?: Array<GetSalesOrderLineExpandEnum>, $select?: Array<GetSalesOrderLineSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSalesOrderLine', 'companyId', companyId)
            // verify required parameter 'salesOrderLineId' is not null or undefined
            assertParamExists('getSalesOrderLine', 'salesOrderLineId', salesOrderLineId)
            const localVarPath = `/companies({company_id})/salesOrderLines('{salesOrderLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesOrderLine_id"}}`, encodeURIComponent(String(salesOrderLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesOrderLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderId (v1.0) id for salesOrder
         * @param {string} salesOrderLineId (v1.0) id for salesOrderLine
         * @param {Array<GetSalesOrderLineForSalesOrderExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesOrderLineForSalesOrderSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesOrderLineForSalesOrder: async (companyId: string, salesOrderId: string, salesOrderLineId: string, $expand?: Array<GetSalesOrderLineForSalesOrderExpandEnum>, $select?: Array<GetSalesOrderLineForSalesOrderSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSalesOrderLineForSalesOrder', 'companyId', companyId)
            // verify required parameter 'salesOrderId' is not null or undefined
            assertParamExists('getSalesOrderLineForSalesOrder', 'salesOrderId', salesOrderId)
            // verify required parameter 'salesOrderLineId' is not null or undefined
            assertParamExists('getSalesOrderLineForSalesOrder', 'salesOrderLineId', salesOrderLineId)
            const localVarPath = `/companies({company_id})/salesOrders({salesOrder_id})/salesOrderLines('{salesOrderLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesOrder_id"}}`, encodeURIComponent(String(salesOrderId)))
                .replace(`{${"salesOrderLine_id"}}`, encodeURIComponent(String(salesOrderLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of salesOrderLines
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesOrderLinesExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesOrderLinesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesOrderLines: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesOrderLinesExpandEnum>, $select?: Array<ListSalesOrderLinesSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listSalesOrderLines', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/salesOrderLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of salesOrderLines
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderId (v1.0) id for salesOrder
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesOrderLinesForSalesOrderExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesOrderLinesForSalesOrderSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesOrderLinesForSalesOrder: async (companyId: string, salesOrderId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesOrderLinesForSalesOrderExpandEnum>, $select?: Array<ListSalesOrderLinesForSalesOrderSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listSalesOrderLinesForSalesOrder', 'companyId', companyId)
            // verify required parameter 'salesOrderId' is not null or undefined
            assertParamExists('listSalesOrderLinesForSalesOrder', 'salesOrderId', salesOrderId)
            const localVarPath = `/companies({company_id})/salesOrders({salesOrder_id})/salesOrderLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesOrder_id"}}`, encodeURIComponent(String(salesOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type salesOrderLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderLineId (v1.0) id for salesOrderLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesOrderLineForSalesOrderRequest} postSalesOrderLineForSalesOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesOrderLine: async (companyId: string, salesOrderLineId: string, contentType: string, ifMatch: string, postSalesOrderLineForSalesOrderRequest: PostSalesOrderLineForSalesOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchSalesOrderLine', 'companyId', companyId)
            // verify required parameter 'salesOrderLineId' is not null or undefined
            assertParamExists('patchSalesOrderLine', 'salesOrderLineId', salesOrderLineId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchSalesOrderLine', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchSalesOrderLine', 'ifMatch', ifMatch)
            // verify required parameter 'postSalesOrderLineForSalesOrderRequest' is not null or undefined
            assertParamExists('patchSalesOrderLine', 'postSalesOrderLineForSalesOrderRequest', postSalesOrderLineForSalesOrderRequest)
            const localVarPath = `/companies({company_id})/salesOrderLines('{salesOrderLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesOrderLine_id"}}`, encodeURIComponent(String(salesOrderLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesOrderLineForSalesOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type salesOrderLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderId (v1.0) id for salesOrder
         * @param {string} salesOrderLineId (v1.0) id for salesOrderLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesOrderLineForSalesOrderRequest} postSalesOrderLineForSalesOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesOrderLineForSalesOrder: async (companyId: string, salesOrderId: string, salesOrderLineId: string, contentType: string, ifMatch: string, postSalesOrderLineForSalesOrderRequest: PostSalesOrderLineForSalesOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchSalesOrderLineForSalesOrder', 'companyId', companyId)
            // verify required parameter 'salesOrderId' is not null or undefined
            assertParamExists('patchSalesOrderLineForSalesOrder', 'salesOrderId', salesOrderId)
            // verify required parameter 'salesOrderLineId' is not null or undefined
            assertParamExists('patchSalesOrderLineForSalesOrder', 'salesOrderLineId', salesOrderLineId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchSalesOrderLineForSalesOrder', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchSalesOrderLineForSalesOrder', 'ifMatch', ifMatch)
            // verify required parameter 'postSalesOrderLineForSalesOrderRequest' is not null or undefined
            assertParamExists('patchSalesOrderLineForSalesOrder', 'postSalesOrderLineForSalesOrderRequest', postSalesOrderLineForSalesOrderRequest)
            const localVarPath = `/companies({company_id})/salesOrders({salesOrder_id})/salesOrderLines('{salesOrderLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesOrder_id"}}`, encodeURIComponent(String(salesOrderId)))
                .replace(`{${"salesOrderLine_id"}}`, encodeURIComponent(String(salesOrderLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesOrderLineForSalesOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type salesOrderLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesOrderLineForSalesOrderRequest} postSalesOrderLineForSalesOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesOrderLine: async (companyId: string, contentType: string, postSalesOrderLineForSalesOrderRequest: PostSalesOrderLineForSalesOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postSalesOrderLine', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postSalesOrderLine', 'contentType', contentType)
            // verify required parameter 'postSalesOrderLineForSalesOrderRequest' is not null or undefined
            assertParamExists('postSalesOrderLine', 'postSalesOrderLineForSalesOrderRequest', postSalesOrderLineForSalesOrderRequest)
            const localVarPath = `/companies({company_id})/salesOrderLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesOrderLineForSalesOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type salesOrderLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderId (v1.0) id for salesOrder
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesOrderLineForSalesOrderRequest} postSalesOrderLineForSalesOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesOrderLineForSalesOrder: async (companyId: string, salesOrderId: string, contentType: string, postSalesOrderLineForSalesOrderRequest: PostSalesOrderLineForSalesOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postSalesOrderLineForSalesOrder', 'companyId', companyId)
            // verify required parameter 'salesOrderId' is not null or undefined
            assertParamExists('postSalesOrderLineForSalesOrder', 'salesOrderId', salesOrderId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postSalesOrderLineForSalesOrder', 'contentType', contentType)
            // verify required parameter 'postSalesOrderLineForSalesOrderRequest' is not null or undefined
            assertParamExists('postSalesOrderLineForSalesOrder', 'postSalesOrderLineForSalesOrderRequest', postSalesOrderLineForSalesOrderRequest)
            const localVarPath = `/companies({company_id})/salesOrders({salesOrder_id})/salesOrderLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesOrder_id"}}`, encodeURIComponent(String(salesOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesOrderLineForSalesOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalesOrderLineApi - functional programming interface
 * @export
 */
export const SalesOrderLineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalesOrderLineApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type salesOrderLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderLineId (v1.0) id for salesOrderLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalesOrderLine(companyId: string, salesOrderLineId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalesOrderLine(companyId, salesOrderLineId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesOrderLineApi.deleteSalesOrderLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes an object of type salesOrderLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderId (v1.0) id for salesOrder
         * @param {string} salesOrderLineId (v1.0) id for salesOrderLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalesOrderLineForSalesOrder(companyId: string, salesOrderId: string, salesOrderLineId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalesOrderLineForSalesOrder(companyId, salesOrderId, salesOrderLineId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesOrderLineApi.deleteSalesOrderLineForSalesOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesOrderLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderLineId (v1.0) id for salesOrderLine
         * @param {Array<GetSalesOrderLineExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesOrderLineSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesOrderLine(companyId: string, salesOrderLineId: string, $expand?: Array<GetSalesOrderLineExpandEnum>, $select?: Array<GetSalesOrderLineSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesOrderLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesOrderLine(companyId, salesOrderLineId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesOrderLineApi.getSalesOrderLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesOrderLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderId (v1.0) id for salesOrder
         * @param {string} salesOrderLineId (v1.0) id for salesOrderLine
         * @param {Array<GetSalesOrderLineForSalesOrderExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesOrderLineForSalesOrderSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesOrderLineForSalesOrder(companyId: string, salesOrderId: string, salesOrderLineId: string, $expand?: Array<GetSalesOrderLineForSalesOrderExpandEnum>, $select?: Array<GetSalesOrderLineForSalesOrderSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesOrderLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesOrderLineForSalesOrder(companyId, salesOrderId, salesOrderLineId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesOrderLineApi.getSalesOrderLineForSalesOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of salesOrderLines
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesOrderLinesExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesOrderLinesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSalesOrderLines(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesOrderLinesExpandEnum>, $select?: Array<ListSalesOrderLinesSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListSalesOrderLinesForSalesOrder200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSalesOrderLines(companyId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesOrderLineApi.listSalesOrderLines']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of salesOrderLines
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderId (v1.0) id for salesOrder
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesOrderLinesForSalesOrderExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesOrderLinesForSalesOrderSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSalesOrderLinesForSalesOrder(companyId: string, salesOrderId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesOrderLinesForSalesOrderExpandEnum>, $select?: Array<ListSalesOrderLinesForSalesOrderSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListSalesOrderLinesForSalesOrder200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSalesOrderLinesForSalesOrder(companyId, salesOrderId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesOrderLineApi.listSalesOrderLinesForSalesOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type salesOrderLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderLineId (v1.0) id for salesOrderLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesOrderLineForSalesOrderRequest} postSalesOrderLineForSalesOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSalesOrderLine(companyId: string, salesOrderLineId: string, contentType: string, ifMatch: string, postSalesOrderLineForSalesOrderRequest: PostSalesOrderLineForSalesOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesOrderLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSalesOrderLine(companyId, salesOrderLineId, contentType, ifMatch, postSalesOrderLineForSalesOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesOrderLineApi.patchSalesOrderLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type salesOrderLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderId (v1.0) id for salesOrder
         * @param {string} salesOrderLineId (v1.0) id for salesOrderLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesOrderLineForSalesOrderRequest} postSalesOrderLineForSalesOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSalesOrderLineForSalesOrder(companyId: string, salesOrderId: string, salesOrderLineId: string, contentType: string, ifMatch: string, postSalesOrderLineForSalesOrderRequest: PostSalesOrderLineForSalesOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesOrderLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSalesOrderLineForSalesOrder(companyId, salesOrderId, salesOrderLineId, contentType, ifMatch, postSalesOrderLineForSalesOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesOrderLineApi.patchSalesOrderLineForSalesOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type salesOrderLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesOrderLineForSalesOrderRequest} postSalesOrderLineForSalesOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSalesOrderLine(companyId: string, contentType: string, postSalesOrderLineForSalesOrderRequest: PostSalesOrderLineForSalesOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesOrderLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSalesOrderLine(companyId, contentType, postSalesOrderLineForSalesOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesOrderLineApi.postSalesOrderLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type salesOrderLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesOrderId (v1.0) id for salesOrder
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesOrderLineForSalesOrderRequest} postSalesOrderLineForSalesOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSalesOrderLineForSalesOrder(companyId: string, salesOrderId: string, contentType: string, postSalesOrderLineForSalesOrderRequest: PostSalesOrderLineForSalesOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesOrderLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSalesOrderLineForSalesOrder(companyId, salesOrderId, contentType, postSalesOrderLineForSalesOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesOrderLineApi.postSalesOrderLineForSalesOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SalesOrderLineApi - factory interface
 * @export
 */
export const SalesOrderLineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalesOrderLineApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type salesOrderLine in Dynamics 365 Business Central
         * @param {SalesOrderLineApiDeleteSalesOrderLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesOrderLine(requestParameters: SalesOrderLineApiDeleteSalesOrderLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSalesOrderLine(requestParameters.companyId, requestParameters.salesOrderLineId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an object of type salesOrderLine in Dynamics 365 Business Central
         * @param {SalesOrderLineApiDeleteSalesOrderLineForSalesOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesOrderLineForSalesOrder(requestParameters: SalesOrderLineApiDeleteSalesOrderLineForSalesOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSalesOrderLineForSalesOrder(requestParameters.companyId, requestParameters.salesOrderId, requestParameters.salesOrderLineId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesOrderLine for Dynamics 365 Business Central.
         * @param {SalesOrderLineApiGetSalesOrderLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesOrderLine(requestParameters: SalesOrderLineApiGetSalesOrderLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesOrderLine> {
            return localVarFp.getSalesOrderLine(requestParameters.companyId, requestParameters.salesOrderLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesOrderLine for Dynamics 365 Business Central.
         * @param {SalesOrderLineApiGetSalesOrderLineForSalesOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesOrderLineForSalesOrder(requestParameters: SalesOrderLineApiGetSalesOrderLineForSalesOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesOrderLine> {
            return localVarFp.getSalesOrderLineForSalesOrder(requestParameters.companyId, requestParameters.salesOrderId, requestParameters.salesOrderLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of salesOrderLines
         * @param {SalesOrderLineApiListSalesOrderLinesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesOrderLines(requestParameters: SalesOrderLineApiListSalesOrderLinesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListSalesOrderLinesForSalesOrder200Response> {
            return localVarFp.listSalesOrderLines(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of salesOrderLines
         * @param {SalesOrderLineApiListSalesOrderLinesForSalesOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesOrderLinesForSalesOrder(requestParameters: SalesOrderLineApiListSalesOrderLinesForSalesOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListSalesOrderLinesForSalesOrder200Response> {
            return localVarFp.listSalesOrderLinesForSalesOrder(requestParameters.companyId, requestParameters.salesOrderId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type salesOrderLine in Dynamics 365 Business Central
         * @param {SalesOrderLineApiPatchSalesOrderLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesOrderLine(requestParameters: SalesOrderLineApiPatchSalesOrderLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesOrderLine> {
            return localVarFp.patchSalesOrderLine(requestParameters.companyId, requestParameters.salesOrderLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesOrderLineForSalesOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type salesOrderLine in Dynamics 365 Business Central
         * @param {SalesOrderLineApiPatchSalesOrderLineForSalesOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesOrderLineForSalesOrder(requestParameters: SalesOrderLineApiPatchSalesOrderLineForSalesOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesOrderLine> {
            return localVarFp.patchSalesOrderLineForSalesOrder(requestParameters.companyId, requestParameters.salesOrderId, requestParameters.salesOrderLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesOrderLineForSalesOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type salesOrderLine in Dynamics 365 Business Central
         * @param {SalesOrderLineApiPostSalesOrderLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesOrderLine(requestParameters: SalesOrderLineApiPostSalesOrderLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesOrderLine> {
            return localVarFp.postSalesOrderLine(requestParameters.companyId, requestParameters.contentType, requestParameters.postSalesOrderLineForSalesOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type salesOrderLine in Dynamics 365 Business Central
         * @param {SalesOrderLineApiPostSalesOrderLineForSalesOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesOrderLineForSalesOrder(requestParameters: SalesOrderLineApiPostSalesOrderLineForSalesOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesOrderLine> {
            return localVarFp.postSalesOrderLineForSalesOrder(requestParameters.companyId, requestParameters.salesOrderId, requestParameters.contentType, requestParameters.postSalesOrderLineForSalesOrderRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteSalesOrderLine operation in SalesOrderLineApi.
 * @export
 * @interface SalesOrderLineApiDeleteSalesOrderLineRequest
 */
export interface SalesOrderLineApiDeleteSalesOrderLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesOrderLineApiDeleteSalesOrderLine
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesOrderLine
     * @type {string}
     * @memberof SalesOrderLineApiDeleteSalesOrderLine
     */
    readonly salesOrderLineId: string
}

/**
 * Request parameters for deleteSalesOrderLineForSalesOrder operation in SalesOrderLineApi.
 * @export
 * @interface SalesOrderLineApiDeleteSalesOrderLineForSalesOrderRequest
 */
export interface SalesOrderLineApiDeleteSalesOrderLineForSalesOrderRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesOrderLineApiDeleteSalesOrderLineForSalesOrder
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesOrder
     * @type {string}
     * @memberof SalesOrderLineApiDeleteSalesOrderLineForSalesOrder
     */
    readonly salesOrderId: string

    /**
     * (v1.0) id for salesOrderLine
     * @type {string}
     * @memberof SalesOrderLineApiDeleteSalesOrderLineForSalesOrder
     */
    readonly salesOrderLineId: string
}

/**
 * Request parameters for getSalesOrderLine operation in SalesOrderLineApi.
 * @export
 * @interface SalesOrderLineApiGetSalesOrderLineRequest
 */
export interface SalesOrderLineApiGetSalesOrderLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesOrderLineApiGetSalesOrderLine
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesOrderLine
     * @type {string}
     * @memberof SalesOrderLineApiGetSalesOrderLine
     */
    readonly salesOrderLineId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'item' | 'account'>}
     * @memberof SalesOrderLineApiGetSalesOrderLine
     */
    readonly $expand?: Array<GetSalesOrderLineExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'documentId' | 'sequence' | 'itemId' | 'accountId' | 'lineType' | 'lineDetails' | 'description' | 'unitOfMeasureId' | 'unitOfMeasure' | 'quantity' | 'unitPrice' | 'discountAmount' | 'discountPercent' | 'discountAppliedBeforeTax' | 'amountExcludingTax' | 'taxCode' | 'taxPercent' | 'totalTaxAmount' | 'amountIncludingTax' | 'invoiceDiscountAllocation' | 'netAmount' | 'netTaxAmount' | 'netAmountIncludingTax' | 'shipmentDate' | 'shippedQuantity' | 'invoicedQuantity' | 'invoiceQuantity' | 'shipQuantity'>}
     * @memberof SalesOrderLineApiGetSalesOrderLine
     */
    readonly $select?: Array<GetSalesOrderLineSelectEnum>
}

/**
 * Request parameters for getSalesOrderLineForSalesOrder operation in SalesOrderLineApi.
 * @export
 * @interface SalesOrderLineApiGetSalesOrderLineForSalesOrderRequest
 */
export interface SalesOrderLineApiGetSalesOrderLineForSalesOrderRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesOrderLineApiGetSalesOrderLineForSalesOrder
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesOrder
     * @type {string}
     * @memberof SalesOrderLineApiGetSalesOrderLineForSalesOrder
     */
    readonly salesOrderId: string

    /**
     * (v1.0) id for salesOrderLine
     * @type {string}
     * @memberof SalesOrderLineApiGetSalesOrderLineForSalesOrder
     */
    readonly salesOrderLineId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'item' | 'account'>}
     * @memberof SalesOrderLineApiGetSalesOrderLineForSalesOrder
     */
    readonly $expand?: Array<GetSalesOrderLineForSalesOrderExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'documentId' | 'sequence' | 'itemId' | 'accountId' | 'lineType' | 'lineDetails' | 'description' | 'unitOfMeasureId' | 'unitOfMeasure' | 'quantity' | 'unitPrice' | 'discountAmount' | 'discountPercent' | 'discountAppliedBeforeTax' | 'amountExcludingTax' | 'taxCode' | 'taxPercent' | 'totalTaxAmount' | 'amountIncludingTax' | 'invoiceDiscountAllocation' | 'netAmount' | 'netTaxAmount' | 'netAmountIncludingTax' | 'shipmentDate' | 'shippedQuantity' | 'invoicedQuantity' | 'invoiceQuantity' | 'shipQuantity'>}
     * @memberof SalesOrderLineApiGetSalesOrderLineForSalesOrder
     */
    readonly $select?: Array<GetSalesOrderLineForSalesOrderSelectEnum>
}

/**
 * Request parameters for listSalesOrderLines operation in SalesOrderLineApi.
 * @export
 * @interface SalesOrderLineApiListSalesOrderLinesRequest
 */
export interface SalesOrderLineApiListSalesOrderLinesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesOrderLineApiListSalesOrderLines
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof SalesOrderLineApiListSalesOrderLines
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof SalesOrderLineApiListSalesOrderLines
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof SalesOrderLineApiListSalesOrderLines
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof SalesOrderLineApiListSalesOrderLines
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'item' | 'account'>}
     * @memberof SalesOrderLineApiListSalesOrderLines
     */
    readonly $expand?: Array<ListSalesOrderLinesExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'documentId' | 'sequence' | 'itemId' | 'accountId' | 'lineType' | 'lineDetails' | 'description' | 'unitOfMeasureId' | 'unitOfMeasure' | 'quantity' | 'unitPrice' | 'discountAmount' | 'discountPercent' | 'discountAppliedBeforeTax' | 'amountExcludingTax' | 'taxCode' | 'taxPercent' | 'totalTaxAmount' | 'amountIncludingTax' | 'invoiceDiscountAllocation' | 'netAmount' | 'netTaxAmount' | 'netAmountIncludingTax' | 'shipmentDate' | 'shippedQuantity' | 'invoicedQuantity' | 'invoiceQuantity' | 'shipQuantity'>}
     * @memberof SalesOrderLineApiListSalesOrderLines
     */
    readonly $select?: Array<ListSalesOrderLinesSelectEnum>
}

/**
 * Request parameters for listSalesOrderLinesForSalesOrder operation in SalesOrderLineApi.
 * @export
 * @interface SalesOrderLineApiListSalesOrderLinesForSalesOrderRequest
 */
export interface SalesOrderLineApiListSalesOrderLinesForSalesOrderRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesOrderLineApiListSalesOrderLinesForSalesOrder
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesOrder
     * @type {string}
     * @memberof SalesOrderLineApiListSalesOrderLinesForSalesOrder
     */
    readonly salesOrderId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof SalesOrderLineApiListSalesOrderLinesForSalesOrder
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof SalesOrderLineApiListSalesOrderLinesForSalesOrder
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof SalesOrderLineApiListSalesOrderLinesForSalesOrder
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof SalesOrderLineApiListSalesOrderLinesForSalesOrder
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'item' | 'account'>}
     * @memberof SalesOrderLineApiListSalesOrderLinesForSalesOrder
     */
    readonly $expand?: Array<ListSalesOrderLinesForSalesOrderExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'documentId' | 'sequence' | 'itemId' | 'accountId' | 'lineType' | 'lineDetails' | 'description' | 'unitOfMeasureId' | 'unitOfMeasure' | 'quantity' | 'unitPrice' | 'discountAmount' | 'discountPercent' | 'discountAppliedBeforeTax' | 'amountExcludingTax' | 'taxCode' | 'taxPercent' | 'totalTaxAmount' | 'amountIncludingTax' | 'invoiceDiscountAllocation' | 'netAmount' | 'netTaxAmount' | 'netAmountIncludingTax' | 'shipmentDate' | 'shippedQuantity' | 'invoicedQuantity' | 'invoiceQuantity' | 'shipQuantity'>}
     * @memberof SalesOrderLineApiListSalesOrderLinesForSalesOrder
     */
    readonly $select?: Array<ListSalesOrderLinesForSalesOrderSelectEnum>
}

/**
 * Request parameters for patchSalesOrderLine operation in SalesOrderLineApi.
 * @export
 * @interface SalesOrderLineApiPatchSalesOrderLineRequest
 */
export interface SalesOrderLineApiPatchSalesOrderLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesOrderLineApiPatchSalesOrderLine
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesOrderLine
     * @type {string}
     * @memberof SalesOrderLineApiPatchSalesOrderLine
     */
    readonly salesOrderLineId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesOrderLineApiPatchSalesOrderLine
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof SalesOrderLineApiPatchSalesOrderLine
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostSalesOrderLineForSalesOrderRequest}
     * @memberof SalesOrderLineApiPatchSalesOrderLine
     */
    readonly postSalesOrderLineForSalesOrderRequest: PostSalesOrderLineForSalesOrderRequest
}

/**
 * Request parameters for patchSalesOrderLineForSalesOrder operation in SalesOrderLineApi.
 * @export
 * @interface SalesOrderLineApiPatchSalesOrderLineForSalesOrderRequest
 */
export interface SalesOrderLineApiPatchSalesOrderLineForSalesOrderRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesOrderLineApiPatchSalesOrderLineForSalesOrder
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesOrder
     * @type {string}
     * @memberof SalesOrderLineApiPatchSalesOrderLineForSalesOrder
     */
    readonly salesOrderId: string

    /**
     * (v1.0) id for salesOrderLine
     * @type {string}
     * @memberof SalesOrderLineApiPatchSalesOrderLineForSalesOrder
     */
    readonly salesOrderLineId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesOrderLineApiPatchSalesOrderLineForSalesOrder
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof SalesOrderLineApiPatchSalesOrderLineForSalesOrder
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostSalesOrderLineForSalesOrderRequest}
     * @memberof SalesOrderLineApiPatchSalesOrderLineForSalesOrder
     */
    readonly postSalesOrderLineForSalesOrderRequest: PostSalesOrderLineForSalesOrderRequest
}

/**
 * Request parameters for postSalesOrderLine operation in SalesOrderLineApi.
 * @export
 * @interface SalesOrderLineApiPostSalesOrderLineRequest
 */
export interface SalesOrderLineApiPostSalesOrderLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesOrderLineApiPostSalesOrderLine
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesOrderLineApiPostSalesOrderLine
     */
    readonly contentType: string

    /**
     * 
     * @type {PostSalesOrderLineForSalesOrderRequest}
     * @memberof SalesOrderLineApiPostSalesOrderLine
     */
    readonly postSalesOrderLineForSalesOrderRequest: PostSalesOrderLineForSalesOrderRequest
}

/**
 * Request parameters for postSalesOrderLineForSalesOrder operation in SalesOrderLineApi.
 * @export
 * @interface SalesOrderLineApiPostSalesOrderLineForSalesOrderRequest
 */
export interface SalesOrderLineApiPostSalesOrderLineForSalesOrderRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesOrderLineApiPostSalesOrderLineForSalesOrder
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesOrder
     * @type {string}
     * @memberof SalesOrderLineApiPostSalesOrderLineForSalesOrder
     */
    readonly salesOrderId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesOrderLineApiPostSalesOrderLineForSalesOrder
     */
    readonly contentType: string

    /**
     * 
     * @type {PostSalesOrderLineForSalesOrderRequest}
     * @memberof SalesOrderLineApiPostSalesOrderLineForSalesOrder
     */
    readonly postSalesOrderLineForSalesOrderRequest: PostSalesOrderLineForSalesOrderRequest
}

/**
 * SalesOrderLineApi - object-oriented interface
 * @export
 * @class SalesOrderLineApi
 * @extends {BaseAPI}
 */
export class SalesOrderLineApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type salesOrderLine in Dynamics 365 Business Central
     * @param {SalesOrderLineApiDeleteSalesOrderLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderLineApi
     */
    public deleteSalesOrderLine(requestParameters: SalesOrderLineApiDeleteSalesOrderLineRequest, options?: RawAxiosRequestConfig) {
        return SalesOrderLineApiFp(this.configuration).deleteSalesOrderLine(requestParameters.companyId, requestParameters.salesOrderLineId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an object of type salesOrderLine in Dynamics 365 Business Central
     * @param {SalesOrderLineApiDeleteSalesOrderLineForSalesOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderLineApi
     */
    public deleteSalesOrderLineForSalesOrder(requestParameters: SalesOrderLineApiDeleteSalesOrderLineForSalesOrderRequest, options?: RawAxiosRequestConfig) {
        return SalesOrderLineApiFp(this.configuration).deleteSalesOrderLineForSalesOrder(requestParameters.companyId, requestParameters.salesOrderId, requestParameters.salesOrderLineId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type salesOrderLine for Dynamics 365 Business Central.
     * @param {SalesOrderLineApiGetSalesOrderLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderLineApi
     */
    public getSalesOrderLine(requestParameters: SalesOrderLineApiGetSalesOrderLineRequest, options?: RawAxiosRequestConfig) {
        return SalesOrderLineApiFp(this.configuration).getSalesOrderLine(requestParameters.companyId, requestParameters.salesOrderLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type salesOrderLine for Dynamics 365 Business Central.
     * @param {SalesOrderLineApiGetSalesOrderLineForSalesOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderLineApi
     */
    public getSalesOrderLineForSalesOrder(requestParameters: SalesOrderLineApiGetSalesOrderLineForSalesOrderRequest, options?: RawAxiosRequestConfig) {
        return SalesOrderLineApiFp(this.configuration).getSalesOrderLineForSalesOrder(requestParameters.companyId, requestParameters.salesOrderId, requestParameters.salesOrderLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of salesOrderLines
     * @param {SalesOrderLineApiListSalesOrderLinesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderLineApi
     */
    public listSalesOrderLines(requestParameters: SalesOrderLineApiListSalesOrderLinesRequest, options?: RawAxiosRequestConfig) {
        return SalesOrderLineApiFp(this.configuration).listSalesOrderLines(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of salesOrderLines
     * @param {SalesOrderLineApiListSalesOrderLinesForSalesOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderLineApi
     */
    public listSalesOrderLinesForSalesOrder(requestParameters: SalesOrderLineApiListSalesOrderLinesForSalesOrderRequest, options?: RawAxiosRequestConfig) {
        return SalesOrderLineApiFp(this.configuration).listSalesOrderLinesForSalesOrder(requestParameters.companyId, requestParameters.salesOrderId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type salesOrderLine in Dynamics 365 Business Central
     * @param {SalesOrderLineApiPatchSalesOrderLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderLineApi
     */
    public patchSalesOrderLine(requestParameters: SalesOrderLineApiPatchSalesOrderLineRequest, options?: RawAxiosRequestConfig) {
        return SalesOrderLineApiFp(this.configuration).patchSalesOrderLine(requestParameters.companyId, requestParameters.salesOrderLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesOrderLineForSalesOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type salesOrderLine in Dynamics 365 Business Central
     * @param {SalesOrderLineApiPatchSalesOrderLineForSalesOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderLineApi
     */
    public patchSalesOrderLineForSalesOrder(requestParameters: SalesOrderLineApiPatchSalesOrderLineForSalesOrderRequest, options?: RawAxiosRequestConfig) {
        return SalesOrderLineApiFp(this.configuration).patchSalesOrderLineForSalesOrder(requestParameters.companyId, requestParameters.salesOrderId, requestParameters.salesOrderLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesOrderLineForSalesOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type salesOrderLine in Dynamics 365 Business Central
     * @param {SalesOrderLineApiPostSalesOrderLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderLineApi
     */
    public postSalesOrderLine(requestParameters: SalesOrderLineApiPostSalesOrderLineRequest, options?: RawAxiosRequestConfig) {
        return SalesOrderLineApiFp(this.configuration).postSalesOrderLine(requestParameters.companyId, requestParameters.contentType, requestParameters.postSalesOrderLineForSalesOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type salesOrderLine in Dynamics 365 Business Central
     * @param {SalesOrderLineApiPostSalesOrderLineForSalesOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderLineApi
     */
    public postSalesOrderLineForSalesOrder(requestParameters: SalesOrderLineApiPostSalesOrderLineForSalesOrderRequest, options?: RawAxiosRequestConfig) {
        return SalesOrderLineApiFp(this.configuration).postSalesOrderLineForSalesOrder(requestParameters.companyId, requestParameters.salesOrderId, requestParameters.contentType, requestParameters.postSalesOrderLineForSalesOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetSalesOrderLineExpandEnum = {
    Item: 'item',
    Account: 'account'
} as const;
export type GetSalesOrderLineExpandEnum = typeof GetSalesOrderLineExpandEnum[keyof typeof GetSalesOrderLineExpandEnum];
/**
 * @export
 */
export const GetSalesOrderLineSelectEnum = {
    Id: 'id',
    DocumentId: 'documentId',
    Sequence: 'sequence',
    ItemId: 'itemId',
    AccountId: 'accountId',
    LineType: 'lineType',
    LineDetails: 'lineDetails',
    Description: 'description',
    UnitOfMeasureId: 'unitOfMeasureId',
    UnitOfMeasure: 'unitOfMeasure',
    Quantity: 'quantity',
    UnitPrice: 'unitPrice',
    DiscountAmount: 'discountAmount',
    DiscountPercent: 'discountPercent',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    AmountExcludingTax: 'amountExcludingTax',
    TaxCode: 'taxCode',
    TaxPercent: 'taxPercent',
    TotalTaxAmount: 'totalTaxAmount',
    AmountIncludingTax: 'amountIncludingTax',
    InvoiceDiscountAllocation: 'invoiceDiscountAllocation',
    NetAmount: 'netAmount',
    NetTaxAmount: 'netTaxAmount',
    NetAmountIncludingTax: 'netAmountIncludingTax',
    ShipmentDate: 'shipmentDate',
    ShippedQuantity: 'shippedQuantity',
    InvoicedQuantity: 'invoicedQuantity',
    InvoiceQuantity: 'invoiceQuantity',
    ShipQuantity: 'shipQuantity'
} as const;
export type GetSalesOrderLineSelectEnum = typeof GetSalesOrderLineSelectEnum[keyof typeof GetSalesOrderLineSelectEnum];
/**
 * @export
 */
export const GetSalesOrderLineForSalesOrderExpandEnum = {
    Item: 'item',
    Account: 'account'
} as const;
export type GetSalesOrderLineForSalesOrderExpandEnum = typeof GetSalesOrderLineForSalesOrderExpandEnum[keyof typeof GetSalesOrderLineForSalesOrderExpandEnum];
/**
 * @export
 */
export const GetSalesOrderLineForSalesOrderSelectEnum = {
    Id: 'id',
    DocumentId: 'documentId',
    Sequence: 'sequence',
    ItemId: 'itemId',
    AccountId: 'accountId',
    LineType: 'lineType',
    LineDetails: 'lineDetails',
    Description: 'description',
    UnitOfMeasureId: 'unitOfMeasureId',
    UnitOfMeasure: 'unitOfMeasure',
    Quantity: 'quantity',
    UnitPrice: 'unitPrice',
    DiscountAmount: 'discountAmount',
    DiscountPercent: 'discountPercent',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    AmountExcludingTax: 'amountExcludingTax',
    TaxCode: 'taxCode',
    TaxPercent: 'taxPercent',
    TotalTaxAmount: 'totalTaxAmount',
    AmountIncludingTax: 'amountIncludingTax',
    InvoiceDiscountAllocation: 'invoiceDiscountAllocation',
    NetAmount: 'netAmount',
    NetTaxAmount: 'netTaxAmount',
    NetAmountIncludingTax: 'netAmountIncludingTax',
    ShipmentDate: 'shipmentDate',
    ShippedQuantity: 'shippedQuantity',
    InvoicedQuantity: 'invoicedQuantity',
    InvoiceQuantity: 'invoiceQuantity',
    ShipQuantity: 'shipQuantity'
} as const;
export type GetSalesOrderLineForSalesOrderSelectEnum = typeof GetSalesOrderLineForSalesOrderSelectEnum[keyof typeof GetSalesOrderLineForSalesOrderSelectEnum];
/**
 * @export
 */
export const ListSalesOrderLinesExpandEnum = {
    Item: 'item',
    Account: 'account'
} as const;
export type ListSalesOrderLinesExpandEnum = typeof ListSalesOrderLinesExpandEnum[keyof typeof ListSalesOrderLinesExpandEnum];
/**
 * @export
 */
export const ListSalesOrderLinesSelectEnum = {
    Id: 'id',
    DocumentId: 'documentId',
    Sequence: 'sequence',
    ItemId: 'itemId',
    AccountId: 'accountId',
    LineType: 'lineType',
    LineDetails: 'lineDetails',
    Description: 'description',
    UnitOfMeasureId: 'unitOfMeasureId',
    UnitOfMeasure: 'unitOfMeasure',
    Quantity: 'quantity',
    UnitPrice: 'unitPrice',
    DiscountAmount: 'discountAmount',
    DiscountPercent: 'discountPercent',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    AmountExcludingTax: 'amountExcludingTax',
    TaxCode: 'taxCode',
    TaxPercent: 'taxPercent',
    TotalTaxAmount: 'totalTaxAmount',
    AmountIncludingTax: 'amountIncludingTax',
    InvoiceDiscountAllocation: 'invoiceDiscountAllocation',
    NetAmount: 'netAmount',
    NetTaxAmount: 'netTaxAmount',
    NetAmountIncludingTax: 'netAmountIncludingTax',
    ShipmentDate: 'shipmentDate',
    ShippedQuantity: 'shippedQuantity',
    InvoicedQuantity: 'invoicedQuantity',
    InvoiceQuantity: 'invoiceQuantity',
    ShipQuantity: 'shipQuantity'
} as const;
export type ListSalesOrderLinesSelectEnum = typeof ListSalesOrderLinesSelectEnum[keyof typeof ListSalesOrderLinesSelectEnum];
/**
 * @export
 */
export const ListSalesOrderLinesForSalesOrderExpandEnum = {
    Item: 'item',
    Account: 'account'
} as const;
export type ListSalesOrderLinesForSalesOrderExpandEnum = typeof ListSalesOrderLinesForSalesOrderExpandEnum[keyof typeof ListSalesOrderLinesForSalesOrderExpandEnum];
/**
 * @export
 */
export const ListSalesOrderLinesForSalesOrderSelectEnum = {
    Id: 'id',
    DocumentId: 'documentId',
    Sequence: 'sequence',
    ItemId: 'itemId',
    AccountId: 'accountId',
    LineType: 'lineType',
    LineDetails: 'lineDetails',
    Description: 'description',
    UnitOfMeasureId: 'unitOfMeasureId',
    UnitOfMeasure: 'unitOfMeasure',
    Quantity: 'quantity',
    UnitPrice: 'unitPrice',
    DiscountAmount: 'discountAmount',
    DiscountPercent: 'discountPercent',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    AmountExcludingTax: 'amountExcludingTax',
    TaxCode: 'taxCode',
    TaxPercent: 'taxPercent',
    TotalTaxAmount: 'totalTaxAmount',
    AmountIncludingTax: 'amountIncludingTax',
    InvoiceDiscountAllocation: 'invoiceDiscountAllocation',
    NetAmount: 'netAmount',
    NetTaxAmount: 'netTaxAmount',
    NetAmountIncludingTax: 'netAmountIncludingTax',
    ShipmentDate: 'shipmentDate',
    ShippedQuantity: 'shippedQuantity',
    InvoicedQuantity: 'invoicedQuantity',
    InvoiceQuantity: 'invoiceQuantity',
    ShipQuantity: 'shipQuantity'
} as const;
export type ListSalesOrderLinesForSalesOrderSelectEnum = typeof ListSalesOrderLinesForSalesOrderSelectEnum[keyof typeof ListSalesOrderLinesForSalesOrderSelectEnum];
