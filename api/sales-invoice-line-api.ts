/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ListSalesInvoiceLinesForSalesInvoice200Response } from '../model';
// @ts-ignore
import type { PostSalesInvoiceLineForSalesInvoiceRequest } from '../model';
// @ts-ignore
import type { SalesInvoiceLine } from '../model';
/**
 * SalesInvoiceLineApi - axios parameter creator
 * @export
 */
export const SalesInvoiceLineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type salesInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceLineId (v1.0) id for salesInvoiceLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesInvoiceLine: async (companyId: string, salesInvoiceLineId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteSalesInvoiceLine', 'companyId', companyId)
            // verify required parameter 'salesInvoiceLineId' is not null or undefined
            assertParamExists('deleteSalesInvoiceLine', 'salesInvoiceLineId', salesInvoiceLineId)
            const localVarPath = `/companies({company_id})/salesInvoiceLines('{salesInvoiceLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesInvoiceLine_id"}}`, encodeURIComponent(String(salesInvoiceLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an object of type salesInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {string} salesInvoiceLineId (v1.0) id for salesInvoiceLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesInvoiceLineForSalesInvoice: async (companyId: string, salesInvoiceId: string, salesInvoiceLineId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteSalesInvoiceLineForSalesInvoice', 'companyId', companyId)
            // verify required parameter 'salesInvoiceId' is not null or undefined
            assertParamExists('deleteSalesInvoiceLineForSalesInvoice', 'salesInvoiceId', salesInvoiceId)
            // verify required parameter 'salesInvoiceLineId' is not null or undefined
            assertParamExists('deleteSalesInvoiceLineForSalesInvoice', 'salesInvoiceLineId', salesInvoiceLineId)
            const localVarPath = `/companies({company_id})/salesInvoices({salesInvoice_id})/salesInvoiceLines('{salesInvoiceLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesInvoice_id"}}`, encodeURIComponent(String(salesInvoiceId)))
                .replace(`{${"salesInvoiceLine_id"}}`, encodeURIComponent(String(salesInvoiceLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesInvoiceLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceLineId (v1.0) id for salesInvoiceLine
         * @param {Array<GetSalesInvoiceLineExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesInvoiceLineSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesInvoiceLine: async (companyId: string, salesInvoiceLineId: string, $expand?: Array<GetSalesInvoiceLineExpandEnum>, $select?: Array<GetSalesInvoiceLineSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSalesInvoiceLine', 'companyId', companyId)
            // verify required parameter 'salesInvoiceLineId' is not null or undefined
            assertParamExists('getSalesInvoiceLine', 'salesInvoiceLineId', salesInvoiceLineId)
            const localVarPath = `/companies({company_id})/salesInvoiceLines('{salesInvoiceLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesInvoiceLine_id"}}`, encodeURIComponent(String(salesInvoiceLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesInvoiceLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {string} salesInvoiceLineId (v1.0) id for salesInvoiceLine
         * @param {Array<GetSalesInvoiceLineForSalesInvoiceExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesInvoiceLineForSalesInvoiceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesInvoiceLineForSalesInvoice: async (companyId: string, salesInvoiceId: string, salesInvoiceLineId: string, $expand?: Array<GetSalesInvoiceLineForSalesInvoiceExpandEnum>, $select?: Array<GetSalesInvoiceLineForSalesInvoiceSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSalesInvoiceLineForSalesInvoice', 'companyId', companyId)
            // verify required parameter 'salesInvoiceId' is not null or undefined
            assertParamExists('getSalesInvoiceLineForSalesInvoice', 'salesInvoiceId', salesInvoiceId)
            // verify required parameter 'salesInvoiceLineId' is not null or undefined
            assertParamExists('getSalesInvoiceLineForSalesInvoice', 'salesInvoiceLineId', salesInvoiceLineId)
            const localVarPath = `/companies({company_id})/salesInvoices({salesInvoice_id})/salesInvoiceLines('{salesInvoiceLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesInvoice_id"}}`, encodeURIComponent(String(salesInvoiceId)))
                .replace(`{${"salesInvoiceLine_id"}}`, encodeURIComponent(String(salesInvoiceLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of salesInvoiceLines
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesInvoiceLinesExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesInvoiceLinesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesInvoiceLines: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesInvoiceLinesExpandEnum>, $select?: Array<ListSalesInvoiceLinesSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listSalesInvoiceLines', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/salesInvoiceLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of salesInvoiceLines
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesInvoiceLinesForSalesInvoiceExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesInvoiceLinesForSalesInvoiceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesInvoiceLinesForSalesInvoice: async (companyId: string, salesInvoiceId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesInvoiceLinesForSalesInvoiceExpandEnum>, $select?: Array<ListSalesInvoiceLinesForSalesInvoiceSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listSalesInvoiceLinesForSalesInvoice', 'companyId', companyId)
            // verify required parameter 'salesInvoiceId' is not null or undefined
            assertParamExists('listSalesInvoiceLinesForSalesInvoice', 'salesInvoiceId', salesInvoiceId)
            const localVarPath = `/companies({company_id})/salesInvoices({salesInvoice_id})/salesInvoiceLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesInvoice_id"}}`, encodeURIComponent(String(salesInvoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type salesInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceLineId (v1.0) id for salesInvoiceLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesInvoiceLineForSalesInvoiceRequest} postSalesInvoiceLineForSalesInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesInvoiceLine: async (companyId: string, salesInvoiceLineId: string, contentType: string, ifMatch: string, postSalesInvoiceLineForSalesInvoiceRequest: PostSalesInvoiceLineForSalesInvoiceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchSalesInvoiceLine', 'companyId', companyId)
            // verify required parameter 'salesInvoiceLineId' is not null or undefined
            assertParamExists('patchSalesInvoiceLine', 'salesInvoiceLineId', salesInvoiceLineId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchSalesInvoiceLine', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchSalesInvoiceLine', 'ifMatch', ifMatch)
            // verify required parameter 'postSalesInvoiceLineForSalesInvoiceRequest' is not null or undefined
            assertParamExists('patchSalesInvoiceLine', 'postSalesInvoiceLineForSalesInvoiceRequest', postSalesInvoiceLineForSalesInvoiceRequest)
            const localVarPath = `/companies({company_id})/salesInvoiceLines('{salesInvoiceLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesInvoiceLine_id"}}`, encodeURIComponent(String(salesInvoiceLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesInvoiceLineForSalesInvoiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type salesInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {string} salesInvoiceLineId (v1.0) id for salesInvoiceLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesInvoiceLineForSalesInvoiceRequest} postSalesInvoiceLineForSalesInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesInvoiceLineForSalesInvoice: async (companyId: string, salesInvoiceId: string, salesInvoiceLineId: string, contentType: string, ifMatch: string, postSalesInvoiceLineForSalesInvoiceRequest: PostSalesInvoiceLineForSalesInvoiceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchSalesInvoiceLineForSalesInvoice', 'companyId', companyId)
            // verify required parameter 'salesInvoiceId' is not null or undefined
            assertParamExists('patchSalesInvoiceLineForSalesInvoice', 'salesInvoiceId', salesInvoiceId)
            // verify required parameter 'salesInvoiceLineId' is not null or undefined
            assertParamExists('patchSalesInvoiceLineForSalesInvoice', 'salesInvoiceLineId', salesInvoiceLineId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchSalesInvoiceLineForSalesInvoice', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchSalesInvoiceLineForSalesInvoice', 'ifMatch', ifMatch)
            // verify required parameter 'postSalesInvoiceLineForSalesInvoiceRequest' is not null or undefined
            assertParamExists('patchSalesInvoiceLineForSalesInvoice', 'postSalesInvoiceLineForSalesInvoiceRequest', postSalesInvoiceLineForSalesInvoiceRequest)
            const localVarPath = `/companies({company_id})/salesInvoices({salesInvoice_id})/salesInvoiceLines('{salesInvoiceLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesInvoice_id"}}`, encodeURIComponent(String(salesInvoiceId)))
                .replace(`{${"salesInvoiceLine_id"}}`, encodeURIComponent(String(salesInvoiceLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesInvoiceLineForSalesInvoiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type salesInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesInvoiceLineForSalesInvoiceRequest} postSalesInvoiceLineForSalesInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesInvoiceLine: async (companyId: string, contentType: string, postSalesInvoiceLineForSalesInvoiceRequest: PostSalesInvoiceLineForSalesInvoiceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postSalesInvoiceLine', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postSalesInvoiceLine', 'contentType', contentType)
            // verify required parameter 'postSalesInvoiceLineForSalesInvoiceRequest' is not null or undefined
            assertParamExists('postSalesInvoiceLine', 'postSalesInvoiceLineForSalesInvoiceRequest', postSalesInvoiceLineForSalesInvoiceRequest)
            const localVarPath = `/companies({company_id})/salesInvoiceLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesInvoiceLineForSalesInvoiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type salesInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesInvoiceLineForSalesInvoiceRequest} postSalesInvoiceLineForSalesInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesInvoiceLineForSalesInvoice: async (companyId: string, salesInvoiceId: string, contentType: string, postSalesInvoiceLineForSalesInvoiceRequest: PostSalesInvoiceLineForSalesInvoiceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postSalesInvoiceLineForSalesInvoice', 'companyId', companyId)
            // verify required parameter 'salesInvoiceId' is not null or undefined
            assertParamExists('postSalesInvoiceLineForSalesInvoice', 'salesInvoiceId', salesInvoiceId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postSalesInvoiceLineForSalesInvoice', 'contentType', contentType)
            // verify required parameter 'postSalesInvoiceLineForSalesInvoiceRequest' is not null or undefined
            assertParamExists('postSalesInvoiceLineForSalesInvoice', 'postSalesInvoiceLineForSalesInvoiceRequest', postSalesInvoiceLineForSalesInvoiceRequest)
            const localVarPath = `/companies({company_id})/salesInvoices({salesInvoice_id})/salesInvoiceLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesInvoice_id"}}`, encodeURIComponent(String(salesInvoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesInvoiceLineForSalesInvoiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalesInvoiceLineApi - functional programming interface
 * @export
 */
export const SalesInvoiceLineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalesInvoiceLineApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type salesInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceLineId (v1.0) id for salesInvoiceLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalesInvoiceLine(companyId: string, salesInvoiceLineId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalesInvoiceLine(companyId, salesInvoiceLineId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesInvoiceLineApi.deleteSalesInvoiceLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes an object of type salesInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {string} salesInvoiceLineId (v1.0) id for salesInvoiceLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalesInvoiceLineForSalesInvoice(companyId: string, salesInvoiceId: string, salesInvoiceLineId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalesInvoiceLineForSalesInvoice(companyId, salesInvoiceId, salesInvoiceLineId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesInvoiceLineApi.deleteSalesInvoiceLineForSalesInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesInvoiceLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceLineId (v1.0) id for salesInvoiceLine
         * @param {Array<GetSalesInvoiceLineExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesInvoiceLineSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesInvoiceLine(companyId: string, salesInvoiceLineId: string, $expand?: Array<GetSalesInvoiceLineExpandEnum>, $select?: Array<GetSalesInvoiceLineSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesInvoiceLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesInvoiceLine(companyId, salesInvoiceLineId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesInvoiceLineApi.getSalesInvoiceLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesInvoiceLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {string} salesInvoiceLineId (v1.0) id for salesInvoiceLine
         * @param {Array<GetSalesInvoiceLineForSalesInvoiceExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesInvoiceLineForSalesInvoiceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesInvoiceLineForSalesInvoice(companyId: string, salesInvoiceId: string, salesInvoiceLineId: string, $expand?: Array<GetSalesInvoiceLineForSalesInvoiceExpandEnum>, $select?: Array<GetSalesInvoiceLineForSalesInvoiceSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesInvoiceLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesInvoiceLineForSalesInvoice(companyId, salesInvoiceId, salesInvoiceLineId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesInvoiceLineApi.getSalesInvoiceLineForSalesInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of salesInvoiceLines
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesInvoiceLinesExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesInvoiceLinesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSalesInvoiceLines(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesInvoiceLinesExpandEnum>, $select?: Array<ListSalesInvoiceLinesSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListSalesInvoiceLinesForSalesInvoice200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSalesInvoiceLines(companyId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesInvoiceLineApi.listSalesInvoiceLines']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of salesInvoiceLines
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesInvoiceLinesForSalesInvoiceExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesInvoiceLinesForSalesInvoiceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSalesInvoiceLinesForSalesInvoice(companyId: string, salesInvoiceId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesInvoiceLinesForSalesInvoiceExpandEnum>, $select?: Array<ListSalesInvoiceLinesForSalesInvoiceSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListSalesInvoiceLinesForSalesInvoice200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSalesInvoiceLinesForSalesInvoice(companyId, salesInvoiceId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesInvoiceLineApi.listSalesInvoiceLinesForSalesInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type salesInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceLineId (v1.0) id for salesInvoiceLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesInvoiceLineForSalesInvoiceRequest} postSalesInvoiceLineForSalesInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSalesInvoiceLine(companyId: string, salesInvoiceLineId: string, contentType: string, ifMatch: string, postSalesInvoiceLineForSalesInvoiceRequest: PostSalesInvoiceLineForSalesInvoiceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesInvoiceLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSalesInvoiceLine(companyId, salesInvoiceLineId, contentType, ifMatch, postSalesInvoiceLineForSalesInvoiceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesInvoiceLineApi.patchSalesInvoiceLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type salesInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {string} salesInvoiceLineId (v1.0) id for salesInvoiceLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesInvoiceLineForSalesInvoiceRequest} postSalesInvoiceLineForSalesInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSalesInvoiceLineForSalesInvoice(companyId: string, salesInvoiceId: string, salesInvoiceLineId: string, contentType: string, ifMatch: string, postSalesInvoiceLineForSalesInvoiceRequest: PostSalesInvoiceLineForSalesInvoiceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesInvoiceLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSalesInvoiceLineForSalesInvoice(companyId, salesInvoiceId, salesInvoiceLineId, contentType, ifMatch, postSalesInvoiceLineForSalesInvoiceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesInvoiceLineApi.patchSalesInvoiceLineForSalesInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type salesInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesInvoiceLineForSalesInvoiceRequest} postSalesInvoiceLineForSalesInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSalesInvoiceLine(companyId: string, contentType: string, postSalesInvoiceLineForSalesInvoiceRequest: PostSalesInvoiceLineForSalesInvoiceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesInvoiceLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSalesInvoiceLine(companyId, contentType, postSalesInvoiceLineForSalesInvoiceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesInvoiceLineApi.postSalesInvoiceLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type salesInvoiceLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesInvoiceId (v1.0) id for salesInvoice
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesInvoiceLineForSalesInvoiceRequest} postSalesInvoiceLineForSalesInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSalesInvoiceLineForSalesInvoice(companyId: string, salesInvoiceId: string, contentType: string, postSalesInvoiceLineForSalesInvoiceRequest: PostSalesInvoiceLineForSalesInvoiceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesInvoiceLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSalesInvoiceLineForSalesInvoice(companyId, salesInvoiceId, contentType, postSalesInvoiceLineForSalesInvoiceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesInvoiceLineApi.postSalesInvoiceLineForSalesInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SalesInvoiceLineApi - factory interface
 * @export
 */
export const SalesInvoiceLineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalesInvoiceLineApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type salesInvoiceLine in Dynamics 365 Business Central
         * @param {SalesInvoiceLineApiDeleteSalesInvoiceLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesInvoiceLine(requestParameters: SalesInvoiceLineApiDeleteSalesInvoiceLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSalesInvoiceLine(requestParameters.companyId, requestParameters.salesInvoiceLineId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an object of type salesInvoiceLine in Dynamics 365 Business Central
         * @param {SalesInvoiceLineApiDeleteSalesInvoiceLineForSalesInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesInvoiceLineForSalesInvoice(requestParameters: SalesInvoiceLineApiDeleteSalesInvoiceLineForSalesInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSalesInvoiceLineForSalesInvoice(requestParameters.companyId, requestParameters.salesInvoiceId, requestParameters.salesInvoiceLineId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesInvoiceLine for Dynamics 365 Business Central.
         * @param {SalesInvoiceLineApiGetSalesInvoiceLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesInvoiceLine(requestParameters: SalesInvoiceLineApiGetSalesInvoiceLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesInvoiceLine> {
            return localVarFp.getSalesInvoiceLine(requestParameters.companyId, requestParameters.salesInvoiceLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesInvoiceLine for Dynamics 365 Business Central.
         * @param {SalesInvoiceLineApiGetSalesInvoiceLineForSalesInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesInvoiceLineForSalesInvoice(requestParameters: SalesInvoiceLineApiGetSalesInvoiceLineForSalesInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesInvoiceLine> {
            return localVarFp.getSalesInvoiceLineForSalesInvoice(requestParameters.companyId, requestParameters.salesInvoiceId, requestParameters.salesInvoiceLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of salesInvoiceLines
         * @param {SalesInvoiceLineApiListSalesInvoiceLinesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesInvoiceLines(requestParameters: SalesInvoiceLineApiListSalesInvoiceLinesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListSalesInvoiceLinesForSalesInvoice200Response> {
            return localVarFp.listSalesInvoiceLines(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of salesInvoiceLines
         * @param {SalesInvoiceLineApiListSalesInvoiceLinesForSalesInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesInvoiceLinesForSalesInvoice(requestParameters: SalesInvoiceLineApiListSalesInvoiceLinesForSalesInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListSalesInvoiceLinesForSalesInvoice200Response> {
            return localVarFp.listSalesInvoiceLinesForSalesInvoice(requestParameters.companyId, requestParameters.salesInvoiceId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type salesInvoiceLine in Dynamics 365 Business Central
         * @param {SalesInvoiceLineApiPatchSalesInvoiceLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesInvoiceLine(requestParameters: SalesInvoiceLineApiPatchSalesInvoiceLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesInvoiceLine> {
            return localVarFp.patchSalesInvoiceLine(requestParameters.companyId, requestParameters.salesInvoiceLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesInvoiceLineForSalesInvoiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type salesInvoiceLine in Dynamics 365 Business Central
         * @param {SalesInvoiceLineApiPatchSalesInvoiceLineForSalesInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesInvoiceLineForSalesInvoice(requestParameters: SalesInvoiceLineApiPatchSalesInvoiceLineForSalesInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesInvoiceLine> {
            return localVarFp.patchSalesInvoiceLineForSalesInvoice(requestParameters.companyId, requestParameters.salesInvoiceId, requestParameters.salesInvoiceLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesInvoiceLineForSalesInvoiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type salesInvoiceLine in Dynamics 365 Business Central
         * @param {SalesInvoiceLineApiPostSalesInvoiceLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesInvoiceLine(requestParameters: SalesInvoiceLineApiPostSalesInvoiceLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesInvoiceLine> {
            return localVarFp.postSalesInvoiceLine(requestParameters.companyId, requestParameters.contentType, requestParameters.postSalesInvoiceLineForSalesInvoiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type salesInvoiceLine in Dynamics 365 Business Central
         * @param {SalesInvoiceLineApiPostSalesInvoiceLineForSalesInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesInvoiceLineForSalesInvoice(requestParameters: SalesInvoiceLineApiPostSalesInvoiceLineForSalesInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesInvoiceLine> {
            return localVarFp.postSalesInvoiceLineForSalesInvoice(requestParameters.companyId, requestParameters.salesInvoiceId, requestParameters.contentType, requestParameters.postSalesInvoiceLineForSalesInvoiceRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteSalesInvoiceLine operation in SalesInvoiceLineApi.
 * @export
 * @interface SalesInvoiceLineApiDeleteSalesInvoiceLineRequest
 */
export interface SalesInvoiceLineApiDeleteSalesInvoiceLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesInvoiceLineApiDeleteSalesInvoiceLine
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesInvoiceLine
     * @type {string}
     * @memberof SalesInvoiceLineApiDeleteSalesInvoiceLine
     */
    readonly salesInvoiceLineId: string
}

/**
 * Request parameters for deleteSalesInvoiceLineForSalesInvoice operation in SalesInvoiceLineApi.
 * @export
 * @interface SalesInvoiceLineApiDeleteSalesInvoiceLineForSalesInvoiceRequest
 */
export interface SalesInvoiceLineApiDeleteSalesInvoiceLineForSalesInvoiceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesInvoiceLineApiDeleteSalesInvoiceLineForSalesInvoice
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesInvoice
     * @type {string}
     * @memberof SalesInvoiceLineApiDeleteSalesInvoiceLineForSalesInvoice
     */
    readonly salesInvoiceId: string

    /**
     * (v1.0) id for salesInvoiceLine
     * @type {string}
     * @memberof SalesInvoiceLineApiDeleteSalesInvoiceLineForSalesInvoice
     */
    readonly salesInvoiceLineId: string
}

/**
 * Request parameters for getSalesInvoiceLine operation in SalesInvoiceLineApi.
 * @export
 * @interface SalesInvoiceLineApiGetSalesInvoiceLineRequest
 */
export interface SalesInvoiceLineApiGetSalesInvoiceLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesInvoiceLineApiGetSalesInvoiceLine
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesInvoiceLine
     * @type {string}
     * @memberof SalesInvoiceLineApiGetSalesInvoiceLine
     */
    readonly salesInvoiceLineId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'item' | 'account'>}
     * @memberof SalesInvoiceLineApiGetSalesInvoiceLine
     */
    readonly $expand?: Array<GetSalesInvoiceLineExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'documentId' | 'sequence' | 'itemId' | 'accountId' | 'lineType' | 'lineDetails' | 'description' | 'unitOfMeasureId' | 'unitOfMeasure' | 'unitPrice' | 'quantity' | 'discountAmount' | 'discountPercent' | 'discountAppliedBeforeTax' | 'amountExcludingTax' | 'taxCode' | 'taxPercent' | 'totalTaxAmount' | 'amountIncludingTax' | 'invoiceDiscountAllocation' | 'netAmount' | 'netTaxAmount' | 'netAmountIncludingTax' | 'shipmentDate'>}
     * @memberof SalesInvoiceLineApiGetSalesInvoiceLine
     */
    readonly $select?: Array<GetSalesInvoiceLineSelectEnum>
}

/**
 * Request parameters for getSalesInvoiceLineForSalesInvoice operation in SalesInvoiceLineApi.
 * @export
 * @interface SalesInvoiceLineApiGetSalesInvoiceLineForSalesInvoiceRequest
 */
export interface SalesInvoiceLineApiGetSalesInvoiceLineForSalesInvoiceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesInvoiceLineApiGetSalesInvoiceLineForSalesInvoice
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesInvoice
     * @type {string}
     * @memberof SalesInvoiceLineApiGetSalesInvoiceLineForSalesInvoice
     */
    readonly salesInvoiceId: string

    /**
     * (v1.0) id for salesInvoiceLine
     * @type {string}
     * @memberof SalesInvoiceLineApiGetSalesInvoiceLineForSalesInvoice
     */
    readonly salesInvoiceLineId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'item' | 'account'>}
     * @memberof SalesInvoiceLineApiGetSalesInvoiceLineForSalesInvoice
     */
    readonly $expand?: Array<GetSalesInvoiceLineForSalesInvoiceExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'documentId' | 'sequence' | 'itemId' | 'accountId' | 'lineType' | 'lineDetails' | 'description' | 'unitOfMeasureId' | 'unitOfMeasure' | 'unitPrice' | 'quantity' | 'discountAmount' | 'discountPercent' | 'discountAppliedBeforeTax' | 'amountExcludingTax' | 'taxCode' | 'taxPercent' | 'totalTaxAmount' | 'amountIncludingTax' | 'invoiceDiscountAllocation' | 'netAmount' | 'netTaxAmount' | 'netAmountIncludingTax' | 'shipmentDate'>}
     * @memberof SalesInvoiceLineApiGetSalesInvoiceLineForSalesInvoice
     */
    readonly $select?: Array<GetSalesInvoiceLineForSalesInvoiceSelectEnum>
}

/**
 * Request parameters for listSalesInvoiceLines operation in SalesInvoiceLineApi.
 * @export
 * @interface SalesInvoiceLineApiListSalesInvoiceLinesRequest
 */
export interface SalesInvoiceLineApiListSalesInvoiceLinesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesInvoiceLineApiListSalesInvoiceLines
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof SalesInvoiceLineApiListSalesInvoiceLines
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof SalesInvoiceLineApiListSalesInvoiceLines
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof SalesInvoiceLineApiListSalesInvoiceLines
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof SalesInvoiceLineApiListSalesInvoiceLines
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'item' | 'account'>}
     * @memberof SalesInvoiceLineApiListSalesInvoiceLines
     */
    readonly $expand?: Array<ListSalesInvoiceLinesExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'documentId' | 'sequence' | 'itemId' | 'accountId' | 'lineType' | 'lineDetails' | 'description' | 'unitOfMeasureId' | 'unitOfMeasure' | 'unitPrice' | 'quantity' | 'discountAmount' | 'discountPercent' | 'discountAppliedBeforeTax' | 'amountExcludingTax' | 'taxCode' | 'taxPercent' | 'totalTaxAmount' | 'amountIncludingTax' | 'invoiceDiscountAllocation' | 'netAmount' | 'netTaxAmount' | 'netAmountIncludingTax' | 'shipmentDate'>}
     * @memberof SalesInvoiceLineApiListSalesInvoiceLines
     */
    readonly $select?: Array<ListSalesInvoiceLinesSelectEnum>
}

/**
 * Request parameters for listSalesInvoiceLinesForSalesInvoice operation in SalesInvoiceLineApi.
 * @export
 * @interface SalesInvoiceLineApiListSalesInvoiceLinesForSalesInvoiceRequest
 */
export interface SalesInvoiceLineApiListSalesInvoiceLinesForSalesInvoiceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesInvoiceLineApiListSalesInvoiceLinesForSalesInvoice
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesInvoice
     * @type {string}
     * @memberof SalesInvoiceLineApiListSalesInvoiceLinesForSalesInvoice
     */
    readonly salesInvoiceId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof SalesInvoiceLineApiListSalesInvoiceLinesForSalesInvoice
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof SalesInvoiceLineApiListSalesInvoiceLinesForSalesInvoice
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof SalesInvoiceLineApiListSalesInvoiceLinesForSalesInvoice
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof SalesInvoiceLineApiListSalesInvoiceLinesForSalesInvoice
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'item' | 'account'>}
     * @memberof SalesInvoiceLineApiListSalesInvoiceLinesForSalesInvoice
     */
    readonly $expand?: Array<ListSalesInvoiceLinesForSalesInvoiceExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'documentId' | 'sequence' | 'itemId' | 'accountId' | 'lineType' | 'lineDetails' | 'description' | 'unitOfMeasureId' | 'unitOfMeasure' | 'unitPrice' | 'quantity' | 'discountAmount' | 'discountPercent' | 'discountAppliedBeforeTax' | 'amountExcludingTax' | 'taxCode' | 'taxPercent' | 'totalTaxAmount' | 'amountIncludingTax' | 'invoiceDiscountAllocation' | 'netAmount' | 'netTaxAmount' | 'netAmountIncludingTax' | 'shipmentDate'>}
     * @memberof SalesInvoiceLineApiListSalesInvoiceLinesForSalesInvoice
     */
    readonly $select?: Array<ListSalesInvoiceLinesForSalesInvoiceSelectEnum>
}

/**
 * Request parameters for patchSalesInvoiceLine operation in SalesInvoiceLineApi.
 * @export
 * @interface SalesInvoiceLineApiPatchSalesInvoiceLineRequest
 */
export interface SalesInvoiceLineApiPatchSalesInvoiceLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesInvoiceLineApiPatchSalesInvoiceLine
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesInvoiceLine
     * @type {string}
     * @memberof SalesInvoiceLineApiPatchSalesInvoiceLine
     */
    readonly salesInvoiceLineId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesInvoiceLineApiPatchSalesInvoiceLine
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof SalesInvoiceLineApiPatchSalesInvoiceLine
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostSalesInvoiceLineForSalesInvoiceRequest}
     * @memberof SalesInvoiceLineApiPatchSalesInvoiceLine
     */
    readonly postSalesInvoiceLineForSalesInvoiceRequest: PostSalesInvoiceLineForSalesInvoiceRequest
}

/**
 * Request parameters for patchSalesInvoiceLineForSalesInvoice operation in SalesInvoiceLineApi.
 * @export
 * @interface SalesInvoiceLineApiPatchSalesInvoiceLineForSalesInvoiceRequest
 */
export interface SalesInvoiceLineApiPatchSalesInvoiceLineForSalesInvoiceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesInvoiceLineApiPatchSalesInvoiceLineForSalesInvoice
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesInvoice
     * @type {string}
     * @memberof SalesInvoiceLineApiPatchSalesInvoiceLineForSalesInvoice
     */
    readonly salesInvoiceId: string

    /**
     * (v1.0) id for salesInvoiceLine
     * @type {string}
     * @memberof SalesInvoiceLineApiPatchSalesInvoiceLineForSalesInvoice
     */
    readonly salesInvoiceLineId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesInvoiceLineApiPatchSalesInvoiceLineForSalesInvoice
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof SalesInvoiceLineApiPatchSalesInvoiceLineForSalesInvoice
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostSalesInvoiceLineForSalesInvoiceRequest}
     * @memberof SalesInvoiceLineApiPatchSalesInvoiceLineForSalesInvoice
     */
    readonly postSalesInvoiceLineForSalesInvoiceRequest: PostSalesInvoiceLineForSalesInvoiceRequest
}

/**
 * Request parameters for postSalesInvoiceLine operation in SalesInvoiceLineApi.
 * @export
 * @interface SalesInvoiceLineApiPostSalesInvoiceLineRequest
 */
export interface SalesInvoiceLineApiPostSalesInvoiceLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesInvoiceLineApiPostSalesInvoiceLine
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesInvoiceLineApiPostSalesInvoiceLine
     */
    readonly contentType: string

    /**
     * 
     * @type {PostSalesInvoiceLineForSalesInvoiceRequest}
     * @memberof SalesInvoiceLineApiPostSalesInvoiceLine
     */
    readonly postSalesInvoiceLineForSalesInvoiceRequest: PostSalesInvoiceLineForSalesInvoiceRequest
}

/**
 * Request parameters for postSalesInvoiceLineForSalesInvoice operation in SalesInvoiceLineApi.
 * @export
 * @interface SalesInvoiceLineApiPostSalesInvoiceLineForSalesInvoiceRequest
 */
export interface SalesInvoiceLineApiPostSalesInvoiceLineForSalesInvoiceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesInvoiceLineApiPostSalesInvoiceLineForSalesInvoice
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesInvoice
     * @type {string}
     * @memberof SalesInvoiceLineApiPostSalesInvoiceLineForSalesInvoice
     */
    readonly salesInvoiceId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesInvoiceLineApiPostSalesInvoiceLineForSalesInvoice
     */
    readonly contentType: string

    /**
     * 
     * @type {PostSalesInvoiceLineForSalesInvoiceRequest}
     * @memberof SalesInvoiceLineApiPostSalesInvoiceLineForSalesInvoice
     */
    readonly postSalesInvoiceLineForSalesInvoiceRequest: PostSalesInvoiceLineForSalesInvoiceRequest
}

/**
 * SalesInvoiceLineApi - object-oriented interface
 * @export
 * @class SalesInvoiceLineApi
 * @extends {BaseAPI}
 */
export class SalesInvoiceLineApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type salesInvoiceLine in Dynamics 365 Business Central
     * @param {SalesInvoiceLineApiDeleteSalesInvoiceLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesInvoiceLineApi
     */
    public deleteSalesInvoiceLine(requestParameters: SalesInvoiceLineApiDeleteSalesInvoiceLineRequest, options?: RawAxiosRequestConfig) {
        return SalesInvoiceLineApiFp(this.configuration).deleteSalesInvoiceLine(requestParameters.companyId, requestParameters.salesInvoiceLineId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an object of type salesInvoiceLine in Dynamics 365 Business Central
     * @param {SalesInvoiceLineApiDeleteSalesInvoiceLineForSalesInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesInvoiceLineApi
     */
    public deleteSalesInvoiceLineForSalesInvoice(requestParameters: SalesInvoiceLineApiDeleteSalesInvoiceLineForSalesInvoiceRequest, options?: RawAxiosRequestConfig) {
        return SalesInvoiceLineApiFp(this.configuration).deleteSalesInvoiceLineForSalesInvoice(requestParameters.companyId, requestParameters.salesInvoiceId, requestParameters.salesInvoiceLineId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type salesInvoiceLine for Dynamics 365 Business Central.
     * @param {SalesInvoiceLineApiGetSalesInvoiceLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesInvoiceLineApi
     */
    public getSalesInvoiceLine(requestParameters: SalesInvoiceLineApiGetSalesInvoiceLineRequest, options?: RawAxiosRequestConfig) {
        return SalesInvoiceLineApiFp(this.configuration).getSalesInvoiceLine(requestParameters.companyId, requestParameters.salesInvoiceLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type salesInvoiceLine for Dynamics 365 Business Central.
     * @param {SalesInvoiceLineApiGetSalesInvoiceLineForSalesInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesInvoiceLineApi
     */
    public getSalesInvoiceLineForSalesInvoice(requestParameters: SalesInvoiceLineApiGetSalesInvoiceLineForSalesInvoiceRequest, options?: RawAxiosRequestConfig) {
        return SalesInvoiceLineApiFp(this.configuration).getSalesInvoiceLineForSalesInvoice(requestParameters.companyId, requestParameters.salesInvoiceId, requestParameters.salesInvoiceLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of salesInvoiceLines
     * @param {SalesInvoiceLineApiListSalesInvoiceLinesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesInvoiceLineApi
     */
    public listSalesInvoiceLines(requestParameters: SalesInvoiceLineApiListSalesInvoiceLinesRequest, options?: RawAxiosRequestConfig) {
        return SalesInvoiceLineApiFp(this.configuration).listSalesInvoiceLines(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of salesInvoiceLines
     * @param {SalesInvoiceLineApiListSalesInvoiceLinesForSalesInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesInvoiceLineApi
     */
    public listSalesInvoiceLinesForSalesInvoice(requestParameters: SalesInvoiceLineApiListSalesInvoiceLinesForSalesInvoiceRequest, options?: RawAxiosRequestConfig) {
        return SalesInvoiceLineApiFp(this.configuration).listSalesInvoiceLinesForSalesInvoice(requestParameters.companyId, requestParameters.salesInvoiceId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type salesInvoiceLine in Dynamics 365 Business Central
     * @param {SalesInvoiceLineApiPatchSalesInvoiceLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesInvoiceLineApi
     */
    public patchSalesInvoiceLine(requestParameters: SalesInvoiceLineApiPatchSalesInvoiceLineRequest, options?: RawAxiosRequestConfig) {
        return SalesInvoiceLineApiFp(this.configuration).patchSalesInvoiceLine(requestParameters.companyId, requestParameters.salesInvoiceLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesInvoiceLineForSalesInvoiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type salesInvoiceLine in Dynamics 365 Business Central
     * @param {SalesInvoiceLineApiPatchSalesInvoiceLineForSalesInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesInvoiceLineApi
     */
    public patchSalesInvoiceLineForSalesInvoice(requestParameters: SalesInvoiceLineApiPatchSalesInvoiceLineForSalesInvoiceRequest, options?: RawAxiosRequestConfig) {
        return SalesInvoiceLineApiFp(this.configuration).patchSalesInvoiceLineForSalesInvoice(requestParameters.companyId, requestParameters.salesInvoiceId, requestParameters.salesInvoiceLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesInvoiceLineForSalesInvoiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type salesInvoiceLine in Dynamics 365 Business Central
     * @param {SalesInvoiceLineApiPostSalesInvoiceLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesInvoiceLineApi
     */
    public postSalesInvoiceLine(requestParameters: SalesInvoiceLineApiPostSalesInvoiceLineRequest, options?: RawAxiosRequestConfig) {
        return SalesInvoiceLineApiFp(this.configuration).postSalesInvoiceLine(requestParameters.companyId, requestParameters.contentType, requestParameters.postSalesInvoiceLineForSalesInvoiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type salesInvoiceLine in Dynamics 365 Business Central
     * @param {SalesInvoiceLineApiPostSalesInvoiceLineForSalesInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesInvoiceLineApi
     */
    public postSalesInvoiceLineForSalesInvoice(requestParameters: SalesInvoiceLineApiPostSalesInvoiceLineForSalesInvoiceRequest, options?: RawAxiosRequestConfig) {
        return SalesInvoiceLineApiFp(this.configuration).postSalesInvoiceLineForSalesInvoice(requestParameters.companyId, requestParameters.salesInvoiceId, requestParameters.contentType, requestParameters.postSalesInvoiceLineForSalesInvoiceRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetSalesInvoiceLineExpandEnum = {
    Item: 'item',
    Account: 'account'
} as const;
export type GetSalesInvoiceLineExpandEnum = typeof GetSalesInvoiceLineExpandEnum[keyof typeof GetSalesInvoiceLineExpandEnum];
/**
 * @export
 */
export const GetSalesInvoiceLineSelectEnum = {
    Id: 'id',
    DocumentId: 'documentId',
    Sequence: 'sequence',
    ItemId: 'itemId',
    AccountId: 'accountId',
    LineType: 'lineType',
    LineDetails: 'lineDetails',
    Description: 'description',
    UnitOfMeasureId: 'unitOfMeasureId',
    UnitOfMeasure: 'unitOfMeasure',
    UnitPrice: 'unitPrice',
    Quantity: 'quantity',
    DiscountAmount: 'discountAmount',
    DiscountPercent: 'discountPercent',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    AmountExcludingTax: 'amountExcludingTax',
    TaxCode: 'taxCode',
    TaxPercent: 'taxPercent',
    TotalTaxAmount: 'totalTaxAmount',
    AmountIncludingTax: 'amountIncludingTax',
    InvoiceDiscountAllocation: 'invoiceDiscountAllocation',
    NetAmount: 'netAmount',
    NetTaxAmount: 'netTaxAmount',
    NetAmountIncludingTax: 'netAmountIncludingTax',
    ShipmentDate: 'shipmentDate'
} as const;
export type GetSalesInvoiceLineSelectEnum = typeof GetSalesInvoiceLineSelectEnum[keyof typeof GetSalesInvoiceLineSelectEnum];
/**
 * @export
 */
export const GetSalesInvoiceLineForSalesInvoiceExpandEnum = {
    Item: 'item',
    Account: 'account'
} as const;
export type GetSalesInvoiceLineForSalesInvoiceExpandEnum = typeof GetSalesInvoiceLineForSalesInvoiceExpandEnum[keyof typeof GetSalesInvoiceLineForSalesInvoiceExpandEnum];
/**
 * @export
 */
export const GetSalesInvoiceLineForSalesInvoiceSelectEnum = {
    Id: 'id',
    DocumentId: 'documentId',
    Sequence: 'sequence',
    ItemId: 'itemId',
    AccountId: 'accountId',
    LineType: 'lineType',
    LineDetails: 'lineDetails',
    Description: 'description',
    UnitOfMeasureId: 'unitOfMeasureId',
    UnitOfMeasure: 'unitOfMeasure',
    UnitPrice: 'unitPrice',
    Quantity: 'quantity',
    DiscountAmount: 'discountAmount',
    DiscountPercent: 'discountPercent',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    AmountExcludingTax: 'amountExcludingTax',
    TaxCode: 'taxCode',
    TaxPercent: 'taxPercent',
    TotalTaxAmount: 'totalTaxAmount',
    AmountIncludingTax: 'amountIncludingTax',
    InvoiceDiscountAllocation: 'invoiceDiscountAllocation',
    NetAmount: 'netAmount',
    NetTaxAmount: 'netTaxAmount',
    NetAmountIncludingTax: 'netAmountIncludingTax',
    ShipmentDate: 'shipmentDate'
} as const;
export type GetSalesInvoiceLineForSalesInvoiceSelectEnum = typeof GetSalesInvoiceLineForSalesInvoiceSelectEnum[keyof typeof GetSalesInvoiceLineForSalesInvoiceSelectEnum];
/**
 * @export
 */
export const ListSalesInvoiceLinesExpandEnum = {
    Item: 'item',
    Account: 'account'
} as const;
export type ListSalesInvoiceLinesExpandEnum = typeof ListSalesInvoiceLinesExpandEnum[keyof typeof ListSalesInvoiceLinesExpandEnum];
/**
 * @export
 */
export const ListSalesInvoiceLinesSelectEnum = {
    Id: 'id',
    DocumentId: 'documentId',
    Sequence: 'sequence',
    ItemId: 'itemId',
    AccountId: 'accountId',
    LineType: 'lineType',
    LineDetails: 'lineDetails',
    Description: 'description',
    UnitOfMeasureId: 'unitOfMeasureId',
    UnitOfMeasure: 'unitOfMeasure',
    UnitPrice: 'unitPrice',
    Quantity: 'quantity',
    DiscountAmount: 'discountAmount',
    DiscountPercent: 'discountPercent',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    AmountExcludingTax: 'amountExcludingTax',
    TaxCode: 'taxCode',
    TaxPercent: 'taxPercent',
    TotalTaxAmount: 'totalTaxAmount',
    AmountIncludingTax: 'amountIncludingTax',
    InvoiceDiscountAllocation: 'invoiceDiscountAllocation',
    NetAmount: 'netAmount',
    NetTaxAmount: 'netTaxAmount',
    NetAmountIncludingTax: 'netAmountIncludingTax',
    ShipmentDate: 'shipmentDate'
} as const;
export type ListSalesInvoiceLinesSelectEnum = typeof ListSalesInvoiceLinesSelectEnum[keyof typeof ListSalesInvoiceLinesSelectEnum];
/**
 * @export
 */
export const ListSalesInvoiceLinesForSalesInvoiceExpandEnum = {
    Item: 'item',
    Account: 'account'
} as const;
export type ListSalesInvoiceLinesForSalesInvoiceExpandEnum = typeof ListSalesInvoiceLinesForSalesInvoiceExpandEnum[keyof typeof ListSalesInvoiceLinesForSalesInvoiceExpandEnum];
/**
 * @export
 */
export const ListSalesInvoiceLinesForSalesInvoiceSelectEnum = {
    Id: 'id',
    DocumentId: 'documentId',
    Sequence: 'sequence',
    ItemId: 'itemId',
    AccountId: 'accountId',
    LineType: 'lineType',
    LineDetails: 'lineDetails',
    Description: 'description',
    UnitOfMeasureId: 'unitOfMeasureId',
    UnitOfMeasure: 'unitOfMeasure',
    UnitPrice: 'unitPrice',
    Quantity: 'quantity',
    DiscountAmount: 'discountAmount',
    DiscountPercent: 'discountPercent',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    AmountExcludingTax: 'amountExcludingTax',
    TaxCode: 'taxCode',
    TaxPercent: 'taxPercent',
    TotalTaxAmount: 'totalTaxAmount',
    AmountIncludingTax: 'amountIncludingTax',
    InvoiceDiscountAllocation: 'invoiceDiscountAllocation',
    NetAmount: 'netAmount',
    NetTaxAmount: 'netTaxAmount',
    NetAmountIncludingTax: 'netAmountIncludingTax',
    ShipmentDate: 'shipmentDate'
} as const;
export type ListSalesInvoiceLinesForSalesInvoiceSelectEnum = typeof ListSalesInvoiceLinesForSalesInvoiceSelectEnum[keyof typeof ListSalesInvoiceLinesForSalesInvoiceSelectEnum];
