/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ListPaymentMethods200Response } from '../model';
// @ts-ignore
import type { PaymentMethod } from '../model';
// @ts-ignore
import type { PostPaymentMethodRequest } from '../model';
/**
 * PaymentMethodApi - axios parameter creator
 * @export
 */
export const PaymentMethodApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type paymentMethod in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} paymentMethodId (v1.0) id for paymentMethod
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePaymentMethod: async (companyId: string, paymentMethodId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deletePaymentMethod', 'companyId', companyId)
            // verify required parameter 'paymentMethodId' is not null or undefined
            assertParamExists('deletePaymentMethod', 'paymentMethodId', paymentMethodId)
            const localVarPath = `/companies({company_id})/paymentMethods({paymentMethod_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"paymentMethod_id"}}`, encodeURIComponent(String(paymentMethodId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type paymentMethod for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} paymentMethodId (v1.0) id for paymentMethod
         * @param {Array<GetPaymentMethodSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethod: async (companyId: string, paymentMethodId: string, $select?: Array<GetPaymentMethodSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPaymentMethod', 'companyId', companyId)
            // verify required parameter 'paymentMethodId' is not null or undefined
            assertParamExists('getPaymentMethod', 'paymentMethodId', paymentMethodId)
            const localVarPath = `/companies({company_id})/paymentMethods({paymentMethod_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"paymentMethod_id"}}`, encodeURIComponent(String(paymentMethodId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of paymentMethods
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPaymentMethodsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaymentMethods: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPaymentMethodsSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listPaymentMethods', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/paymentMethods`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type paymentMethod in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} paymentMethodId (v1.0) id for paymentMethod
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostPaymentMethodRequest} postPaymentMethodRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPaymentMethod: async (companyId: string, paymentMethodId: string, contentType: string, ifMatch: string, postPaymentMethodRequest: PostPaymentMethodRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchPaymentMethod', 'companyId', companyId)
            // verify required parameter 'paymentMethodId' is not null or undefined
            assertParamExists('patchPaymentMethod', 'paymentMethodId', paymentMethodId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchPaymentMethod', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchPaymentMethod', 'ifMatch', ifMatch)
            // verify required parameter 'postPaymentMethodRequest' is not null or undefined
            assertParamExists('patchPaymentMethod', 'postPaymentMethodRequest', postPaymentMethodRequest)
            const localVarPath = `/companies({company_id})/paymentMethods({paymentMethod_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"paymentMethod_id"}}`, encodeURIComponent(String(paymentMethodId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postPaymentMethodRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type paymentMethod in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostPaymentMethodRequest} postPaymentMethodRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaymentMethod: async (companyId: string, contentType: string, postPaymentMethodRequest: PostPaymentMethodRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postPaymentMethod', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postPaymentMethod', 'contentType', contentType)
            // verify required parameter 'postPaymentMethodRequest' is not null or undefined
            assertParamExists('postPaymentMethod', 'postPaymentMethodRequest', postPaymentMethodRequest)
            const localVarPath = `/companies({company_id})/paymentMethods`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postPaymentMethodRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentMethodApi - functional programming interface
 * @export
 */
export const PaymentMethodApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentMethodApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type paymentMethod in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} paymentMethodId (v1.0) id for paymentMethod
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePaymentMethod(companyId: string, paymentMethodId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePaymentMethod(companyId, paymentMethodId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentMethodApi.deletePaymentMethod']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type paymentMethod for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} paymentMethodId (v1.0) id for paymentMethod
         * @param {Array<GetPaymentMethodSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentMethod(companyId: string, paymentMethodId: string, $select?: Array<GetPaymentMethodSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaymentMethod(companyId, paymentMethodId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentMethodApi.getPaymentMethod']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of paymentMethods
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPaymentMethodsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPaymentMethods(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListPaymentMethodsSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPaymentMethods200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPaymentMethods(companyId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentMethodApi.listPaymentMethods']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type paymentMethod in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} paymentMethodId (v1.0) id for paymentMethod
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostPaymentMethodRequest} postPaymentMethodRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPaymentMethod(companyId: string, paymentMethodId: string, contentType: string, ifMatch: string, postPaymentMethodRequest: PostPaymentMethodRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPaymentMethod(companyId, paymentMethodId, contentType, ifMatch, postPaymentMethodRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentMethodApi.patchPaymentMethod']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type paymentMethod in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostPaymentMethodRequest} postPaymentMethodRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPaymentMethod(companyId: string, contentType: string, postPaymentMethodRequest: PostPaymentMethodRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPaymentMethod(companyId, contentType, postPaymentMethodRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentMethodApi.postPaymentMethod']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PaymentMethodApi - factory interface
 * @export
 */
export const PaymentMethodApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentMethodApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type paymentMethod in Dynamics 365 Business Central
         * @param {PaymentMethodApiDeletePaymentMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePaymentMethod(requestParameters: PaymentMethodApiDeletePaymentMethodRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePaymentMethod(requestParameters.companyId, requestParameters.paymentMethodId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type paymentMethod for Dynamics 365 Business Central.
         * @param {PaymentMethodApiGetPaymentMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethod(requestParameters: PaymentMethodApiGetPaymentMethodRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaymentMethod> {
            return localVarFp.getPaymentMethod(requestParameters.companyId, requestParameters.paymentMethodId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of paymentMethods
         * @param {PaymentMethodApiListPaymentMethodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaymentMethods(requestParameters: PaymentMethodApiListPaymentMethodsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPaymentMethods200Response> {
            return localVarFp.listPaymentMethods(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type paymentMethod in Dynamics 365 Business Central
         * @param {PaymentMethodApiPatchPaymentMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPaymentMethod(requestParameters: PaymentMethodApiPatchPaymentMethodRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaymentMethod> {
            return localVarFp.patchPaymentMethod(requestParameters.companyId, requestParameters.paymentMethodId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postPaymentMethodRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type paymentMethod in Dynamics 365 Business Central
         * @param {PaymentMethodApiPostPaymentMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPaymentMethod(requestParameters: PaymentMethodApiPostPaymentMethodRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaymentMethod> {
            return localVarFp.postPaymentMethod(requestParameters.companyId, requestParameters.contentType, requestParameters.postPaymentMethodRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deletePaymentMethod operation in PaymentMethodApi.
 * @export
 * @interface PaymentMethodApiDeletePaymentMethodRequest
 */
export interface PaymentMethodApiDeletePaymentMethodRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PaymentMethodApiDeletePaymentMethod
     */
    readonly companyId: string

    /**
     * (v1.0) id for paymentMethod
     * @type {string}
     * @memberof PaymentMethodApiDeletePaymentMethod
     */
    readonly paymentMethodId: string
}

/**
 * Request parameters for getPaymentMethod operation in PaymentMethodApi.
 * @export
 * @interface PaymentMethodApiGetPaymentMethodRequest
 */
export interface PaymentMethodApiGetPaymentMethodRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PaymentMethodApiGetPaymentMethod
     */
    readonly companyId: string

    /**
     * (v1.0) id for paymentMethod
     * @type {string}
     * @memberof PaymentMethodApiGetPaymentMethod
     */
    readonly paymentMethodId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'code' | 'displayName' | 'lastModifiedDateTime'>}
     * @memberof PaymentMethodApiGetPaymentMethod
     */
    readonly $select?: Array<GetPaymentMethodSelectEnum>
}

/**
 * Request parameters for listPaymentMethods operation in PaymentMethodApi.
 * @export
 * @interface PaymentMethodApiListPaymentMethodsRequest
 */
export interface PaymentMethodApiListPaymentMethodsRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PaymentMethodApiListPaymentMethods
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof PaymentMethodApiListPaymentMethods
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof PaymentMethodApiListPaymentMethods
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof PaymentMethodApiListPaymentMethods
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof PaymentMethodApiListPaymentMethods
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'code' | 'displayName' | 'lastModifiedDateTime'>}
     * @memberof PaymentMethodApiListPaymentMethods
     */
    readonly $select?: Array<ListPaymentMethodsSelectEnum>
}

/**
 * Request parameters for patchPaymentMethod operation in PaymentMethodApi.
 * @export
 * @interface PaymentMethodApiPatchPaymentMethodRequest
 */
export interface PaymentMethodApiPatchPaymentMethodRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PaymentMethodApiPatchPaymentMethod
     */
    readonly companyId: string

    /**
     * (v1.0) id for paymentMethod
     * @type {string}
     * @memberof PaymentMethodApiPatchPaymentMethod
     */
    readonly paymentMethodId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof PaymentMethodApiPatchPaymentMethod
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof PaymentMethodApiPatchPaymentMethod
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostPaymentMethodRequest}
     * @memberof PaymentMethodApiPatchPaymentMethod
     */
    readonly postPaymentMethodRequest: PostPaymentMethodRequest
}

/**
 * Request parameters for postPaymentMethod operation in PaymentMethodApi.
 * @export
 * @interface PaymentMethodApiPostPaymentMethodRequest
 */
export interface PaymentMethodApiPostPaymentMethodRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PaymentMethodApiPostPaymentMethod
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof PaymentMethodApiPostPaymentMethod
     */
    readonly contentType: string

    /**
     * 
     * @type {PostPaymentMethodRequest}
     * @memberof PaymentMethodApiPostPaymentMethod
     */
    readonly postPaymentMethodRequest: PostPaymentMethodRequest
}

/**
 * PaymentMethodApi - object-oriented interface
 * @export
 * @class PaymentMethodApi
 * @extends {BaseAPI}
 */
export class PaymentMethodApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type paymentMethod in Dynamics 365 Business Central
     * @param {PaymentMethodApiDeletePaymentMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodApi
     */
    public deletePaymentMethod(requestParameters: PaymentMethodApiDeletePaymentMethodRequest, options?: RawAxiosRequestConfig) {
        return PaymentMethodApiFp(this.configuration).deletePaymentMethod(requestParameters.companyId, requestParameters.paymentMethodId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type paymentMethod for Dynamics 365 Business Central.
     * @param {PaymentMethodApiGetPaymentMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodApi
     */
    public getPaymentMethod(requestParameters: PaymentMethodApiGetPaymentMethodRequest, options?: RawAxiosRequestConfig) {
        return PaymentMethodApiFp(this.configuration).getPaymentMethod(requestParameters.companyId, requestParameters.paymentMethodId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of paymentMethods
     * @param {PaymentMethodApiListPaymentMethodsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodApi
     */
    public listPaymentMethods(requestParameters: PaymentMethodApiListPaymentMethodsRequest, options?: RawAxiosRequestConfig) {
        return PaymentMethodApiFp(this.configuration).listPaymentMethods(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type paymentMethod in Dynamics 365 Business Central
     * @param {PaymentMethodApiPatchPaymentMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodApi
     */
    public patchPaymentMethod(requestParameters: PaymentMethodApiPatchPaymentMethodRequest, options?: RawAxiosRequestConfig) {
        return PaymentMethodApiFp(this.configuration).patchPaymentMethod(requestParameters.companyId, requestParameters.paymentMethodId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postPaymentMethodRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type paymentMethod in Dynamics 365 Business Central
     * @param {PaymentMethodApiPostPaymentMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodApi
     */
    public postPaymentMethod(requestParameters: PaymentMethodApiPostPaymentMethodRequest, options?: RawAxiosRequestConfig) {
        return PaymentMethodApiFp(this.configuration).postPaymentMethod(requestParameters.companyId, requestParameters.contentType, requestParameters.postPaymentMethodRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetPaymentMethodSelectEnum = {
    Id: 'id',
    Code: 'code',
    DisplayName: 'displayName',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type GetPaymentMethodSelectEnum = typeof GetPaymentMethodSelectEnum[keyof typeof GetPaymentMethodSelectEnum];
/**
 * @export
 */
export const ListPaymentMethodsSelectEnum = {
    Id: 'id',
    Code: 'code',
    DisplayName: 'displayName',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type ListPaymentMethodsSelectEnum = typeof ListPaymentMethodsSelectEnum[keyof typeof ListPaymentMethodsSelectEnum];
