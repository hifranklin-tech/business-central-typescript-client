/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ListTaxAreas200Response } from '../model';
// @ts-ignore
import type { PostTaxAreaRequest } from '../model';
// @ts-ignore
import type { TaxArea } from '../model';
/**
 * TaxAreaApi - axios parameter creator
 * @export
 */
export const TaxAreaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type taxArea in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} taxAreaId (v1.0) id for taxArea
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxArea: async (companyId: string, taxAreaId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteTaxArea', 'companyId', companyId)
            // verify required parameter 'taxAreaId' is not null or undefined
            assertParamExists('deleteTaxArea', 'taxAreaId', taxAreaId)
            const localVarPath = `/companies({company_id})/taxAreas({taxArea_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"taxArea_id"}}`, encodeURIComponent(String(taxAreaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type taxArea for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} taxAreaId (v1.0) id for taxArea
         * @param {Array<GetTaxAreaSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxArea: async (companyId: string, taxAreaId: string, $select?: Array<GetTaxAreaSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getTaxArea', 'companyId', companyId)
            // verify required parameter 'taxAreaId' is not null or undefined
            assertParamExists('getTaxArea', 'taxAreaId', taxAreaId)
            const localVarPath = `/companies({company_id})/taxAreas({taxArea_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"taxArea_id"}}`, encodeURIComponent(String(taxAreaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of taxAreas
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListTaxAreasSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTaxAreas: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListTaxAreasSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listTaxAreas', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/taxAreas`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type taxArea in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} taxAreaId (v1.0) id for taxArea
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostTaxAreaRequest} postTaxAreaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTaxArea: async (companyId: string, taxAreaId: string, contentType: string, ifMatch: string, postTaxAreaRequest: PostTaxAreaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchTaxArea', 'companyId', companyId)
            // verify required parameter 'taxAreaId' is not null or undefined
            assertParamExists('patchTaxArea', 'taxAreaId', taxAreaId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchTaxArea', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchTaxArea', 'ifMatch', ifMatch)
            // verify required parameter 'postTaxAreaRequest' is not null or undefined
            assertParamExists('patchTaxArea', 'postTaxAreaRequest', postTaxAreaRequest)
            const localVarPath = `/companies({company_id})/taxAreas({taxArea_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"taxArea_id"}}`, encodeURIComponent(String(taxAreaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTaxAreaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type taxArea in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostTaxAreaRequest} postTaxAreaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTaxArea: async (companyId: string, contentType: string, postTaxAreaRequest: PostTaxAreaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postTaxArea', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postTaxArea', 'contentType', contentType)
            // verify required parameter 'postTaxAreaRequest' is not null or undefined
            assertParamExists('postTaxArea', 'postTaxAreaRequest', postTaxAreaRequest)
            const localVarPath = `/companies({company_id})/taxAreas`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTaxAreaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaxAreaApi - functional programming interface
 * @export
 */
export const TaxAreaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaxAreaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type taxArea in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} taxAreaId (v1.0) id for taxArea
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTaxArea(companyId: string, taxAreaId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTaxArea(companyId, taxAreaId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaxAreaApi.deleteTaxArea']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type taxArea for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} taxAreaId (v1.0) id for taxArea
         * @param {Array<GetTaxAreaSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaxArea(companyId: string, taxAreaId: string, $select?: Array<GetTaxAreaSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxArea>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTaxArea(companyId, taxAreaId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaxAreaApi.getTaxArea']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of taxAreas
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListTaxAreasSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTaxAreas(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListTaxAreasSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTaxAreas200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTaxAreas(companyId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaxAreaApi.listTaxAreas']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type taxArea in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} taxAreaId (v1.0) id for taxArea
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostTaxAreaRequest} postTaxAreaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchTaxArea(companyId: string, taxAreaId: string, contentType: string, ifMatch: string, postTaxAreaRequest: PostTaxAreaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxArea>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchTaxArea(companyId, taxAreaId, contentType, ifMatch, postTaxAreaRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaxAreaApi.patchTaxArea']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type taxArea in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostTaxAreaRequest} postTaxAreaRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTaxArea(companyId: string, contentType: string, postTaxAreaRequest: PostTaxAreaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxArea>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTaxArea(companyId, contentType, postTaxAreaRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaxAreaApi.postTaxArea']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TaxAreaApi - factory interface
 * @export
 */
export const TaxAreaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaxAreaApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type taxArea in Dynamics 365 Business Central
         * @param {TaxAreaApiDeleteTaxAreaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxArea(requestParameters: TaxAreaApiDeleteTaxAreaRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTaxArea(requestParameters.companyId, requestParameters.taxAreaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type taxArea for Dynamics 365 Business Central.
         * @param {TaxAreaApiGetTaxAreaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxArea(requestParameters: TaxAreaApiGetTaxAreaRequest, options?: RawAxiosRequestConfig): AxiosPromise<TaxArea> {
            return localVarFp.getTaxArea(requestParameters.companyId, requestParameters.taxAreaId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of taxAreas
         * @param {TaxAreaApiListTaxAreasRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTaxAreas(requestParameters: TaxAreaApiListTaxAreasRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListTaxAreas200Response> {
            return localVarFp.listTaxAreas(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type taxArea in Dynamics 365 Business Central
         * @param {TaxAreaApiPatchTaxAreaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTaxArea(requestParameters: TaxAreaApiPatchTaxAreaRequest, options?: RawAxiosRequestConfig): AxiosPromise<TaxArea> {
            return localVarFp.patchTaxArea(requestParameters.companyId, requestParameters.taxAreaId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postTaxAreaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type taxArea in Dynamics 365 Business Central
         * @param {TaxAreaApiPostTaxAreaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTaxArea(requestParameters: TaxAreaApiPostTaxAreaRequest, options?: RawAxiosRequestConfig): AxiosPromise<TaxArea> {
            return localVarFp.postTaxArea(requestParameters.companyId, requestParameters.contentType, requestParameters.postTaxAreaRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteTaxArea operation in TaxAreaApi.
 * @export
 * @interface TaxAreaApiDeleteTaxAreaRequest
 */
export interface TaxAreaApiDeleteTaxAreaRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof TaxAreaApiDeleteTaxArea
     */
    readonly companyId: string

    /**
     * (v1.0) id for taxArea
     * @type {string}
     * @memberof TaxAreaApiDeleteTaxArea
     */
    readonly taxAreaId: string
}

/**
 * Request parameters for getTaxArea operation in TaxAreaApi.
 * @export
 * @interface TaxAreaApiGetTaxAreaRequest
 */
export interface TaxAreaApiGetTaxAreaRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof TaxAreaApiGetTaxArea
     */
    readonly companyId: string

    /**
     * (v1.0) id for taxArea
     * @type {string}
     * @memberof TaxAreaApiGetTaxArea
     */
    readonly taxAreaId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'code' | 'displayName' | 'taxType' | 'lastModifiedDateTime'>}
     * @memberof TaxAreaApiGetTaxArea
     */
    readonly $select?: Array<GetTaxAreaSelectEnum>
}

/**
 * Request parameters for listTaxAreas operation in TaxAreaApi.
 * @export
 * @interface TaxAreaApiListTaxAreasRequest
 */
export interface TaxAreaApiListTaxAreasRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof TaxAreaApiListTaxAreas
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof TaxAreaApiListTaxAreas
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof TaxAreaApiListTaxAreas
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof TaxAreaApiListTaxAreas
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof TaxAreaApiListTaxAreas
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'code' | 'displayName' | 'taxType' | 'lastModifiedDateTime'>}
     * @memberof TaxAreaApiListTaxAreas
     */
    readonly $select?: Array<ListTaxAreasSelectEnum>
}

/**
 * Request parameters for patchTaxArea operation in TaxAreaApi.
 * @export
 * @interface TaxAreaApiPatchTaxAreaRequest
 */
export interface TaxAreaApiPatchTaxAreaRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof TaxAreaApiPatchTaxArea
     */
    readonly companyId: string

    /**
     * (v1.0) id for taxArea
     * @type {string}
     * @memberof TaxAreaApiPatchTaxArea
     */
    readonly taxAreaId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof TaxAreaApiPatchTaxArea
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof TaxAreaApiPatchTaxArea
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostTaxAreaRequest}
     * @memberof TaxAreaApiPatchTaxArea
     */
    readonly postTaxAreaRequest: PostTaxAreaRequest
}

/**
 * Request parameters for postTaxArea operation in TaxAreaApi.
 * @export
 * @interface TaxAreaApiPostTaxAreaRequest
 */
export interface TaxAreaApiPostTaxAreaRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof TaxAreaApiPostTaxArea
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof TaxAreaApiPostTaxArea
     */
    readonly contentType: string

    /**
     * 
     * @type {PostTaxAreaRequest}
     * @memberof TaxAreaApiPostTaxArea
     */
    readonly postTaxAreaRequest: PostTaxAreaRequest
}

/**
 * TaxAreaApi - object-oriented interface
 * @export
 * @class TaxAreaApi
 * @extends {BaseAPI}
 */
export class TaxAreaApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type taxArea in Dynamics 365 Business Central
     * @param {TaxAreaApiDeleteTaxAreaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxAreaApi
     */
    public deleteTaxArea(requestParameters: TaxAreaApiDeleteTaxAreaRequest, options?: RawAxiosRequestConfig) {
        return TaxAreaApiFp(this.configuration).deleteTaxArea(requestParameters.companyId, requestParameters.taxAreaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type taxArea for Dynamics 365 Business Central.
     * @param {TaxAreaApiGetTaxAreaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxAreaApi
     */
    public getTaxArea(requestParameters: TaxAreaApiGetTaxAreaRequest, options?: RawAxiosRequestConfig) {
        return TaxAreaApiFp(this.configuration).getTaxArea(requestParameters.companyId, requestParameters.taxAreaId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of taxAreas
     * @param {TaxAreaApiListTaxAreasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxAreaApi
     */
    public listTaxAreas(requestParameters: TaxAreaApiListTaxAreasRequest, options?: RawAxiosRequestConfig) {
        return TaxAreaApiFp(this.configuration).listTaxAreas(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type taxArea in Dynamics 365 Business Central
     * @param {TaxAreaApiPatchTaxAreaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxAreaApi
     */
    public patchTaxArea(requestParameters: TaxAreaApiPatchTaxAreaRequest, options?: RawAxiosRequestConfig) {
        return TaxAreaApiFp(this.configuration).patchTaxArea(requestParameters.companyId, requestParameters.taxAreaId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postTaxAreaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type taxArea in Dynamics 365 Business Central
     * @param {TaxAreaApiPostTaxAreaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxAreaApi
     */
    public postTaxArea(requestParameters: TaxAreaApiPostTaxAreaRequest, options?: RawAxiosRequestConfig) {
        return TaxAreaApiFp(this.configuration).postTaxArea(requestParameters.companyId, requestParameters.contentType, requestParameters.postTaxAreaRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetTaxAreaSelectEnum = {
    Id: 'id',
    Code: 'code',
    DisplayName: 'displayName',
    TaxType: 'taxType',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type GetTaxAreaSelectEnum = typeof GetTaxAreaSelectEnum[keyof typeof GetTaxAreaSelectEnum];
/**
 * @export
 */
export const ListTaxAreasSelectEnum = {
    Id: 'id',
    Code: 'code',
    DisplayName: 'displayName',
    TaxType: 'taxType',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type ListTaxAreasSelectEnum = typeof ListTaxAreasSelectEnum[keyof typeof ListTaxAreasSelectEnum];
