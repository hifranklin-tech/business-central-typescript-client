/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ListSalesCreditMemoLinesForSalesCreditMemo200Response } from '../model';
// @ts-ignore
import type { PostSalesCreditMemoLineForSalesCreditMemoRequest } from '../model';
// @ts-ignore
import type { SalesCreditMemoLine } from '../model';
/**
 * SalesCreditMemoLineApi - axios parameter creator
 * @export
 */
export const SalesCreditMemoLineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type salesCreditMemoLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoLineId (v1.0) id for salesCreditMemoLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesCreditMemoLine: async (companyId: string, salesCreditMemoLineId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteSalesCreditMemoLine', 'companyId', companyId)
            // verify required parameter 'salesCreditMemoLineId' is not null or undefined
            assertParamExists('deleteSalesCreditMemoLine', 'salesCreditMemoLineId', salesCreditMemoLineId)
            const localVarPath = `/companies({company_id})/salesCreditMemoLines('{salesCreditMemoLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesCreditMemoLine_id"}}`, encodeURIComponent(String(salesCreditMemoLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an object of type salesCreditMemoLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {string} salesCreditMemoLineId (v1.0) id for salesCreditMemoLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesCreditMemoLineForSalesCreditMemo: async (companyId: string, salesCreditMemoId: string, salesCreditMemoLineId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteSalesCreditMemoLineForSalesCreditMemo', 'companyId', companyId)
            // verify required parameter 'salesCreditMemoId' is not null or undefined
            assertParamExists('deleteSalesCreditMemoLineForSalesCreditMemo', 'salesCreditMemoId', salesCreditMemoId)
            // verify required parameter 'salesCreditMemoLineId' is not null or undefined
            assertParamExists('deleteSalesCreditMemoLineForSalesCreditMemo', 'salesCreditMemoLineId', salesCreditMemoLineId)
            const localVarPath = `/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/salesCreditMemoLines('{salesCreditMemoLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesCreditMemo_id"}}`, encodeURIComponent(String(salesCreditMemoId)))
                .replace(`{${"salesCreditMemoLine_id"}}`, encodeURIComponent(String(salesCreditMemoLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesCreditMemoLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoLineId (v1.0) id for salesCreditMemoLine
         * @param {Array<GetSalesCreditMemoLineExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesCreditMemoLineSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesCreditMemoLine: async (companyId: string, salesCreditMemoLineId: string, $expand?: Array<GetSalesCreditMemoLineExpandEnum>, $select?: Array<GetSalesCreditMemoLineSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSalesCreditMemoLine', 'companyId', companyId)
            // verify required parameter 'salesCreditMemoLineId' is not null or undefined
            assertParamExists('getSalesCreditMemoLine', 'salesCreditMemoLineId', salesCreditMemoLineId)
            const localVarPath = `/companies({company_id})/salesCreditMemoLines('{salesCreditMemoLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesCreditMemoLine_id"}}`, encodeURIComponent(String(salesCreditMemoLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesCreditMemoLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {string} salesCreditMemoLineId (v1.0) id for salesCreditMemoLine
         * @param {Array<GetSalesCreditMemoLineForSalesCreditMemoExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesCreditMemoLineForSalesCreditMemoSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesCreditMemoLineForSalesCreditMemo: async (companyId: string, salesCreditMemoId: string, salesCreditMemoLineId: string, $expand?: Array<GetSalesCreditMemoLineForSalesCreditMemoExpandEnum>, $select?: Array<GetSalesCreditMemoLineForSalesCreditMemoSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSalesCreditMemoLineForSalesCreditMemo', 'companyId', companyId)
            // verify required parameter 'salesCreditMemoId' is not null or undefined
            assertParamExists('getSalesCreditMemoLineForSalesCreditMemo', 'salesCreditMemoId', salesCreditMemoId)
            // verify required parameter 'salesCreditMemoLineId' is not null or undefined
            assertParamExists('getSalesCreditMemoLineForSalesCreditMemo', 'salesCreditMemoLineId', salesCreditMemoLineId)
            const localVarPath = `/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/salesCreditMemoLines('{salesCreditMemoLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesCreditMemo_id"}}`, encodeURIComponent(String(salesCreditMemoId)))
                .replace(`{${"salesCreditMemoLine_id"}}`, encodeURIComponent(String(salesCreditMemoLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of salesCreditMemoLines
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesCreditMemoLinesExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesCreditMemoLinesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesCreditMemoLines: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesCreditMemoLinesExpandEnum>, $select?: Array<ListSalesCreditMemoLinesSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listSalesCreditMemoLines', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/salesCreditMemoLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of salesCreditMemoLines
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesCreditMemoLinesForSalesCreditMemoExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesCreditMemoLinesForSalesCreditMemoSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesCreditMemoLinesForSalesCreditMemo: async (companyId: string, salesCreditMemoId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesCreditMemoLinesForSalesCreditMemoExpandEnum>, $select?: Array<ListSalesCreditMemoLinesForSalesCreditMemoSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listSalesCreditMemoLinesForSalesCreditMemo', 'companyId', companyId)
            // verify required parameter 'salesCreditMemoId' is not null or undefined
            assertParamExists('listSalesCreditMemoLinesForSalesCreditMemo', 'salesCreditMemoId', salesCreditMemoId)
            const localVarPath = `/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/salesCreditMemoLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesCreditMemo_id"}}`, encodeURIComponent(String(salesCreditMemoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type salesCreditMemoLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoLineId (v1.0) id for salesCreditMemoLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesCreditMemoLineForSalesCreditMemoRequest} postSalesCreditMemoLineForSalesCreditMemoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesCreditMemoLine: async (companyId: string, salesCreditMemoLineId: string, contentType: string, ifMatch: string, postSalesCreditMemoLineForSalesCreditMemoRequest: PostSalesCreditMemoLineForSalesCreditMemoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchSalesCreditMemoLine', 'companyId', companyId)
            // verify required parameter 'salesCreditMemoLineId' is not null or undefined
            assertParamExists('patchSalesCreditMemoLine', 'salesCreditMemoLineId', salesCreditMemoLineId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchSalesCreditMemoLine', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchSalesCreditMemoLine', 'ifMatch', ifMatch)
            // verify required parameter 'postSalesCreditMemoLineForSalesCreditMemoRequest' is not null or undefined
            assertParamExists('patchSalesCreditMemoLine', 'postSalesCreditMemoLineForSalesCreditMemoRequest', postSalesCreditMemoLineForSalesCreditMemoRequest)
            const localVarPath = `/companies({company_id})/salesCreditMemoLines('{salesCreditMemoLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesCreditMemoLine_id"}}`, encodeURIComponent(String(salesCreditMemoLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesCreditMemoLineForSalesCreditMemoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type salesCreditMemoLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {string} salesCreditMemoLineId (v1.0) id for salesCreditMemoLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesCreditMemoLineForSalesCreditMemoRequest} postSalesCreditMemoLineForSalesCreditMemoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesCreditMemoLineForSalesCreditMemo: async (companyId: string, salesCreditMemoId: string, salesCreditMemoLineId: string, contentType: string, ifMatch: string, postSalesCreditMemoLineForSalesCreditMemoRequest: PostSalesCreditMemoLineForSalesCreditMemoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchSalesCreditMemoLineForSalesCreditMemo', 'companyId', companyId)
            // verify required parameter 'salesCreditMemoId' is not null or undefined
            assertParamExists('patchSalesCreditMemoLineForSalesCreditMemo', 'salesCreditMemoId', salesCreditMemoId)
            // verify required parameter 'salesCreditMemoLineId' is not null or undefined
            assertParamExists('patchSalesCreditMemoLineForSalesCreditMemo', 'salesCreditMemoLineId', salesCreditMemoLineId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchSalesCreditMemoLineForSalesCreditMemo', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchSalesCreditMemoLineForSalesCreditMemo', 'ifMatch', ifMatch)
            // verify required parameter 'postSalesCreditMemoLineForSalesCreditMemoRequest' is not null or undefined
            assertParamExists('patchSalesCreditMemoLineForSalesCreditMemo', 'postSalesCreditMemoLineForSalesCreditMemoRequest', postSalesCreditMemoLineForSalesCreditMemoRequest)
            const localVarPath = `/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/salesCreditMemoLines('{salesCreditMemoLine_id}')`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesCreditMemo_id"}}`, encodeURIComponent(String(salesCreditMemoId)))
                .replace(`{${"salesCreditMemoLine_id"}}`, encodeURIComponent(String(salesCreditMemoLineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesCreditMemoLineForSalesCreditMemoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type salesCreditMemoLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesCreditMemoLineForSalesCreditMemoRequest} postSalesCreditMemoLineForSalesCreditMemoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesCreditMemoLine: async (companyId: string, contentType: string, postSalesCreditMemoLineForSalesCreditMemoRequest: PostSalesCreditMemoLineForSalesCreditMemoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postSalesCreditMemoLine', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postSalesCreditMemoLine', 'contentType', contentType)
            // verify required parameter 'postSalesCreditMemoLineForSalesCreditMemoRequest' is not null or undefined
            assertParamExists('postSalesCreditMemoLine', 'postSalesCreditMemoLineForSalesCreditMemoRequest', postSalesCreditMemoLineForSalesCreditMemoRequest)
            const localVarPath = `/companies({company_id})/salesCreditMemoLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesCreditMemoLineForSalesCreditMemoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type salesCreditMemoLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesCreditMemoLineForSalesCreditMemoRequest} postSalesCreditMemoLineForSalesCreditMemoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesCreditMemoLineForSalesCreditMemo: async (companyId: string, salesCreditMemoId: string, contentType: string, postSalesCreditMemoLineForSalesCreditMemoRequest: PostSalesCreditMemoLineForSalesCreditMemoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postSalesCreditMemoLineForSalesCreditMemo', 'companyId', companyId)
            // verify required parameter 'salesCreditMemoId' is not null or undefined
            assertParamExists('postSalesCreditMemoLineForSalesCreditMemo', 'salesCreditMemoId', salesCreditMemoId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postSalesCreditMemoLineForSalesCreditMemo', 'contentType', contentType)
            // verify required parameter 'postSalesCreditMemoLineForSalesCreditMemoRequest' is not null or undefined
            assertParamExists('postSalesCreditMemoLineForSalesCreditMemo', 'postSalesCreditMemoLineForSalesCreditMemoRequest', postSalesCreditMemoLineForSalesCreditMemoRequest)
            const localVarPath = `/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/salesCreditMemoLines`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"salesCreditMemo_id"}}`, encodeURIComponent(String(salesCreditMemoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSalesCreditMemoLineForSalesCreditMemoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalesCreditMemoLineApi - functional programming interface
 * @export
 */
export const SalesCreditMemoLineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalesCreditMemoLineApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type salesCreditMemoLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoLineId (v1.0) id for salesCreditMemoLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalesCreditMemoLine(companyId: string, salesCreditMemoLineId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalesCreditMemoLine(companyId, salesCreditMemoLineId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditMemoLineApi.deleteSalesCreditMemoLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes an object of type salesCreditMemoLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {string} salesCreditMemoLineId (v1.0) id for salesCreditMemoLine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalesCreditMemoLineForSalesCreditMemo(companyId: string, salesCreditMemoId: string, salesCreditMemoLineId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalesCreditMemoLineForSalesCreditMemo(companyId, salesCreditMemoId, salesCreditMemoLineId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditMemoLineApi.deleteSalesCreditMemoLineForSalesCreditMemo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesCreditMemoLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoLineId (v1.0) id for salesCreditMemoLine
         * @param {Array<GetSalesCreditMemoLineExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesCreditMemoLineSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesCreditMemoLine(companyId: string, salesCreditMemoLineId: string, $expand?: Array<GetSalesCreditMemoLineExpandEnum>, $select?: Array<GetSalesCreditMemoLineSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesCreditMemoLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesCreditMemoLine(companyId, salesCreditMemoLineId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditMemoLineApi.getSalesCreditMemoLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesCreditMemoLine for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {string} salesCreditMemoLineId (v1.0) id for salesCreditMemoLine
         * @param {Array<GetSalesCreditMemoLineForSalesCreditMemoExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetSalesCreditMemoLineForSalesCreditMemoSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesCreditMemoLineForSalesCreditMemo(companyId: string, salesCreditMemoId: string, salesCreditMemoLineId: string, $expand?: Array<GetSalesCreditMemoLineForSalesCreditMemoExpandEnum>, $select?: Array<GetSalesCreditMemoLineForSalesCreditMemoSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesCreditMemoLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesCreditMemoLineForSalesCreditMemo(companyId, salesCreditMemoId, salesCreditMemoLineId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditMemoLineApi.getSalesCreditMemoLineForSalesCreditMemo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of salesCreditMemoLines
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesCreditMemoLinesExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesCreditMemoLinesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSalesCreditMemoLines(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesCreditMemoLinesExpandEnum>, $select?: Array<ListSalesCreditMemoLinesSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListSalesCreditMemoLinesForSalesCreditMemo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSalesCreditMemoLines(companyId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditMemoLineApi.listSalesCreditMemoLines']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of salesCreditMemoLines
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListSalesCreditMemoLinesForSalesCreditMemoExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListSalesCreditMemoLinesForSalesCreditMemoSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSalesCreditMemoLinesForSalesCreditMemo(companyId: string, salesCreditMemoId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListSalesCreditMemoLinesForSalesCreditMemoExpandEnum>, $select?: Array<ListSalesCreditMemoLinesForSalesCreditMemoSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListSalesCreditMemoLinesForSalesCreditMemo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSalesCreditMemoLinesForSalesCreditMemo(companyId, salesCreditMemoId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditMemoLineApi.listSalesCreditMemoLinesForSalesCreditMemo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type salesCreditMemoLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoLineId (v1.0) id for salesCreditMemoLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesCreditMemoLineForSalesCreditMemoRequest} postSalesCreditMemoLineForSalesCreditMemoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSalesCreditMemoLine(companyId: string, salesCreditMemoLineId: string, contentType: string, ifMatch: string, postSalesCreditMemoLineForSalesCreditMemoRequest: PostSalesCreditMemoLineForSalesCreditMemoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesCreditMemoLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSalesCreditMemoLine(companyId, salesCreditMemoLineId, contentType, ifMatch, postSalesCreditMemoLineForSalesCreditMemoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditMemoLineApi.patchSalesCreditMemoLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type salesCreditMemoLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {string} salesCreditMemoLineId (v1.0) id for salesCreditMemoLine
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostSalesCreditMemoLineForSalesCreditMemoRequest} postSalesCreditMemoLineForSalesCreditMemoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSalesCreditMemoLineForSalesCreditMemo(companyId: string, salesCreditMemoId: string, salesCreditMemoLineId: string, contentType: string, ifMatch: string, postSalesCreditMemoLineForSalesCreditMemoRequest: PostSalesCreditMemoLineForSalesCreditMemoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesCreditMemoLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSalesCreditMemoLineForSalesCreditMemo(companyId, salesCreditMemoId, salesCreditMemoLineId, contentType, ifMatch, postSalesCreditMemoLineForSalesCreditMemoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditMemoLineApi.patchSalesCreditMemoLineForSalesCreditMemo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type salesCreditMemoLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesCreditMemoLineForSalesCreditMemoRequest} postSalesCreditMemoLineForSalesCreditMemoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSalesCreditMemoLine(companyId: string, contentType: string, postSalesCreditMemoLineForSalesCreditMemoRequest: PostSalesCreditMemoLineForSalesCreditMemoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesCreditMemoLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSalesCreditMemoLine(companyId, contentType, postSalesCreditMemoLineForSalesCreditMemoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditMemoLineApi.postSalesCreditMemoLine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type salesCreditMemoLine in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} salesCreditMemoId (v1.0) id for salesCreditMemo
         * @param {string} contentType (v1.0) application/json
         * @param {PostSalesCreditMemoLineForSalesCreditMemoRequest} postSalesCreditMemoLineForSalesCreditMemoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSalesCreditMemoLineForSalesCreditMemo(companyId: string, salesCreditMemoId: string, contentType: string, postSalesCreditMemoLineForSalesCreditMemoRequest: PostSalesCreditMemoLineForSalesCreditMemoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesCreditMemoLine>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSalesCreditMemoLineForSalesCreditMemo(companyId, salesCreditMemoId, contentType, postSalesCreditMemoLineForSalesCreditMemoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditMemoLineApi.postSalesCreditMemoLineForSalesCreditMemo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SalesCreditMemoLineApi - factory interface
 * @export
 */
export const SalesCreditMemoLineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalesCreditMemoLineApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type salesCreditMemoLine in Dynamics 365 Business Central
         * @param {SalesCreditMemoLineApiDeleteSalesCreditMemoLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesCreditMemoLine(requestParameters: SalesCreditMemoLineApiDeleteSalesCreditMemoLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSalesCreditMemoLine(requestParameters.companyId, requestParameters.salesCreditMemoLineId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an object of type salesCreditMemoLine in Dynamics 365 Business Central
         * @param {SalesCreditMemoLineApiDeleteSalesCreditMemoLineForSalesCreditMemoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalesCreditMemoLineForSalesCreditMemo(requestParameters: SalesCreditMemoLineApiDeleteSalesCreditMemoLineForSalesCreditMemoRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSalesCreditMemoLineForSalesCreditMemo(requestParameters.companyId, requestParameters.salesCreditMemoId, requestParameters.salesCreditMemoLineId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesCreditMemoLine for Dynamics 365 Business Central.
         * @param {SalesCreditMemoLineApiGetSalesCreditMemoLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesCreditMemoLine(requestParameters: SalesCreditMemoLineApiGetSalesCreditMemoLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesCreditMemoLine> {
            return localVarFp.getSalesCreditMemoLine(requestParameters.companyId, requestParameters.salesCreditMemoLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type salesCreditMemoLine for Dynamics 365 Business Central.
         * @param {SalesCreditMemoLineApiGetSalesCreditMemoLineForSalesCreditMemoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesCreditMemoLineForSalesCreditMemo(requestParameters: SalesCreditMemoLineApiGetSalesCreditMemoLineForSalesCreditMemoRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesCreditMemoLine> {
            return localVarFp.getSalesCreditMemoLineForSalesCreditMemo(requestParameters.companyId, requestParameters.salesCreditMemoId, requestParameters.salesCreditMemoLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of salesCreditMemoLines
         * @param {SalesCreditMemoLineApiListSalesCreditMemoLinesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesCreditMemoLines(requestParameters: SalesCreditMemoLineApiListSalesCreditMemoLinesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListSalesCreditMemoLinesForSalesCreditMemo200Response> {
            return localVarFp.listSalesCreditMemoLines(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of salesCreditMemoLines
         * @param {SalesCreditMemoLineApiListSalesCreditMemoLinesForSalesCreditMemoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSalesCreditMemoLinesForSalesCreditMemo(requestParameters: SalesCreditMemoLineApiListSalesCreditMemoLinesForSalesCreditMemoRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListSalesCreditMemoLinesForSalesCreditMemo200Response> {
            return localVarFp.listSalesCreditMemoLinesForSalesCreditMemo(requestParameters.companyId, requestParameters.salesCreditMemoId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type salesCreditMemoLine in Dynamics 365 Business Central
         * @param {SalesCreditMemoLineApiPatchSalesCreditMemoLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesCreditMemoLine(requestParameters: SalesCreditMemoLineApiPatchSalesCreditMemoLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesCreditMemoLine> {
            return localVarFp.patchSalesCreditMemoLine(requestParameters.companyId, requestParameters.salesCreditMemoLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesCreditMemoLineForSalesCreditMemoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type salesCreditMemoLine in Dynamics 365 Business Central
         * @param {SalesCreditMemoLineApiPatchSalesCreditMemoLineForSalesCreditMemoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSalesCreditMemoLineForSalesCreditMemo(requestParameters: SalesCreditMemoLineApiPatchSalesCreditMemoLineForSalesCreditMemoRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesCreditMemoLine> {
            return localVarFp.patchSalesCreditMemoLineForSalesCreditMemo(requestParameters.companyId, requestParameters.salesCreditMemoId, requestParameters.salesCreditMemoLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesCreditMemoLineForSalesCreditMemoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type salesCreditMemoLine in Dynamics 365 Business Central
         * @param {SalesCreditMemoLineApiPostSalesCreditMemoLineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesCreditMemoLine(requestParameters: SalesCreditMemoLineApiPostSalesCreditMemoLineRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesCreditMemoLine> {
            return localVarFp.postSalesCreditMemoLine(requestParameters.companyId, requestParameters.contentType, requestParameters.postSalesCreditMemoLineForSalesCreditMemoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type salesCreditMemoLine in Dynamics 365 Business Central
         * @param {SalesCreditMemoLineApiPostSalesCreditMemoLineForSalesCreditMemoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSalesCreditMemoLineForSalesCreditMemo(requestParameters: SalesCreditMemoLineApiPostSalesCreditMemoLineForSalesCreditMemoRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesCreditMemoLine> {
            return localVarFp.postSalesCreditMemoLineForSalesCreditMemo(requestParameters.companyId, requestParameters.salesCreditMemoId, requestParameters.contentType, requestParameters.postSalesCreditMemoLineForSalesCreditMemoRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteSalesCreditMemoLine operation in SalesCreditMemoLineApi.
 * @export
 * @interface SalesCreditMemoLineApiDeleteSalesCreditMemoLineRequest
 */
export interface SalesCreditMemoLineApiDeleteSalesCreditMemoLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesCreditMemoLineApiDeleteSalesCreditMemoLine
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesCreditMemoLine
     * @type {string}
     * @memberof SalesCreditMemoLineApiDeleteSalesCreditMemoLine
     */
    readonly salesCreditMemoLineId: string
}

/**
 * Request parameters for deleteSalesCreditMemoLineForSalesCreditMemo operation in SalesCreditMemoLineApi.
 * @export
 * @interface SalesCreditMemoLineApiDeleteSalesCreditMemoLineForSalesCreditMemoRequest
 */
export interface SalesCreditMemoLineApiDeleteSalesCreditMemoLineForSalesCreditMemoRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesCreditMemoLineApiDeleteSalesCreditMemoLineForSalesCreditMemo
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesCreditMemo
     * @type {string}
     * @memberof SalesCreditMemoLineApiDeleteSalesCreditMemoLineForSalesCreditMemo
     */
    readonly salesCreditMemoId: string

    /**
     * (v1.0) id for salesCreditMemoLine
     * @type {string}
     * @memberof SalesCreditMemoLineApiDeleteSalesCreditMemoLineForSalesCreditMemo
     */
    readonly salesCreditMemoLineId: string
}

/**
 * Request parameters for getSalesCreditMemoLine operation in SalesCreditMemoLineApi.
 * @export
 * @interface SalesCreditMemoLineApiGetSalesCreditMemoLineRequest
 */
export interface SalesCreditMemoLineApiGetSalesCreditMemoLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesCreditMemoLineApiGetSalesCreditMemoLine
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesCreditMemoLine
     * @type {string}
     * @memberof SalesCreditMemoLineApiGetSalesCreditMemoLine
     */
    readonly salesCreditMemoLineId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'item' | 'account'>}
     * @memberof SalesCreditMemoLineApiGetSalesCreditMemoLine
     */
    readonly $expand?: Array<GetSalesCreditMemoLineExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'documentId' | 'sequence' | 'itemId' | 'accountId' | 'lineType' | 'lineDetails' | 'description' | 'unitOfMeasureId' | 'unitOfMeasure' | 'unitPrice' | 'quantity' | 'discountAmount' | 'discountPercent' | 'discountAppliedBeforeTax' | 'amountExcludingTax' | 'taxCode' | 'taxPercent' | 'totalTaxAmount' | 'amountIncludingTax' | 'invoiceDiscountAllocation' | 'netAmount' | 'netTaxAmount' | 'netAmountIncludingTax' | 'shipmentDate'>}
     * @memberof SalesCreditMemoLineApiGetSalesCreditMemoLine
     */
    readonly $select?: Array<GetSalesCreditMemoLineSelectEnum>
}

/**
 * Request parameters for getSalesCreditMemoLineForSalesCreditMemo operation in SalesCreditMemoLineApi.
 * @export
 * @interface SalesCreditMemoLineApiGetSalesCreditMemoLineForSalesCreditMemoRequest
 */
export interface SalesCreditMemoLineApiGetSalesCreditMemoLineForSalesCreditMemoRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesCreditMemoLineApiGetSalesCreditMemoLineForSalesCreditMemo
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesCreditMemo
     * @type {string}
     * @memberof SalesCreditMemoLineApiGetSalesCreditMemoLineForSalesCreditMemo
     */
    readonly salesCreditMemoId: string

    /**
     * (v1.0) id for salesCreditMemoLine
     * @type {string}
     * @memberof SalesCreditMemoLineApiGetSalesCreditMemoLineForSalesCreditMemo
     */
    readonly salesCreditMemoLineId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'item' | 'account'>}
     * @memberof SalesCreditMemoLineApiGetSalesCreditMemoLineForSalesCreditMemo
     */
    readonly $expand?: Array<GetSalesCreditMemoLineForSalesCreditMemoExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'documentId' | 'sequence' | 'itemId' | 'accountId' | 'lineType' | 'lineDetails' | 'description' | 'unitOfMeasureId' | 'unitOfMeasure' | 'unitPrice' | 'quantity' | 'discountAmount' | 'discountPercent' | 'discountAppliedBeforeTax' | 'amountExcludingTax' | 'taxCode' | 'taxPercent' | 'totalTaxAmount' | 'amountIncludingTax' | 'invoiceDiscountAllocation' | 'netAmount' | 'netTaxAmount' | 'netAmountIncludingTax' | 'shipmentDate'>}
     * @memberof SalesCreditMemoLineApiGetSalesCreditMemoLineForSalesCreditMemo
     */
    readonly $select?: Array<GetSalesCreditMemoLineForSalesCreditMemoSelectEnum>
}

/**
 * Request parameters for listSalesCreditMemoLines operation in SalesCreditMemoLineApi.
 * @export
 * @interface SalesCreditMemoLineApiListSalesCreditMemoLinesRequest
 */
export interface SalesCreditMemoLineApiListSalesCreditMemoLinesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesCreditMemoLineApiListSalesCreditMemoLines
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof SalesCreditMemoLineApiListSalesCreditMemoLines
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof SalesCreditMemoLineApiListSalesCreditMemoLines
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof SalesCreditMemoLineApiListSalesCreditMemoLines
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof SalesCreditMemoLineApiListSalesCreditMemoLines
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'item' | 'account'>}
     * @memberof SalesCreditMemoLineApiListSalesCreditMemoLines
     */
    readonly $expand?: Array<ListSalesCreditMemoLinesExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'documentId' | 'sequence' | 'itemId' | 'accountId' | 'lineType' | 'lineDetails' | 'description' | 'unitOfMeasureId' | 'unitOfMeasure' | 'unitPrice' | 'quantity' | 'discountAmount' | 'discountPercent' | 'discountAppliedBeforeTax' | 'amountExcludingTax' | 'taxCode' | 'taxPercent' | 'totalTaxAmount' | 'amountIncludingTax' | 'invoiceDiscountAllocation' | 'netAmount' | 'netTaxAmount' | 'netAmountIncludingTax' | 'shipmentDate'>}
     * @memberof SalesCreditMemoLineApiListSalesCreditMemoLines
     */
    readonly $select?: Array<ListSalesCreditMemoLinesSelectEnum>
}

/**
 * Request parameters for listSalesCreditMemoLinesForSalesCreditMemo operation in SalesCreditMemoLineApi.
 * @export
 * @interface SalesCreditMemoLineApiListSalesCreditMemoLinesForSalesCreditMemoRequest
 */
export interface SalesCreditMemoLineApiListSalesCreditMemoLinesForSalesCreditMemoRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesCreditMemoLineApiListSalesCreditMemoLinesForSalesCreditMemo
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesCreditMemo
     * @type {string}
     * @memberof SalesCreditMemoLineApiListSalesCreditMemoLinesForSalesCreditMemo
     */
    readonly salesCreditMemoId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof SalesCreditMemoLineApiListSalesCreditMemoLinesForSalesCreditMemo
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof SalesCreditMemoLineApiListSalesCreditMemoLinesForSalesCreditMemo
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof SalesCreditMemoLineApiListSalesCreditMemoLinesForSalesCreditMemo
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof SalesCreditMemoLineApiListSalesCreditMemoLinesForSalesCreditMemo
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'item' | 'account'>}
     * @memberof SalesCreditMemoLineApiListSalesCreditMemoLinesForSalesCreditMemo
     */
    readonly $expand?: Array<ListSalesCreditMemoLinesForSalesCreditMemoExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'documentId' | 'sequence' | 'itemId' | 'accountId' | 'lineType' | 'lineDetails' | 'description' | 'unitOfMeasureId' | 'unitOfMeasure' | 'unitPrice' | 'quantity' | 'discountAmount' | 'discountPercent' | 'discountAppliedBeforeTax' | 'amountExcludingTax' | 'taxCode' | 'taxPercent' | 'totalTaxAmount' | 'amountIncludingTax' | 'invoiceDiscountAllocation' | 'netAmount' | 'netTaxAmount' | 'netAmountIncludingTax' | 'shipmentDate'>}
     * @memberof SalesCreditMemoLineApiListSalesCreditMemoLinesForSalesCreditMemo
     */
    readonly $select?: Array<ListSalesCreditMemoLinesForSalesCreditMemoSelectEnum>
}

/**
 * Request parameters for patchSalesCreditMemoLine operation in SalesCreditMemoLineApi.
 * @export
 * @interface SalesCreditMemoLineApiPatchSalesCreditMemoLineRequest
 */
export interface SalesCreditMemoLineApiPatchSalesCreditMemoLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesCreditMemoLineApiPatchSalesCreditMemoLine
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesCreditMemoLine
     * @type {string}
     * @memberof SalesCreditMemoLineApiPatchSalesCreditMemoLine
     */
    readonly salesCreditMemoLineId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesCreditMemoLineApiPatchSalesCreditMemoLine
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof SalesCreditMemoLineApiPatchSalesCreditMemoLine
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostSalesCreditMemoLineForSalesCreditMemoRequest}
     * @memberof SalesCreditMemoLineApiPatchSalesCreditMemoLine
     */
    readonly postSalesCreditMemoLineForSalesCreditMemoRequest: PostSalesCreditMemoLineForSalesCreditMemoRequest
}

/**
 * Request parameters for patchSalesCreditMemoLineForSalesCreditMemo operation in SalesCreditMemoLineApi.
 * @export
 * @interface SalesCreditMemoLineApiPatchSalesCreditMemoLineForSalesCreditMemoRequest
 */
export interface SalesCreditMemoLineApiPatchSalesCreditMemoLineForSalesCreditMemoRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesCreditMemoLineApiPatchSalesCreditMemoLineForSalesCreditMemo
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesCreditMemo
     * @type {string}
     * @memberof SalesCreditMemoLineApiPatchSalesCreditMemoLineForSalesCreditMemo
     */
    readonly salesCreditMemoId: string

    /**
     * (v1.0) id for salesCreditMemoLine
     * @type {string}
     * @memberof SalesCreditMemoLineApiPatchSalesCreditMemoLineForSalesCreditMemo
     */
    readonly salesCreditMemoLineId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesCreditMemoLineApiPatchSalesCreditMemoLineForSalesCreditMemo
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof SalesCreditMemoLineApiPatchSalesCreditMemoLineForSalesCreditMemo
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostSalesCreditMemoLineForSalesCreditMemoRequest}
     * @memberof SalesCreditMemoLineApiPatchSalesCreditMemoLineForSalesCreditMemo
     */
    readonly postSalesCreditMemoLineForSalesCreditMemoRequest: PostSalesCreditMemoLineForSalesCreditMemoRequest
}

/**
 * Request parameters for postSalesCreditMemoLine operation in SalesCreditMemoLineApi.
 * @export
 * @interface SalesCreditMemoLineApiPostSalesCreditMemoLineRequest
 */
export interface SalesCreditMemoLineApiPostSalesCreditMemoLineRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesCreditMemoLineApiPostSalesCreditMemoLine
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesCreditMemoLineApiPostSalesCreditMemoLine
     */
    readonly contentType: string

    /**
     * 
     * @type {PostSalesCreditMemoLineForSalesCreditMemoRequest}
     * @memberof SalesCreditMemoLineApiPostSalesCreditMemoLine
     */
    readonly postSalesCreditMemoLineForSalesCreditMemoRequest: PostSalesCreditMemoLineForSalesCreditMemoRequest
}

/**
 * Request parameters for postSalesCreditMemoLineForSalesCreditMemo operation in SalesCreditMemoLineApi.
 * @export
 * @interface SalesCreditMemoLineApiPostSalesCreditMemoLineForSalesCreditMemoRequest
 */
export interface SalesCreditMemoLineApiPostSalesCreditMemoLineForSalesCreditMemoRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof SalesCreditMemoLineApiPostSalesCreditMemoLineForSalesCreditMemo
     */
    readonly companyId: string

    /**
     * (v1.0) id for salesCreditMemo
     * @type {string}
     * @memberof SalesCreditMemoLineApiPostSalesCreditMemoLineForSalesCreditMemo
     */
    readonly salesCreditMemoId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof SalesCreditMemoLineApiPostSalesCreditMemoLineForSalesCreditMemo
     */
    readonly contentType: string

    /**
     * 
     * @type {PostSalesCreditMemoLineForSalesCreditMemoRequest}
     * @memberof SalesCreditMemoLineApiPostSalesCreditMemoLineForSalesCreditMemo
     */
    readonly postSalesCreditMemoLineForSalesCreditMemoRequest: PostSalesCreditMemoLineForSalesCreditMemoRequest
}

/**
 * SalesCreditMemoLineApi - object-oriented interface
 * @export
 * @class SalesCreditMemoLineApi
 * @extends {BaseAPI}
 */
export class SalesCreditMemoLineApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type salesCreditMemoLine in Dynamics 365 Business Central
     * @param {SalesCreditMemoLineApiDeleteSalesCreditMemoLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditMemoLineApi
     */
    public deleteSalesCreditMemoLine(requestParameters: SalesCreditMemoLineApiDeleteSalesCreditMemoLineRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditMemoLineApiFp(this.configuration).deleteSalesCreditMemoLine(requestParameters.companyId, requestParameters.salesCreditMemoLineId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an object of type salesCreditMemoLine in Dynamics 365 Business Central
     * @param {SalesCreditMemoLineApiDeleteSalesCreditMemoLineForSalesCreditMemoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditMemoLineApi
     */
    public deleteSalesCreditMemoLineForSalesCreditMemo(requestParameters: SalesCreditMemoLineApiDeleteSalesCreditMemoLineForSalesCreditMemoRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditMemoLineApiFp(this.configuration).deleteSalesCreditMemoLineForSalesCreditMemo(requestParameters.companyId, requestParameters.salesCreditMemoId, requestParameters.salesCreditMemoLineId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type salesCreditMemoLine for Dynamics 365 Business Central.
     * @param {SalesCreditMemoLineApiGetSalesCreditMemoLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditMemoLineApi
     */
    public getSalesCreditMemoLine(requestParameters: SalesCreditMemoLineApiGetSalesCreditMemoLineRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditMemoLineApiFp(this.configuration).getSalesCreditMemoLine(requestParameters.companyId, requestParameters.salesCreditMemoLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type salesCreditMemoLine for Dynamics 365 Business Central.
     * @param {SalesCreditMemoLineApiGetSalesCreditMemoLineForSalesCreditMemoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditMemoLineApi
     */
    public getSalesCreditMemoLineForSalesCreditMemo(requestParameters: SalesCreditMemoLineApiGetSalesCreditMemoLineForSalesCreditMemoRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditMemoLineApiFp(this.configuration).getSalesCreditMemoLineForSalesCreditMemo(requestParameters.companyId, requestParameters.salesCreditMemoId, requestParameters.salesCreditMemoLineId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of salesCreditMemoLines
     * @param {SalesCreditMemoLineApiListSalesCreditMemoLinesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditMemoLineApi
     */
    public listSalesCreditMemoLines(requestParameters: SalesCreditMemoLineApiListSalesCreditMemoLinesRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditMemoLineApiFp(this.configuration).listSalesCreditMemoLines(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of salesCreditMemoLines
     * @param {SalesCreditMemoLineApiListSalesCreditMemoLinesForSalesCreditMemoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditMemoLineApi
     */
    public listSalesCreditMemoLinesForSalesCreditMemo(requestParameters: SalesCreditMemoLineApiListSalesCreditMemoLinesForSalesCreditMemoRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditMemoLineApiFp(this.configuration).listSalesCreditMemoLinesForSalesCreditMemo(requestParameters.companyId, requestParameters.salesCreditMemoId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type salesCreditMemoLine in Dynamics 365 Business Central
     * @param {SalesCreditMemoLineApiPatchSalesCreditMemoLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditMemoLineApi
     */
    public patchSalesCreditMemoLine(requestParameters: SalesCreditMemoLineApiPatchSalesCreditMemoLineRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditMemoLineApiFp(this.configuration).patchSalesCreditMemoLine(requestParameters.companyId, requestParameters.salesCreditMemoLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesCreditMemoLineForSalesCreditMemoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type salesCreditMemoLine in Dynamics 365 Business Central
     * @param {SalesCreditMemoLineApiPatchSalesCreditMemoLineForSalesCreditMemoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditMemoLineApi
     */
    public patchSalesCreditMemoLineForSalesCreditMemo(requestParameters: SalesCreditMemoLineApiPatchSalesCreditMemoLineForSalesCreditMemoRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditMemoLineApiFp(this.configuration).patchSalesCreditMemoLineForSalesCreditMemo(requestParameters.companyId, requestParameters.salesCreditMemoId, requestParameters.salesCreditMemoLineId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postSalesCreditMemoLineForSalesCreditMemoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type salesCreditMemoLine in Dynamics 365 Business Central
     * @param {SalesCreditMemoLineApiPostSalesCreditMemoLineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditMemoLineApi
     */
    public postSalesCreditMemoLine(requestParameters: SalesCreditMemoLineApiPostSalesCreditMemoLineRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditMemoLineApiFp(this.configuration).postSalesCreditMemoLine(requestParameters.companyId, requestParameters.contentType, requestParameters.postSalesCreditMemoLineForSalesCreditMemoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type salesCreditMemoLine in Dynamics 365 Business Central
     * @param {SalesCreditMemoLineApiPostSalesCreditMemoLineForSalesCreditMemoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditMemoLineApi
     */
    public postSalesCreditMemoLineForSalesCreditMemo(requestParameters: SalesCreditMemoLineApiPostSalesCreditMemoLineForSalesCreditMemoRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditMemoLineApiFp(this.configuration).postSalesCreditMemoLineForSalesCreditMemo(requestParameters.companyId, requestParameters.salesCreditMemoId, requestParameters.contentType, requestParameters.postSalesCreditMemoLineForSalesCreditMemoRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetSalesCreditMemoLineExpandEnum = {
    Item: 'item',
    Account: 'account'
} as const;
export type GetSalesCreditMemoLineExpandEnum = typeof GetSalesCreditMemoLineExpandEnum[keyof typeof GetSalesCreditMemoLineExpandEnum];
/**
 * @export
 */
export const GetSalesCreditMemoLineSelectEnum = {
    Id: 'id',
    DocumentId: 'documentId',
    Sequence: 'sequence',
    ItemId: 'itemId',
    AccountId: 'accountId',
    LineType: 'lineType',
    LineDetails: 'lineDetails',
    Description: 'description',
    UnitOfMeasureId: 'unitOfMeasureId',
    UnitOfMeasure: 'unitOfMeasure',
    UnitPrice: 'unitPrice',
    Quantity: 'quantity',
    DiscountAmount: 'discountAmount',
    DiscountPercent: 'discountPercent',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    AmountExcludingTax: 'amountExcludingTax',
    TaxCode: 'taxCode',
    TaxPercent: 'taxPercent',
    TotalTaxAmount: 'totalTaxAmount',
    AmountIncludingTax: 'amountIncludingTax',
    InvoiceDiscountAllocation: 'invoiceDiscountAllocation',
    NetAmount: 'netAmount',
    NetTaxAmount: 'netTaxAmount',
    NetAmountIncludingTax: 'netAmountIncludingTax',
    ShipmentDate: 'shipmentDate'
} as const;
export type GetSalesCreditMemoLineSelectEnum = typeof GetSalesCreditMemoLineSelectEnum[keyof typeof GetSalesCreditMemoLineSelectEnum];
/**
 * @export
 */
export const GetSalesCreditMemoLineForSalesCreditMemoExpandEnum = {
    Item: 'item',
    Account: 'account'
} as const;
export type GetSalesCreditMemoLineForSalesCreditMemoExpandEnum = typeof GetSalesCreditMemoLineForSalesCreditMemoExpandEnum[keyof typeof GetSalesCreditMemoLineForSalesCreditMemoExpandEnum];
/**
 * @export
 */
export const GetSalesCreditMemoLineForSalesCreditMemoSelectEnum = {
    Id: 'id',
    DocumentId: 'documentId',
    Sequence: 'sequence',
    ItemId: 'itemId',
    AccountId: 'accountId',
    LineType: 'lineType',
    LineDetails: 'lineDetails',
    Description: 'description',
    UnitOfMeasureId: 'unitOfMeasureId',
    UnitOfMeasure: 'unitOfMeasure',
    UnitPrice: 'unitPrice',
    Quantity: 'quantity',
    DiscountAmount: 'discountAmount',
    DiscountPercent: 'discountPercent',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    AmountExcludingTax: 'amountExcludingTax',
    TaxCode: 'taxCode',
    TaxPercent: 'taxPercent',
    TotalTaxAmount: 'totalTaxAmount',
    AmountIncludingTax: 'amountIncludingTax',
    InvoiceDiscountAllocation: 'invoiceDiscountAllocation',
    NetAmount: 'netAmount',
    NetTaxAmount: 'netTaxAmount',
    NetAmountIncludingTax: 'netAmountIncludingTax',
    ShipmentDate: 'shipmentDate'
} as const;
export type GetSalesCreditMemoLineForSalesCreditMemoSelectEnum = typeof GetSalesCreditMemoLineForSalesCreditMemoSelectEnum[keyof typeof GetSalesCreditMemoLineForSalesCreditMemoSelectEnum];
/**
 * @export
 */
export const ListSalesCreditMemoLinesExpandEnum = {
    Item: 'item',
    Account: 'account'
} as const;
export type ListSalesCreditMemoLinesExpandEnum = typeof ListSalesCreditMemoLinesExpandEnum[keyof typeof ListSalesCreditMemoLinesExpandEnum];
/**
 * @export
 */
export const ListSalesCreditMemoLinesSelectEnum = {
    Id: 'id',
    DocumentId: 'documentId',
    Sequence: 'sequence',
    ItemId: 'itemId',
    AccountId: 'accountId',
    LineType: 'lineType',
    LineDetails: 'lineDetails',
    Description: 'description',
    UnitOfMeasureId: 'unitOfMeasureId',
    UnitOfMeasure: 'unitOfMeasure',
    UnitPrice: 'unitPrice',
    Quantity: 'quantity',
    DiscountAmount: 'discountAmount',
    DiscountPercent: 'discountPercent',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    AmountExcludingTax: 'amountExcludingTax',
    TaxCode: 'taxCode',
    TaxPercent: 'taxPercent',
    TotalTaxAmount: 'totalTaxAmount',
    AmountIncludingTax: 'amountIncludingTax',
    InvoiceDiscountAllocation: 'invoiceDiscountAllocation',
    NetAmount: 'netAmount',
    NetTaxAmount: 'netTaxAmount',
    NetAmountIncludingTax: 'netAmountIncludingTax',
    ShipmentDate: 'shipmentDate'
} as const;
export type ListSalesCreditMemoLinesSelectEnum = typeof ListSalesCreditMemoLinesSelectEnum[keyof typeof ListSalesCreditMemoLinesSelectEnum];
/**
 * @export
 */
export const ListSalesCreditMemoLinesForSalesCreditMemoExpandEnum = {
    Item: 'item',
    Account: 'account'
} as const;
export type ListSalesCreditMemoLinesForSalesCreditMemoExpandEnum = typeof ListSalesCreditMemoLinesForSalesCreditMemoExpandEnum[keyof typeof ListSalesCreditMemoLinesForSalesCreditMemoExpandEnum];
/**
 * @export
 */
export const ListSalesCreditMemoLinesForSalesCreditMemoSelectEnum = {
    Id: 'id',
    DocumentId: 'documentId',
    Sequence: 'sequence',
    ItemId: 'itemId',
    AccountId: 'accountId',
    LineType: 'lineType',
    LineDetails: 'lineDetails',
    Description: 'description',
    UnitOfMeasureId: 'unitOfMeasureId',
    UnitOfMeasure: 'unitOfMeasure',
    UnitPrice: 'unitPrice',
    Quantity: 'quantity',
    DiscountAmount: 'discountAmount',
    DiscountPercent: 'discountPercent',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    AmountExcludingTax: 'amountExcludingTax',
    TaxCode: 'taxCode',
    TaxPercent: 'taxPercent',
    TotalTaxAmount: 'totalTaxAmount',
    AmountIncludingTax: 'amountIncludingTax',
    InvoiceDiscountAllocation: 'invoiceDiscountAllocation',
    NetAmount: 'netAmount',
    NetTaxAmount: 'netTaxAmount',
    NetAmountIncludingTax: 'netAmountIncludingTax',
    ShipmentDate: 'shipmentDate'
} as const;
export type ListSalesCreditMemoLinesForSalesCreditMemoSelectEnum = typeof ListSalesCreditMemoLinesForSalesCreditMemoSelectEnum[keyof typeof ListSalesCreditMemoLinesForSalesCreditMemoSelectEnum];
