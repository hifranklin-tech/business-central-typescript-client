/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ListPurchaseInvoices200Response } from '../model';
// @ts-ignore
import type { PostPurchaseInvoiceRequest } from '../model';
// @ts-ignore
import type { PurchaseInvoice } from '../model';
/**
 * PurchaseInvoiceApi - axios parameter creator
 * @export
 */
export const PurchaseInvoiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type purchaseInvoice in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceId (v1.0) id for purchaseInvoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePurchaseInvoice: async (companyId: string, purchaseInvoiceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deletePurchaseInvoice', 'companyId', companyId)
            // verify required parameter 'purchaseInvoiceId' is not null or undefined
            assertParamExists('deletePurchaseInvoice', 'purchaseInvoiceId', purchaseInvoiceId)
            const localVarPath = `/companies({company_id})/purchaseInvoices({purchaseInvoice_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"purchaseInvoice_id"}}`, encodeURIComponent(String(purchaseInvoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type purchaseInvoice for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceId (v1.0) id for purchaseInvoice
         * @param {Array<GetPurchaseInvoiceExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetPurchaseInvoiceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseInvoice: async (companyId: string, purchaseInvoiceId: string, $expand?: Array<GetPurchaseInvoiceExpandEnum>, $select?: Array<GetPurchaseInvoiceSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPurchaseInvoice', 'companyId', companyId)
            // verify required parameter 'purchaseInvoiceId' is not null or undefined
            assertParamExists('getPurchaseInvoice', 'purchaseInvoiceId', purchaseInvoiceId)
            const localVarPath = `/companies({company_id})/purchaseInvoices({purchaseInvoice_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"purchaseInvoice_id"}}`, encodeURIComponent(String(purchaseInvoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of purchaseInvoices
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPurchaseInvoicesExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListPurchaseInvoicesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPurchaseInvoices: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListPurchaseInvoicesExpandEnum>, $select?: Array<ListPurchaseInvoicesSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listPurchaseInvoices', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/purchaseInvoices`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type purchaseInvoice in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceId (v1.0) id for purchaseInvoice
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostPurchaseInvoiceRequest} postPurchaseInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPurchaseInvoice: async (companyId: string, purchaseInvoiceId: string, contentType: string, ifMatch: string, postPurchaseInvoiceRequest: PostPurchaseInvoiceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchPurchaseInvoice', 'companyId', companyId)
            // verify required parameter 'purchaseInvoiceId' is not null or undefined
            assertParamExists('patchPurchaseInvoice', 'purchaseInvoiceId', purchaseInvoiceId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchPurchaseInvoice', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchPurchaseInvoice', 'ifMatch', ifMatch)
            // verify required parameter 'postPurchaseInvoiceRequest' is not null or undefined
            assertParamExists('patchPurchaseInvoice', 'postPurchaseInvoiceRequest', postPurchaseInvoiceRequest)
            const localVarPath = `/companies({company_id})/purchaseInvoices({purchaseInvoice_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"purchaseInvoice_id"}}`, encodeURIComponent(String(purchaseInvoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postPurchaseInvoiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Performs the post action for purchaseInvoices entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceId (v1.0) id for purchaseInvoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postActionPurchaseInvoices: async (companyId: string, purchaseInvoiceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postActionPurchaseInvoices', 'companyId', companyId)
            // verify required parameter 'purchaseInvoiceId' is not null or undefined
            assertParamExists('postActionPurchaseInvoices', 'purchaseInvoiceId', purchaseInvoiceId)
            const localVarPath = `/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/Microsoft.NAV.post`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"purchaseInvoice_id"}}`, encodeURIComponent(String(purchaseInvoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type purchaseInvoice in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostPurchaseInvoiceRequest} postPurchaseInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPurchaseInvoice: async (companyId: string, contentType: string, postPurchaseInvoiceRequest: PostPurchaseInvoiceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postPurchaseInvoice', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postPurchaseInvoice', 'contentType', contentType)
            // verify required parameter 'postPurchaseInvoiceRequest' is not null or undefined
            assertParamExists('postPurchaseInvoice', 'postPurchaseInvoiceRequest', postPurchaseInvoiceRequest)
            const localVarPath = `/companies({company_id})/purchaseInvoices`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postPurchaseInvoiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PurchaseInvoiceApi - functional programming interface
 * @export
 */
export const PurchaseInvoiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PurchaseInvoiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type purchaseInvoice in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceId (v1.0) id for purchaseInvoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePurchaseInvoice(companyId: string, purchaseInvoiceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePurchaseInvoice(companyId, purchaseInvoiceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseInvoiceApi.deletePurchaseInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type purchaseInvoice for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceId (v1.0) id for purchaseInvoice
         * @param {Array<GetPurchaseInvoiceExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetPurchaseInvoiceSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPurchaseInvoice(companyId: string, purchaseInvoiceId: string, $expand?: Array<GetPurchaseInvoiceExpandEnum>, $select?: Array<GetPurchaseInvoiceSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseInvoice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPurchaseInvoice(companyId, purchaseInvoiceId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseInvoiceApi.getPurchaseInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of purchaseInvoices
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListPurchaseInvoicesExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListPurchaseInvoicesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPurchaseInvoices(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListPurchaseInvoicesExpandEnum>, $select?: Array<ListPurchaseInvoicesSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPurchaseInvoices200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPurchaseInvoices(companyId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseInvoiceApi.listPurchaseInvoices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type purchaseInvoice in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceId (v1.0) id for purchaseInvoice
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostPurchaseInvoiceRequest} postPurchaseInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPurchaseInvoice(companyId: string, purchaseInvoiceId: string, contentType: string, ifMatch: string, postPurchaseInvoiceRequest: PostPurchaseInvoiceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseInvoice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPurchaseInvoice(companyId, purchaseInvoiceId, contentType, ifMatch, postPurchaseInvoiceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseInvoiceApi.patchPurchaseInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Performs the post action for purchaseInvoices entity
         * @param {string} companyId (v1.0) id for company
         * @param {string} purchaseInvoiceId (v1.0) id for purchaseInvoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postActionPurchaseInvoices(companyId: string, purchaseInvoiceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postActionPurchaseInvoices(companyId, purchaseInvoiceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseInvoiceApi.postActionPurchaseInvoices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type purchaseInvoice in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostPurchaseInvoiceRequest} postPurchaseInvoiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPurchaseInvoice(companyId: string, contentType: string, postPurchaseInvoiceRequest: PostPurchaseInvoiceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseInvoice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPurchaseInvoice(companyId, contentType, postPurchaseInvoiceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseInvoiceApi.postPurchaseInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PurchaseInvoiceApi - factory interface
 * @export
 */
export const PurchaseInvoiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PurchaseInvoiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type purchaseInvoice in Dynamics 365 Business Central
         * @param {PurchaseInvoiceApiDeletePurchaseInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePurchaseInvoice(requestParameters: PurchaseInvoiceApiDeletePurchaseInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePurchaseInvoice(requestParameters.companyId, requestParameters.purchaseInvoiceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type purchaseInvoice for Dynamics 365 Business Central.
         * @param {PurchaseInvoiceApiGetPurchaseInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseInvoice(requestParameters: PurchaseInvoiceApiGetPurchaseInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseInvoice> {
            return localVarFp.getPurchaseInvoice(requestParameters.companyId, requestParameters.purchaseInvoiceId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of purchaseInvoices
         * @param {PurchaseInvoiceApiListPurchaseInvoicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPurchaseInvoices(requestParameters: PurchaseInvoiceApiListPurchaseInvoicesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPurchaseInvoices200Response> {
            return localVarFp.listPurchaseInvoices(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type purchaseInvoice in Dynamics 365 Business Central
         * @param {PurchaseInvoiceApiPatchPurchaseInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPurchaseInvoice(requestParameters: PurchaseInvoiceApiPatchPurchaseInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseInvoice> {
            return localVarFp.patchPurchaseInvoice(requestParameters.companyId, requestParameters.purchaseInvoiceId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postPurchaseInvoiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Performs the post action for purchaseInvoices entity
         * @param {PurchaseInvoiceApiPostActionPurchaseInvoicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postActionPurchaseInvoices(requestParameters: PurchaseInvoiceApiPostActionPurchaseInvoicesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postActionPurchaseInvoices(requestParameters.companyId, requestParameters.purchaseInvoiceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type purchaseInvoice in Dynamics 365 Business Central
         * @param {PurchaseInvoiceApiPostPurchaseInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPurchaseInvoice(requestParameters: PurchaseInvoiceApiPostPurchaseInvoiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseInvoice> {
            return localVarFp.postPurchaseInvoice(requestParameters.companyId, requestParameters.contentType, requestParameters.postPurchaseInvoiceRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deletePurchaseInvoice operation in PurchaseInvoiceApi.
 * @export
 * @interface PurchaseInvoiceApiDeletePurchaseInvoiceRequest
 */
export interface PurchaseInvoiceApiDeletePurchaseInvoiceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PurchaseInvoiceApiDeletePurchaseInvoice
     */
    readonly companyId: string

    /**
     * (v1.0) id for purchaseInvoice
     * @type {string}
     * @memberof PurchaseInvoiceApiDeletePurchaseInvoice
     */
    readonly purchaseInvoiceId: string
}

/**
 * Request parameters for getPurchaseInvoice operation in PurchaseInvoiceApi.
 * @export
 * @interface PurchaseInvoiceApiGetPurchaseInvoiceRequest
 */
export interface PurchaseInvoiceApiGetPurchaseInvoiceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PurchaseInvoiceApiGetPurchaseInvoice
     */
    readonly companyId: string

    /**
     * (v1.0) id for purchaseInvoice
     * @type {string}
     * @memberof PurchaseInvoiceApiGetPurchaseInvoice
     */
    readonly purchaseInvoiceId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'purchaseInvoiceLines' | 'pdfDocument' | 'vendor' | 'currency'>}
     * @memberof PurchaseInvoiceApiGetPurchaseInvoice
     */
    readonly $expand?: Array<GetPurchaseInvoiceExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'invoiceDate' | 'dueDate' | 'vendorInvoiceNumber' | 'vendorId' | 'vendorNumber' | 'vendorName' | 'payToName' | 'payToContact' | 'payToVendorId' | 'payToVendorNumber' | 'shipToName' | 'shipToContact' | 'buyFromAddress' | 'payToAddress' | 'shipToAddress' | 'currencyId' | 'currencyCode' | 'pricesIncludeTax' | 'discountAmount' | 'discountAppliedBeforeTax' | 'totalAmountExcludingTax' | 'totalTaxAmount' | 'totalAmountIncludingTax' | 'status' | 'lastModifiedDateTime'>}
     * @memberof PurchaseInvoiceApiGetPurchaseInvoice
     */
    readonly $select?: Array<GetPurchaseInvoiceSelectEnum>
}

/**
 * Request parameters for listPurchaseInvoices operation in PurchaseInvoiceApi.
 * @export
 * @interface PurchaseInvoiceApiListPurchaseInvoicesRequest
 */
export interface PurchaseInvoiceApiListPurchaseInvoicesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PurchaseInvoiceApiListPurchaseInvoices
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof PurchaseInvoiceApiListPurchaseInvoices
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof PurchaseInvoiceApiListPurchaseInvoices
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof PurchaseInvoiceApiListPurchaseInvoices
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof PurchaseInvoiceApiListPurchaseInvoices
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'purchaseInvoiceLines' | 'pdfDocument' | 'vendor' | 'currency'>}
     * @memberof PurchaseInvoiceApiListPurchaseInvoices
     */
    readonly $expand?: Array<ListPurchaseInvoicesExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'number' | 'invoiceDate' | 'dueDate' | 'vendorInvoiceNumber' | 'vendorId' | 'vendorNumber' | 'vendorName' | 'payToName' | 'payToContact' | 'payToVendorId' | 'payToVendorNumber' | 'shipToName' | 'shipToContact' | 'buyFromAddress' | 'payToAddress' | 'shipToAddress' | 'currencyId' | 'currencyCode' | 'pricesIncludeTax' | 'discountAmount' | 'discountAppliedBeforeTax' | 'totalAmountExcludingTax' | 'totalTaxAmount' | 'totalAmountIncludingTax' | 'status' | 'lastModifiedDateTime'>}
     * @memberof PurchaseInvoiceApiListPurchaseInvoices
     */
    readonly $select?: Array<ListPurchaseInvoicesSelectEnum>
}

/**
 * Request parameters for patchPurchaseInvoice operation in PurchaseInvoiceApi.
 * @export
 * @interface PurchaseInvoiceApiPatchPurchaseInvoiceRequest
 */
export interface PurchaseInvoiceApiPatchPurchaseInvoiceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PurchaseInvoiceApiPatchPurchaseInvoice
     */
    readonly companyId: string

    /**
     * (v1.0) id for purchaseInvoice
     * @type {string}
     * @memberof PurchaseInvoiceApiPatchPurchaseInvoice
     */
    readonly purchaseInvoiceId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof PurchaseInvoiceApiPatchPurchaseInvoice
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof PurchaseInvoiceApiPatchPurchaseInvoice
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostPurchaseInvoiceRequest}
     * @memberof PurchaseInvoiceApiPatchPurchaseInvoice
     */
    readonly postPurchaseInvoiceRequest: PostPurchaseInvoiceRequest
}

/**
 * Request parameters for postActionPurchaseInvoices operation in PurchaseInvoiceApi.
 * @export
 * @interface PurchaseInvoiceApiPostActionPurchaseInvoicesRequest
 */
export interface PurchaseInvoiceApiPostActionPurchaseInvoicesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PurchaseInvoiceApiPostActionPurchaseInvoices
     */
    readonly companyId: string

    /**
     * (v1.0) id for purchaseInvoice
     * @type {string}
     * @memberof PurchaseInvoiceApiPostActionPurchaseInvoices
     */
    readonly purchaseInvoiceId: string
}

/**
 * Request parameters for postPurchaseInvoice operation in PurchaseInvoiceApi.
 * @export
 * @interface PurchaseInvoiceApiPostPurchaseInvoiceRequest
 */
export interface PurchaseInvoiceApiPostPurchaseInvoiceRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof PurchaseInvoiceApiPostPurchaseInvoice
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof PurchaseInvoiceApiPostPurchaseInvoice
     */
    readonly contentType: string

    /**
     * 
     * @type {PostPurchaseInvoiceRequest}
     * @memberof PurchaseInvoiceApiPostPurchaseInvoice
     */
    readonly postPurchaseInvoiceRequest: PostPurchaseInvoiceRequest
}

/**
 * PurchaseInvoiceApi - object-oriented interface
 * @export
 * @class PurchaseInvoiceApi
 * @extends {BaseAPI}
 */
export class PurchaseInvoiceApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type purchaseInvoice in Dynamics 365 Business Central
     * @param {PurchaseInvoiceApiDeletePurchaseInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseInvoiceApi
     */
    public deletePurchaseInvoice(requestParameters: PurchaseInvoiceApiDeletePurchaseInvoiceRequest, options?: RawAxiosRequestConfig) {
        return PurchaseInvoiceApiFp(this.configuration).deletePurchaseInvoice(requestParameters.companyId, requestParameters.purchaseInvoiceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type purchaseInvoice for Dynamics 365 Business Central.
     * @param {PurchaseInvoiceApiGetPurchaseInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseInvoiceApi
     */
    public getPurchaseInvoice(requestParameters: PurchaseInvoiceApiGetPurchaseInvoiceRequest, options?: RawAxiosRequestConfig) {
        return PurchaseInvoiceApiFp(this.configuration).getPurchaseInvoice(requestParameters.companyId, requestParameters.purchaseInvoiceId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of purchaseInvoices
     * @param {PurchaseInvoiceApiListPurchaseInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseInvoiceApi
     */
    public listPurchaseInvoices(requestParameters: PurchaseInvoiceApiListPurchaseInvoicesRequest, options?: RawAxiosRequestConfig) {
        return PurchaseInvoiceApiFp(this.configuration).listPurchaseInvoices(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type purchaseInvoice in Dynamics 365 Business Central
     * @param {PurchaseInvoiceApiPatchPurchaseInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseInvoiceApi
     */
    public patchPurchaseInvoice(requestParameters: PurchaseInvoiceApiPatchPurchaseInvoiceRequest, options?: RawAxiosRequestConfig) {
        return PurchaseInvoiceApiFp(this.configuration).patchPurchaseInvoice(requestParameters.companyId, requestParameters.purchaseInvoiceId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postPurchaseInvoiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Performs the post action for purchaseInvoices entity
     * @param {PurchaseInvoiceApiPostActionPurchaseInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseInvoiceApi
     */
    public postActionPurchaseInvoices(requestParameters: PurchaseInvoiceApiPostActionPurchaseInvoicesRequest, options?: RawAxiosRequestConfig) {
        return PurchaseInvoiceApiFp(this.configuration).postActionPurchaseInvoices(requestParameters.companyId, requestParameters.purchaseInvoiceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type purchaseInvoice in Dynamics 365 Business Central
     * @param {PurchaseInvoiceApiPostPurchaseInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseInvoiceApi
     */
    public postPurchaseInvoice(requestParameters: PurchaseInvoiceApiPostPurchaseInvoiceRequest, options?: RawAxiosRequestConfig) {
        return PurchaseInvoiceApiFp(this.configuration).postPurchaseInvoice(requestParameters.companyId, requestParameters.contentType, requestParameters.postPurchaseInvoiceRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetPurchaseInvoiceExpandEnum = {
    PurchaseInvoiceLines: 'purchaseInvoiceLines',
    PdfDocument: 'pdfDocument',
    Vendor: 'vendor',
    Currency: 'currency'
} as const;
export type GetPurchaseInvoiceExpandEnum = typeof GetPurchaseInvoiceExpandEnum[keyof typeof GetPurchaseInvoiceExpandEnum];
/**
 * @export
 */
export const GetPurchaseInvoiceSelectEnum = {
    Id: 'id',
    Number: 'number',
    InvoiceDate: 'invoiceDate',
    DueDate: 'dueDate',
    VendorInvoiceNumber: 'vendorInvoiceNumber',
    VendorId: 'vendorId',
    VendorNumber: 'vendorNumber',
    VendorName: 'vendorName',
    PayToName: 'payToName',
    PayToContact: 'payToContact',
    PayToVendorId: 'payToVendorId',
    PayToVendorNumber: 'payToVendorNumber',
    ShipToName: 'shipToName',
    ShipToContact: 'shipToContact',
    BuyFromAddress: 'buyFromAddress',
    PayToAddress: 'payToAddress',
    ShipToAddress: 'shipToAddress',
    CurrencyId: 'currencyId',
    CurrencyCode: 'currencyCode',
    PricesIncludeTax: 'pricesIncludeTax',
    DiscountAmount: 'discountAmount',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    TotalAmountExcludingTax: 'totalAmountExcludingTax',
    TotalTaxAmount: 'totalTaxAmount',
    TotalAmountIncludingTax: 'totalAmountIncludingTax',
    Status: 'status',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type GetPurchaseInvoiceSelectEnum = typeof GetPurchaseInvoiceSelectEnum[keyof typeof GetPurchaseInvoiceSelectEnum];
/**
 * @export
 */
export const ListPurchaseInvoicesExpandEnum = {
    PurchaseInvoiceLines: 'purchaseInvoiceLines',
    PdfDocument: 'pdfDocument',
    Vendor: 'vendor',
    Currency: 'currency'
} as const;
export type ListPurchaseInvoicesExpandEnum = typeof ListPurchaseInvoicesExpandEnum[keyof typeof ListPurchaseInvoicesExpandEnum];
/**
 * @export
 */
export const ListPurchaseInvoicesSelectEnum = {
    Id: 'id',
    Number: 'number',
    InvoiceDate: 'invoiceDate',
    DueDate: 'dueDate',
    VendorInvoiceNumber: 'vendorInvoiceNumber',
    VendorId: 'vendorId',
    VendorNumber: 'vendorNumber',
    VendorName: 'vendorName',
    PayToName: 'payToName',
    PayToContact: 'payToContact',
    PayToVendorId: 'payToVendorId',
    PayToVendorNumber: 'payToVendorNumber',
    ShipToName: 'shipToName',
    ShipToContact: 'shipToContact',
    BuyFromAddress: 'buyFromAddress',
    PayToAddress: 'payToAddress',
    ShipToAddress: 'shipToAddress',
    CurrencyId: 'currencyId',
    CurrencyCode: 'currencyCode',
    PricesIncludeTax: 'pricesIncludeTax',
    DiscountAmount: 'discountAmount',
    DiscountAppliedBeforeTax: 'discountAppliedBeforeTax',
    TotalAmountExcludingTax: 'totalAmountExcludingTax',
    TotalTaxAmount: 'totalTaxAmount',
    TotalAmountIncludingTax: 'totalAmountIncludingTax',
    Status: 'status',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type ListPurchaseInvoicesSelectEnum = typeof ListPurchaseInvoicesSelectEnum[keyof typeof ListPurchaseInvoicesSelectEnum];
