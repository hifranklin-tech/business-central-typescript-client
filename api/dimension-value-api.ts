/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DimensionValue } from '../model';
// @ts-ignore
import type { ListDimensionValuesForDimension200Response } from '../model';
/**
 * DimensionValueApi - axios parameter creator
 * @export
 */
export const DimensionValueApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type dimensionValue for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} dimensionValueId (v1.0) id for dimensionValue
         * @param {Array<GetDimensionValueSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDimensionValue: async (companyId: string, dimensionValueId: string, $select?: Array<GetDimensionValueSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getDimensionValue', 'companyId', companyId)
            // verify required parameter 'dimensionValueId' is not null or undefined
            assertParamExists('getDimensionValue', 'dimensionValueId', dimensionValueId)
            const localVarPath = `/companies({company_id})/dimensionValues({dimensionValue_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"dimensionValue_id"}}`, encodeURIComponent(String(dimensionValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type dimensionValue for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} dimensionId (v1.0) id for dimension
         * @param {string} dimensionValueId (v1.0) id for dimensionValue
         * @param {Array<GetDimensionValueForDimensionSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDimensionValueForDimension: async (companyId: string, dimensionId: string, dimensionValueId: string, $select?: Array<GetDimensionValueForDimensionSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getDimensionValueForDimension', 'companyId', companyId)
            // verify required parameter 'dimensionId' is not null or undefined
            assertParamExists('getDimensionValueForDimension', 'dimensionId', dimensionId)
            // verify required parameter 'dimensionValueId' is not null or undefined
            assertParamExists('getDimensionValueForDimension', 'dimensionValueId', dimensionValueId)
            const localVarPath = `/companies({company_id})/dimensions({dimension_id})/dimensionValues({dimensionValue_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"dimension_id"}}`, encodeURIComponent(String(dimensionId)))
                .replace(`{${"dimensionValue_id"}}`, encodeURIComponent(String(dimensionValueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of dimensionValues
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListDimensionValuesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDimensionValues: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListDimensionValuesSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listDimensionValues', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/dimensionValues`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of dimensionValues
         * @param {string} companyId (v1.0) id for company
         * @param {string} dimensionId (v1.0) id for dimension
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListDimensionValuesForDimensionSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDimensionValuesForDimension: async (companyId: string, dimensionId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListDimensionValuesForDimensionSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listDimensionValuesForDimension', 'companyId', companyId)
            // verify required parameter 'dimensionId' is not null or undefined
            assertParamExists('listDimensionValuesForDimension', 'dimensionId', dimensionId)
            const localVarPath = `/companies({company_id})/dimensions({dimension_id})/dimensionValues`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"dimension_id"}}`, encodeURIComponent(String(dimensionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DimensionValueApi - functional programming interface
 * @export
 */
export const DimensionValueApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DimensionValueApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type dimensionValue for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} dimensionValueId (v1.0) id for dimensionValue
         * @param {Array<GetDimensionValueSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDimensionValue(companyId: string, dimensionValueId: string, $select?: Array<GetDimensionValueSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DimensionValue>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDimensionValue(companyId, dimensionValueId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DimensionValueApi.getDimensionValue']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type dimensionValue for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {string} dimensionId (v1.0) id for dimension
         * @param {string} dimensionValueId (v1.0) id for dimensionValue
         * @param {Array<GetDimensionValueForDimensionSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDimensionValueForDimension(companyId: string, dimensionId: string, dimensionValueId: string, $select?: Array<GetDimensionValueForDimensionSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DimensionValue>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDimensionValueForDimension(companyId, dimensionId, dimensionValueId, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DimensionValueApi.getDimensionValueForDimension']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of dimensionValues
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListDimensionValuesSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDimensionValues(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListDimensionValuesSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDimensionValuesForDimension200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDimensionValues(companyId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DimensionValueApi.listDimensionValues']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of dimensionValues
         * @param {string} companyId (v1.0) id for company
         * @param {string} dimensionId (v1.0) id for dimension
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListDimensionValuesForDimensionSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDimensionValuesForDimension(companyId: string, dimensionId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $select?: Array<ListDimensionValuesForDimensionSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDimensionValuesForDimension200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDimensionValuesForDimension(companyId, dimensionId, $top, $skip, $limit, $filter, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DimensionValueApi.listDimensionValuesForDimension']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DimensionValueApi - factory interface
 * @export
 */
export const DimensionValueApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DimensionValueApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type dimensionValue for Dynamics 365 Business Central.
         * @param {DimensionValueApiGetDimensionValueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDimensionValue(requestParameters: DimensionValueApiGetDimensionValueRequest, options?: RawAxiosRequestConfig): AxiosPromise<DimensionValue> {
            return localVarFp.getDimensionValue(requestParameters.companyId, requestParameters.dimensionValueId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type dimensionValue for Dynamics 365 Business Central.
         * @param {DimensionValueApiGetDimensionValueForDimensionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDimensionValueForDimension(requestParameters: DimensionValueApiGetDimensionValueForDimensionRequest, options?: RawAxiosRequestConfig): AxiosPromise<DimensionValue> {
            return localVarFp.getDimensionValueForDimension(requestParameters.companyId, requestParameters.dimensionId, requestParameters.dimensionValueId, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of dimensionValues
         * @param {DimensionValueApiListDimensionValuesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDimensionValues(requestParameters: DimensionValueApiListDimensionValuesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListDimensionValuesForDimension200Response> {
            return localVarFp.listDimensionValues(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of dimensionValues
         * @param {DimensionValueApiListDimensionValuesForDimensionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDimensionValuesForDimension(requestParameters: DimensionValueApiListDimensionValuesForDimensionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListDimensionValuesForDimension200Response> {
            return localVarFp.listDimensionValuesForDimension(requestParameters.companyId, requestParameters.dimensionId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDimensionValue operation in DimensionValueApi.
 * @export
 * @interface DimensionValueApiGetDimensionValueRequest
 */
export interface DimensionValueApiGetDimensionValueRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof DimensionValueApiGetDimensionValue
     */
    readonly companyId: string

    /**
     * (v1.0) id for dimensionValue
     * @type {string}
     * @memberof DimensionValueApiGetDimensionValue
     */
    readonly dimensionValueId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'code' | 'displayName' | 'lastModifiedDateTime'>}
     * @memberof DimensionValueApiGetDimensionValue
     */
    readonly $select?: Array<GetDimensionValueSelectEnum>
}

/**
 * Request parameters for getDimensionValueForDimension operation in DimensionValueApi.
 * @export
 * @interface DimensionValueApiGetDimensionValueForDimensionRequest
 */
export interface DimensionValueApiGetDimensionValueForDimensionRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof DimensionValueApiGetDimensionValueForDimension
     */
    readonly companyId: string

    /**
     * (v1.0) id for dimension
     * @type {string}
     * @memberof DimensionValueApiGetDimensionValueForDimension
     */
    readonly dimensionId: string

    /**
     * (v1.0) id for dimensionValue
     * @type {string}
     * @memberof DimensionValueApiGetDimensionValueForDimension
     */
    readonly dimensionValueId: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'code' | 'displayName' | 'lastModifiedDateTime'>}
     * @memberof DimensionValueApiGetDimensionValueForDimension
     */
    readonly $select?: Array<GetDimensionValueForDimensionSelectEnum>
}

/**
 * Request parameters for listDimensionValues operation in DimensionValueApi.
 * @export
 * @interface DimensionValueApiListDimensionValuesRequest
 */
export interface DimensionValueApiListDimensionValuesRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof DimensionValueApiListDimensionValues
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof DimensionValueApiListDimensionValues
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof DimensionValueApiListDimensionValues
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof DimensionValueApiListDimensionValues
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof DimensionValueApiListDimensionValues
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'code' | 'displayName' | 'lastModifiedDateTime'>}
     * @memberof DimensionValueApiListDimensionValues
     */
    readonly $select?: Array<ListDimensionValuesSelectEnum>
}

/**
 * Request parameters for listDimensionValuesForDimension operation in DimensionValueApi.
 * @export
 * @interface DimensionValueApiListDimensionValuesForDimensionRequest
 */
export interface DimensionValueApiListDimensionValuesForDimensionRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof DimensionValueApiListDimensionValuesForDimension
     */
    readonly companyId: string

    /**
     * (v1.0) id for dimension
     * @type {string}
     * @memberof DimensionValueApiListDimensionValuesForDimension
     */
    readonly dimensionId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof DimensionValueApiListDimensionValuesForDimension
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof DimensionValueApiListDimensionValuesForDimension
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof DimensionValueApiListDimensionValuesForDimension
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof DimensionValueApiListDimensionValuesForDimension
     */
    readonly $filter?: string

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'id' | 'code' | 'displayName' | 'lastModifiedDateTime'>}
     * @memberof DimensionValueApiListDimensionValuesForDimension
     */
    readonly $select?: Array<ListDimensionValuesForDimensionSelectEnum>
}

/**
 * DimensionValueApi - object-oriented interface
 * @export
 * @class DimensionValueApi
 * @extends {BaseAPI}
 */
export class DimensionValueApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type dimensionValue for Dynamics 365 Business Central.
     * @param {DimensionValueApiGetDimensionValueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DimensionValueApi
     */
    public getDimensionValue(requestParameters: DimensionValueApiGetDimensionValueRequest, options?: RawAxiosRequestConfig) {
        return DimensionValueApiFp(this.configuration).getDimensionValue(requestParameters.companyId, requestParameters.dimensionValueId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type dimensionValue for Dynamics 365 Business Central.
     * @param {DimensionValueApiGetDimensionValueForDimensionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DimensionValueApi
     */
    public getDimensionValueForDimension(requestParameters: DimensionValueApiGetDimensionValueForDimensionRequest, options?: RawAxiosRequestConfig) {
        return DimensionValueApiFp(this.configuration).getDimensionValueForDimension(requestParameters.companyId, requestParameters.dimensionId, requestParameters.dimensionValueId, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of dimensionValues
     * @param {DimensionValueApiListDimensionValuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DimensionValueApi
     */
    public listDimensionValues(requestParameters: DimensionValueApiListDimensionValuesRequest, options?: RawAxiosRequestConfig) {
        return DimensionValueApiFp(this.configuration).listDimensionValues(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of dimensionValues
     * @param {DimensionValueApiListDimensionValuesForDimensionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DimensionValueApi
     */
    public listDimensionValuesForDimension(requestParameters: DimensionValueApiListDimensionValuesForDimensionRequest, options?: RawAxiosRequestConfig) {
        return DimensionValueApiFp(this.configuration).listDimensionValuesForDimension(requestParameters.companyId, requestParameters.dimensionId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetDimensionValueSelectEnum = {
    Id: 'id',
    Code: 'code',
    DisplayName: 'displayName',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type GetDimensionValueSelectEnum = typeof GetDimensionValueSelectEnum[keyof typeof GetDimensionValueSelectEnum];
/**
 * @export
 */
export const GetDimensionValueForDimensionSelectEnum = {
    Id: 'id',
    Code: 'code',
    DisplayName: 'displayName',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type GetDimensionValueForDimensionSelectEnum = typeof GetDimensionValueForDimensionSelectEnum[keyof typeof GetDimensionValueForDimensionSelectEnum];
/**
 * @export
 */
export const ListDimensionValuesSelectEnum = {
    Id: 'id',
    Code: 'code',
    DisplayName: 'displayName',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type ListDimensionValuesSelectEnum = typeof ListDimensionValuesSelectEnum[keyof typeof ListDimensionValuesSelectEnum];
/**
 * @export
 */
export const ListDimensionValuesForDimensionSelectEnum = {
    Id: 'id',
    Code: 'code',
    DisplayName: 'displayName',
    LastModifiedDateTime: 'lastModifiedDateTime'
} as const;
export type ListDimensionValuesForDimensionSelectEnum = typeof ListDimensionValuesForDimensionSelectEnum[keyof typeof ListDimensionValuesForDimensionSelectEnum];
