/* tslint:disable */
/* eslint-disable */
/**
 * (v1.0) Dynamics 365 Business Central
 * (v1.0) Business Central Standard APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { GeneralLedgerEntryAttachments } from '../model';
// @ts-ignore
import type { ListGeneralLedgerEntryAttachments200Response } from '../model';
// @ts-ignore
import type { PostGeneralLedgerEntryAttachmentsRequest } from '../model';
/**
 * GeneralLedgerEntryAttachmentsApi - axios parameter creator
 * @export
 */
export const GeneralLedgerEntryAttachmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an object of type generalLedgerEntryAttachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {number} generalLedgerEntryAttachmentsGeneralLedgerEntryNumber (v1.0) generalLedgerEntryNumber for generalLedgerEntryAttachments
         * @param {string} generalLedgerEntryAttachmentsId (v1.0) id for generalLedgerEntryAttachments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGeneralLedgerEntryAttachments: async (companyId: string, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber: number, generalLedgerEntryAttachmentsId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteGeneralLedgerEntryAttachments', 'companyId', companyId)
            // verify required parameter 'generalLedgerEntryAttachmentsGeneralLedgerEntryNumber' is not null or undefined
            assertParamExists('deleteGeneralLedgerEntryAttachments', 'generalLedgerEntryAttachmentsGeneralLedgerEntryNumber', generalLedgerEntryAttachmentsGeneralLedgerEntryNumber)
            // verify required parameter 'generalLedgerEntryAttachmentsId' is not null or undefined
            assertParamExists('deleteGeneralLedgerEntryAttachments', 'generalLedgerEntryAttachmentsId', generalLedgerEntryAttachmentsId)
            const localVarPath = `/companies({company_id})/generalLedgerEntryAttachments({generalLedgerEntryAttachments_generalLedgerEntryNumber},{generalLedgerEntryAttachments_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"generalLedgerEntryAttachments_generalLedgerEntryNumber"}}`, encodeURIComponent(String(generalLedgerEntryAttachmentsGeneralLedgerEntryNumber)))
                .replace(`{${"generalLedgerEntryAttachments_id"}}`, encodeURIComponent(String(generalLedgerEntryAttachmentsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type generalLedgerEntryAttachments for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {number} generalLedgerEntryAttachmentsGeneralLedgerEntryNumber (v1.0) generalLedgerEntryNumber for generalLedgerEntryAttachments
         * @param {string} generalLedgerEntryAttachmentsId (v1.0) id for generalLedgerEntryAttachments
         * @param {Array<GetGeneralLedgerEntryAttachmentsExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetGeneralLedgerEntryAttachmentsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGeneralLedgerEntryAttachments: async (companyId: string, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber: number, generalLedgerEntryAttachmentsId: string, $expand?: Array<GetGeneralLedgerEntryAttachmentsExpandEnum>, $select?: Array<GetGeneralLedgerEntryAttachmentsSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getGeneralLedgerEntryAttachments', 'companyId', companyId)
            // verify required parameter 'generalLedgerEntryAttachmentsGeneralLedgerEntryNumber' is not null or undefined
            assertParamExists('getGeneralLedgerEntryAttachments', 'generalLedgerEntryAttachmentsGeneralLedgerEntryNumber', generalLedgerEntryAttachmentsGeneralLedgerEntryNumber)
            // verify required parameter 'generalLedgerEntryAttachmentsId' is not null or undefined
            assertParamExists('getGeneralLedgerEntryAttachments', 'generalLedgerEntryAttachmentsId', generalLedgerEntryAttachmentsId)
            const localVarPath = `/companies({company_id})/generalLedgerEntryAttachments({generalLedgerEntryAttachments_generalLedgerEntryNumber},{generalLedgerEntryAttachments_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"generalLedgerEntryAttachments_generalLedgerEntryNumber"}}`, encodeURIComponent(String(generalLedgerEntryAttachmentsGeneralLedgerEntryNumber)))
                .replace(`{${"generalLedgerEntryAttachments_id"}}`, encodeURIComponent(String(generalLedgerEntryAttachmentsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of generalLedgerEntryAttachments
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListGeneralLedgerEntryAttachmentsExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListGeneralLedgerEntryAttachmentsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGeneralLedgerEntryAttachments: async (companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListGeneralLedgerEntryAttachmentsExpandEnum>, $select?: Array<ListGeneralLedgerEntryAttachmentsSelectEnum>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listGeneralLedgerEntryAttachments', 'companyId', companyId)
            const localVarPath = `/companies({company_id})/generalLedgerEntryAttachments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($limit !== undefined) {
                localVarQueryParameter['$limit'] = $limit;
            }

            if ($filter !== undefined) {
                localVarQueryParameter['$filter'] = $filter;
            }

            if ($expand) {
                localVarQueryParameter['$expand'] = $expand.join(COLLECTION_FORMATS.csv);
            }

            if ($select) {
                localVarQueryParameter['$select'] = $select.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an object of type generalLedgerEntryAttachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {number} generalLedgerEntryAttachmentsGeneralLedgerEntryNumber (v1.0) generalLedgerEntryNumber for generalLedgerEntryAttachments
         * @param {string} generalLedgerEntryAttachmentsId (v1.0) id for generalLedgerEntryAttachments
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostGeneralLedgerEntryAttachmentsRequest} postGeneralLedgerEntryAttachmentsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchGeneralLedgerEntryAttachments: async (companyId: string, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber: number, generalLedgerEntryAttachmentsId: string, contentType: string, ifMatch: string, postGeneralLedgerEntryAttachmentsRequest: PostGeneralLedgerEntryAttachmentsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('patchGeneralLedgerEntryAttachments', 'companyId', companyId)
            // verify required parameter 'generalLedgerEntryAttachmentsGeneralLedgerEntryNumber' is not null or undefined
            assertParamExists('patchGeneralLedgerEntryAttachments', 'generalLedgerEntryAttachmentsGeneralLedgerEntryNumber', generalLedgerEntryAttachmentsGeneralLedgerEntryNumber)
            // verify required parameter 'generalLedgerEntryAttachmentsId' is not null or undefined
            assertParamExists('patchGeneralLedgerEntryAttachments', 'generalLedgerEntryAttachmentsId', generalLedgerEntryAttachmentsId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('patchGeneralLedgerEntryAttachments', 'contentType', contentType)
            // verify required parameter 'ifMatch' is not null or undefined
            assertParamExists('patchGeneralLedgerEntryAttachments', 'ifMatch', ifMatch)
            // verify required parameter 'postGeneralLedgerEntryAttachmentsRequest' is not null or undefined
            assertParamExists('patchGeneralLedgerEntryAttachments', 'postGeneralLedgerEntryAttachmentsRequest', postGeneralLedgerEntryAttachmentsRequest)
            const localVarPath = `/companies({company_id})/generalLedgerEntryAttachments({generalLedgerEntryAttachments_generalLedgerEntryNumber},{generalLedgerEntryAttachments_id})`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"generalLedgerEntryAttachments_generalLedgerEntryNumber"}}`, encodeURIComponent(String(generalLedgerEntryAttachmentsGeneralLedgerEntryNumber)))
                .replace(`{${"generalLedgerEntryAttachments_id"}}`, encodeURIComponent(String(generalLedgerEntryAttachmentsId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }

            if (ifMatch != null) {
                localVarHeaderParameter['If-Match'] = String(ifMatch);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postGeneralLedgerEntryAttachmentsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an object of type generalLedgerEntryAttachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostGeneralLedgerEntryAttachmentsRequest} postGeneralLedgerEntryAttachmentsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGeneralLedgerEntryAttachments: async (companyId: string, contentType: string, postGeneralLedgerEntryAttachmentsRequest: PostGeneralLedgerEntryAttachmentsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('postGeneralLedgerEntryAttachments', 'companyId', companyId)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('postGeneralLedgerEntryAttachments', 'contentType', contentType)
            // verify required parameter 'postGeneralLedgerEntryAttachmentsRequest' is not null or undefined
            assertParamExists('postGeneralLedgerEntryAttachments', 'postGeneralLedgerEntryAttachmentsRequest', postGeneralLedgerEntryAttachmentsRequest)
            const localVarPath = `/companies({company_id})/generalLedgerEntryAttachments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth", ["Financials.ReadWrite.All"], configuration)

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postGeneralLedgerEntryAttachmentsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeneralLedgerEntryAttachmentsApi - functional programming interface
 * @export
 */
export const GeneralLedgerEntryAttachmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GeneralLedgerEntryAttachmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type generalLedgerEntryAttachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {number} generalLedgerEntryAttachmentsGeneralLedgerEntryNumber (v1.0) generalLedgerEntryNumber for generalLedgerEntryAttachments
         * @param {string} generalLedgerEntryAttachmentsId (v1.0) id for generalLedgerEntryAttachments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGeneralLedgerEntryAttachments(companyId: string, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber: number, generalLedgerEntryAttachmentsId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGeneralLedgerEntryAttachments(companyId, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, generalLedgerEntryAttachmentsId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeneralLedgerEntryAttachmentsApi.deleteGeneralLedgerEntryAttachments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type generalLedgerEntryAttachments for Dynamics 365 Business Central.
         * @param {string} companyId (v1.0) id for company
         * @param {number} generalLedgerEntryAttachmentsGeneralLedgerEntryNumber (v1.0) generalLedgerEntryNumber for generalLedgerEntryAttachments
         * @param {string} generalLedgerEntryAttachmentsId (v1.0) id for generalLedgerEntryAttachments
         * @param {Array<GetGeneralLedgerEntryAttachmentsExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<GetGeneralLedgerEntryAttachmentsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGeneralLedgerEntryAttachments(companyId: string, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber: number, generalLedgerEntryAttachmentsId: string, $expand?: Array<GetGeneralLedgerEntryAttachmentsExpandEnum>, $select?: Array<GetGeneralLedgerEntryAttachmentsSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralLedgerEntryAttachments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGeneralLedgerEntryAttachments(companyId, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, generalLedgerEntryAttachmentsId, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeneralLedgerEntryAttachmentsApi.getGeneralLedgerEntryAttachments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Returns a list of generalLedgerEntryAttachments
         * @param {string} companyId (v1.0) id for company
         * @param {number} [$top] (v1.0) Number of items to return from the top of the list
         * @param {number} [$skip] (v1.0) Number of items to skip from the list
         * @param {number} [$limit] (v1.0) Number of items to return from the list
         * @param {string} [$filter] (v1.0) Filtering expression
         * @param {Array<ListGeneralLedgerEntryAttachmentsExpandEnum>} [$expand] (v1.0) Entities to expand
         * @param {Array<ListGeneralLedgerEntryAttachmentsSelectEnum>} [$select] (v1.0) Selected properties to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGeneralLedgerEntryAttachments(companyId: string, $top?: number, $skip?: number, $limit?: number, $filter?: string, $expand?: Array<ListGeneralLedgerEntryAttachmentsExpandEnum>, $select?: Array<ListGeneralLedgerEntryAttachmentsSelectEnum>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListGeneralLedgerEntryAttachments200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGeneralLedgerEntryAttachments(companyId, $top, $skip, $limit, $filter, $expand, $select, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeneralLedgerEntryAttachmentsApi.listGeneralLedgerEntryAttachments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an object of type generalLedgerEntryAttachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {number} generalLedgerEntryAttachmentsGeneralLedgerEntryNumber (v1.0) generalLedgerEntryNumber for generalLedgerEntryAttachments
         * @param {string} generalLedgerEntryAttachmentsId (v1.0) id for generalLedgerEntryAttachments
         * @param {string} contentType (v1.0) application/json
         * @param {string} ifMatch (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
         * @param {PostGeneralLedgerEntryAttachmentsRequest} postGeneralLedgerEntryAttachmentsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchGeneralLedgerEntryAttachments(companyId: string, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber: number, generalLedgerEntryAttachmentsId: string, contentType: string, ifMatch: string, postGeneralLedgerEntryAttachmentsRequest: PostGeneralLedgerEntryAttachmentsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralLedgerEntryAttachments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchGeneralLedgerEntryAttachments(companyId, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, generalLedgerEntryAttachmentsId, contentType, ifMatch, postGeneralLedgerEntryAttachmentsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeneralLedgerEntryAttachmentsApi.patchGeneralLedgerEntryAttachments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates an object of type generalLedgerEntryAttachments in Dynamics 365 Business Central
         * @param {string} companyId (v1.0) id for company
         * @param {string} contentType (v1.0) application/json
         * @param {PostGeneralLedgerEntryAttachmentsRequest} postGeneralLedgerEntryAttachmentsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGeneralLedgerEntryAttachments(companyId: string, contentType: string, postGeneralLedgerEntryAttachmentsRequest: PostGeneralLedgerEntryAttachmentsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralLedgerEntryAttachments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGeneralLedgerEntryAttachments(companyId, contentType, postGeneralLedgerEntryAttachmentsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeneralLedgerEntryAttachmentsApi.postGeneralLedgerEntryAttachments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GeneralLedgerEntryAttachmentsApi - factory interface
 * @export
 */
export const GeneralLedgerEntryAttachmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GeneralLedgerEntryAttachmentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an object of type generalLedgerEntryAttachments in Dynamics 365 Business Central
         * @param {GeneralLedgerEntryAttachmentsApiDeleteGeneralLedgerEntryAttachmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGeneralLedgerEntryAttachments(requestParameters: GeneralLedgerEntryAttachmentsApiDeleteGeneralLedgerEntryAttachmentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteGeneralLedgerEntryAttachments(requestParameters.companyId, requestParameters.generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, requestParameters.generalLedgerEntryAttachmentsId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the properties and relationships of an object of type generalLedgerEntryAttachments for Dynamics 365 Business Central.
         * @param {GeneralLedgerEntryAttachmentsApiGetGeneralLedgerEntryAttachmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGeneralLedgerEntryAttachments(requestParameters: GeneralLedgerEntryAttachmentsApiGetGeneralLedgerEntryAttachmentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GeneralLedgerEntryAttachments> {
            return localVarFp.getGeneralLedgerEntryAttachments(requestParameters.companyId, requestParameters.generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, requestParameters.generalLedgerEntryAttachmentsId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of generalLedgerEntryAttachments
         * @param {GeneralLedgerEntryAttachmentsApiListGeneralLedgerEntryAttachmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGeneralLedgerEntryAttachments(requestParameters: GeneralLedgerEntryAttachmentsApiListGeneralLedgerEntryAttachmentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListGeneralLedgerEntryAttachments200Response> {
            return localVarFp.listGeneralLedgerEntryAttachments(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an object of type generalLedgerEntryAttachments in Dynamics 365 Business Central
         * @param {GeneralLedgerEntryAttachmentsApiPatchGeneralLedgerEntryAttachmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchGeneralLedgerEntryAttachments(requestParameters: GeneralLedgerEntryAttachmentsApiPatchGeneralLedgerEntryAttachmentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GeneralLedgerEntryAttachments> {
            return localVarFp.patchGeneralLedgerEntryAttachments(requestParameters.companyId, requestParameters.generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, requestParameters.generalLedgerEntryAttachmentsId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postGeneralLedgerEntryAttachmentsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates an object of type generalLedgerEntryAttachments in Dynamics 365 Business Central
         * @param {GeneralLedgerEntryAttachmentsApiPostGeneralLedgerEntryAttachmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGeneralLedgerEntryAttachments(requestParameters: GeneralLedgerEntryAttachmentsApiPostGeneralLedgerEntryAttachmentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GeneralLedgerEntryAttachments> {
            return localVarFp.postGeneralLedgerEntryAttachments(requestParameters.companyId, requestParameters.contentType, requestParameters.postGeneralLedgerEntryAttachmentsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteGeneralLedgerEntryAttachments operation in GeneralLedgerEntryAttachmentsApi.
 * @export
 * @interface GeneralLedgerEntryAttachmentsApiDeleteGeneralLedgerEntryAttachmentsRequest
 */
export interface GeneralLedgerEntryAttachmentsApiDeleteGeneralLedgerEntryAttachmentsRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof GeneralLedgerEntryAttachmentsApiDeleteGeneralLedgerEntryAttachments
     */
    readonly companyId: string

    /**
     * (v1.0) generalLedgerEntryNumber for generalLedgerEntryAttachments
     * @type {number}
     * @memberof GeneralLedgerEntryAttachmentsApiDeleteGeneralLedgerEntryAttachments
     */
    readonly generalLedgerEntryAttachmentsGeneralLedgerEntryNumber: number

    /**
     * (v1.0) id for generalLedgerEntryAttachments
     * @type {string}
     * @memberof GeneralLedgerEntryAttachmentsApiDeleteGeneralLedgerEntryAttachments
     */
    readonly generalLedgerEntryAttachmentsId: string
}

/**
 * Request parameters for getGeneralLedgerEntryAttachments operation in GeneralLedgerEntryAttachmentsApi.
 * @export
 * @interface GeneralLedgerEntryAttachmentsApiGetGeneralLedgerEntryAttachmentsRequest
 */
export interface GeneralLedgerEntryAttachmentsApiGetGeneralLedgerEntryAttachmentsRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof GeneralLedgerEntryAttachmentsApiGetGeneralLedgerEntryAttachments
     */
    readonly companyId: string

    /**
     * (v1.0) generalLedgerEntryNumber for generalLedgerEntryAttachments
     * @type {number}
     * @memberof GeneralLedgerEntryAttachmentsApiGetGeneralLedgerEntryAttachments
     */
    readonly generalLedgerEntryAttachmentsGeneralLedgerEntryNumber: number

    /**
     * (v1.0) id for generalLedgerEntryAttachments
     * @type {string}
     * @memberof GeneralLedgerEntryAttachmentsApiGetGeneralLedgerEntryAttachments
     */
    readonly generalLedgerEntryAttachmentsId: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'generalLedgerEntry'>}
     * @memberof GeneralLedgerEntryAttachmentsApiGetGeneralLedgerEntryAttachments
     */
    readonly $expand?: Array<GetGeneralLedgerEntryAttachmentsExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'generalLedgerEntryNumber' | 'id' | 'fileName' | 'byteSize' | 'content' | 'createdDateTime'>}
     * @memberof GeneralLedgerEntryAttachmentsApiGetGeneralLedgerEntryAttachments
     */
    readonly $select?: Array<GetGeneralLedgerEntryAttachmentsSelectEnum>
}

/**
 * Request parameters for listGeneralLedgerEntryAttachments operation in GeneralLedgerEntryAttachmentsApi.
 * @export
 * @interface GeneralLedgerEntryAttachmentsApiListGeneralLedgerEntryAttachmentsRequest
 */
export interface GeneralLedgerEntryAttachmentsApiListGeneralLedgerEntryAttachmentsRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof GeneralLedgerEntryAttachmentsApiListGeneralLedgerEntryAttachments
     */
    readonly companyId: string

    /**
     * (v1.0) Number of items to return from the top of the list
     * @type {number}
     * @memberof GeneralLedgerEntryAttachmentsApiListGeneralLedgerEntryAttachments
     */
    readonly $top?: number

    /**
     * (v1.0) Number of items to skip from the list
     * @type {number}
     * @memberof GeneralLedgerEntryAttachmentsApiListGeneralLedgerEntryAttachments
     */
    readonly $skip?: number

    /**
     * (v1.0) Number of items to return from the list
     * @type {number}
     * @memberof GeneralLedgerEntryAttachmentsApiListGeneralLedgerEntryAttachments
     */
    readonly $limit?: number

    /**
     * (v1.0) Filtering expression
     * @type {string}
     * @memberof GeneralLedgerEntryAttachmentsApiListGeneralLedgerEntryAttachments
     */
    readonly $filter?: string

    /**
     * (v1.0) Entities to expand
     * @type {Array<'generalLedgerEntry'>}
     * @memberof GeneralLedgerEntryAttachmentsApiListGeneralLedgerEntryAttachments
     */
    readonly $expand?: Array<ListGeneralLedgerEntryAttachmentsExpandEnum>

    /**
     * (v1.0) Selected properties to be retrieved
     * @type {Array<'generalLedgerEntryNumber' | 'id' | 'fileName' | 'byteSize' | 'content' | 'createdDateTime'>}
     * @memberof GeneralLedgerEntryAttachmentsApiListGeneralLedgerEntryAttachments
     */
    readonly $select?: Array<ListGeneralLedgerEntryAttachmentsSelectEnum>
}

/**
 * Request parameters for patchGeneralLedgerEntryAttachments operation in GeneralLedgerEntryAttachmentsApi.
 * @export
 * @interface GeneralLedgerEntryAttachmentsApiPatchGeneralLedgerEntryAttachmentsRequest
 */
export interface GeneralLedgerEntryAttachmentsApiPatchGeneralLedgerEntryAttachmentsRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof GeneralLedgerEntryAttachmentsApiPatchGeneralLedgerEntryAttachments
     */
    readonly companyId: string

    /**
     * (v1.0) generalLedgerEntryNumber for generalLedgerEntryAttachments
     * @type {number}
     * @memberof GeneralLedgerEntryAttachmentsApiPatchGeneralLedgerEntryAttachments
     */
    readonly generalLedgerEntryAttachmentsGeneralLedgerEntryNumber: number

    /**
     * (v1.0) id for generalLedgerEntryAttachments
     * @type {string}
     * @memberof GeneralLedgerEntryAttachmentsApiPatchGeneralLedgerEntryAttachments
     */
    readonly generalLedgerEntryAttachmentsId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof GeneralLedgerEntryAttachmentsApiPatchGeneralLedgerEntryAttachments
     */
    readonly contentType: string

    /**
     * (v1.0) Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
     * @type {string}
     * @memberof GeneralLedgerEntryAttachmentsApiPatchGeneralLedgerEntryAttachments
     */
    readonly ifMatch: string

    /**
     * 
     * @type {PostGeneralLedgerEntryAttachmentsRequest}
     * @memberof GeneralLedgerEntryAttachmentsApiPatchGeneralLedgerEntryAttachments
     */
    readonly postGeneralLedgerEntryAttachmentsRequest: PostGeneralLedgerEntryAttachmentsRequest
}

/**
 * Request parameters for postGeneralLedgerEntryAttachments operation in GeneralLedgerEntryAttachmentsApi.
 * @export
 * @interface GeneralLedgerEntryAttachmentsApiPostGeneralLedgerEntryAttachmentsRequest
 */
export interface GeneralLedgerEntryAttachmentsApiPostGeneralLedgerEntryAttachmentsRequest {
    /**
     * (v1.0) id for company
     * @type {string}
     * @memberof GeneralLedgerEntryAttachmentsApiPostGeneralLedgerEntryAttachments
     */
    readonly companyId: string

    /**
     * (v1.0) application/json
     * @type {string}
     * @memberof GeneralLedgerEntryAttachmentsApiPostGeneralLedgerEntryAttachments
     */
    readonly contentType: string

    /**
     * 
     * @type {PostGeneralLedgerEntryAttachmentsRequest}
     * @memberof GeneralLedgerEntryAttachmentsApiPostGeneralLedgerEntryAttachments
     */
    readonly postGeneralLedgerEntryAttachmentsRequest: PostGeneralLedgerEntryAttachmentsRequest
}

/**
 * GeneralLedgerEntryAttachmentsApi - object-oriented interface
 * @export
 * @class GeneralLedgerEntryAttachmentsApi
 * @extends {BaseAPI}
 */
export class GeneralLedgerEntryAttachmentsApi extends BaseAPI {
    /**
     * 
     * @summary Deletes an object of type generalLedgerEntryAttachments in Dynamics 365 Business Central
     * @param {GeneralLedgerEntryAttachmentsApiDeleteGeneralLedgerEntryAttachmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralLedgerEntryAttachmentsApi
     */
    public deleteGeneralLedgerEntryAttachments(requestParameters: GeneralLedgerEntryAttachmentsApiDeleteGeneralLedgerEntryAttachmentsRequest, options?: RawAxiosRequestConfig) {
        return GeneralLedgerEntryAttachmentsApiFp(this.configuration).deleteGeneralLedgerEntryAttachments(requestParameters.companyId, requestParameters.generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, requestParameters.generalLedgerEntryAttachmentsId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the properties and relationships of an object of type generalLedgerEntryAttachments for Dynamics 365 Business Central.
     * @param {GeneralLedgerEntryAttachmentsApiGetGeneralLedgerEntryAttachmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralLedgerEntryAttachmentsApi
     */
    public getGeneralLedgerEntryAttachments(requestParameters: GeneralLedgerEntryAttachmentsApiGetGeneralLedgerEntryAttachmentsRequest, options?: RawAxiosRequestConfig) {
        return GeneralLedgerEntryAttachmentsApiFp(this.configuration).getGeneralLedgerEntryAttachments(requestParameters.companyId, requestParameters.generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, requestParameters.generalLedgerEntryAttachmentsId, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of generalLedgerEntryAttachments
     * @param {GeneralLedgerEntryAttachmentsApiListGeneralLedgerEntryAttachmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralLedgerEntryAttachmentsApi
     */
    public listGeneralLedgerEntryAttachments(requestParameters: GeneralLedgerEntryAttachmentsApiListGeneralLedgerEntryAttachmentsRequest, options?: RawAxiosRequestConfig) {
        return GeneralLedgerEntryAttachmentsApiFp(this.configuration).listGeneralLedgerEntryAttachments(requestParameters.companyId, requestParameters.$top, requestParameters.$skip, requestParameters.$limit, requestParameters.$filter, requestParameters.$expand, requestParameters.$select, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an object of type generalLedgerEntryAttachments in Dynamics 365 Business Central
     * @param {GeneralLedgerEntryAttachmentsApiPatchGeneralLedgerEntryAttachmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralLedgerEntryAttachmentsApi
     */
    public patchGeneralLedgerEntryAttachments(requestParameters: GeneralLedgerEntryAttachmentsApiPatchGeneralLedgerEntryAttachmentsRequest, options?: RawAxiosRequestConfig) {
        return GeneralLedgerEntryAttachmentsApiFp(this.configuration).patchGeneralLedgerEntryAttachments(requestParameters.companyId, requestParameters.generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, requestParameters.generalLedgerEntryAttachmentsId, requestParameters.contentType, requestParameters.ifMatch, requestParameters.postGeneralLedgerEntryAttachmentsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates an object of type generalLedgerEntryAttachments in Dynamics 365 Business Central
     * @param {GeneralLedgerEntryAttachmentsApiPostGeneralLedgerEntryAttachmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralLedgerEntryAttachmentsApi
     */
    public postGeneralLedgerEntryAttachments(requestParameters: GeneralLedgerEntryAttachmentsApiPostGeneralLedgerEntryAttachmentsRequest, options?: RawAxiosRequestConfig) {
        return GeneralLedgerEntryAttachmentsApiFp(this.configuration).postGeneralLedgerEntryAttachments(requestParameters.companyId, requestParameters.contentType, requestParameters.postGeneralLedgerEntryAttachmentsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetGeneralLedgerEntryAttachmentsExpandEnum = {
    GeneralLedgerEntry: 'generalLedgerEntry'
} as const;
export type GetGeneralLedgerEntryAttachmentsExpandEnum = typeof GetGeneralLedgerEntryAttachmentsExpandEnum[keyof typeof GetGeneralLedgerEntryAttachmentsExpandEnum];
/**
 * @export
 */
export const GetGeneralLedgerEntryAttachmentsSelectEnum = {
    GeneralLedgerEntryNumber: 'generalLedgerEntryNumber',
    Id: 'id',
    FileName: 'fileName',
    ByteSize: 'byteSize',
    Content: 'content',
    CreatedDateTime: 'createdDateTime'
} as const;
export type GetGeneralLedgerEntryAttachmentsSelectEnum = typeof GetGeneralLedgerEntryAttachmentsSelectEnum[keyof typeof GetGeneralLedgerEntryAttachmentsSelectEnum];
/**
 * @export
 */
export const ListGeneralLedgerEntryAttachmentsExpandEnum = {
    GeneralLedgerEntry: 'generalLedgerEntry'
} as const;
export type ListGeneralLedgerEntryAttachmentsExpandEnum = typeof ListGeneralLedgerEntryAttachmentsExpandEnum[keyof typeof ListGeneralLedgerEntryAttachmentsExpandEnum];
/**
 * @export
 */
export const ListGeneralLedgerEntryAttachmentsSelectEnum = {
    GeneralLedgerEntryNumber: 'generalLedgerEntryNumber',
    Id: 'id',
    FileName: 'fileName',
    ByteSize: 'byteSize',
    Content: 'content',
    CreatedDateTime: 'createdDateTime'
} as const;
export type ListGeneralLedgerEntryAttachmentsSelectEnum = typeof ListGeneralLedgerEntryAttachmentsSelectEnum[keyof typeof ListGeneralLedgerEntryAttachmentsSelectEnum];
